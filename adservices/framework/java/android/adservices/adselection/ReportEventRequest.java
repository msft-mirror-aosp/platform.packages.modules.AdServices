/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.adservices.adselection;

import static android.adservices.adselection.AdSelectionOutcome.UNSET_AD_SELECTION_ID;
import static android.adservices.adselection.AdSelectionOutcome.UNSET_AD_SELECTION_ID_MESSAGE;

import android.annotation.IntDef;
import android.annotation.NonNull;

import com.android.internal.util.Preconditions;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.Objects;

/**
 * Request object wrapping the required arguments needed to report an ad event.
 *
 * @hide
 */
// TODO(b/261812140): Unhide for report interaction API review
public class ReportEventRequest {
    public static final int FLAG_REPORTING_DESTINATION_SELLER = 1 << 0;
    public static final int FLAG_REPORTING_DESTINATION_BUYER = 1 << 1;
    private static final int UNSET_REPORTING_DESTINATIONS = 0;
    private static final String UNSET_REPORTING_DESTINATIONS_MESSAGE =
            "Reporting destinations bitfield not set.";

    private final long mAdSelectionId;
    @NonNull private final String mEventKey;
    @NonNull private final String mEventData;
    @ReportingDestination private final int mReportingDestinations; // buyer, seller, or both

    /**
     * Constructs the object wrapping the required arguments needed to report an ad event
     *
     * @param adSelectionId the primary identifier of an ad selection process
     * @param eventKey the type of ad event to be reported.
     *     <p>This field will be used to fetch the {@code reportingUri} associated with the {@code
     *     eventKey} registered in {@code registerAdBeacon} after ad selection.
     *     <p>This field should be an exact match to the {@code eventKey} registered in {@code
     *     registerAdBeacon}. Specific details about {@code registerAdBeacon} can be found at the
     *     documentation of {@link AdSelectionManager#reportImpression}
     * @param eventData data generated by the caller, and will be attached in a POST request to the
     *     {@code reportingUri} registered in {@code registerAdBeacon}.
     * @param reportingDestinations the bitfield of reporting destinations to report to (buyer,
     *     seller, or both).
     *     <p>To create this bitfield, place an {@code |} bitwise operator between each {@code
     *     reportingDestination} to be reported to. For example to only report to buyer, set the
     *     reportingDestinations field to {@link #FLAG_REPORTING_DESTINATION_BUYER} To only report
     *     to seller, set the reportingDestinations field to {@link
     *     #FLAG_REPORTING_DESTINATION_SELLER} To report to both buyers and sellers, set the
     *     reportingDestinations field to {@link #FLAG_REPORTING_DESTINATION_BUYER} | {@link
     *     #FLAG_REPORTING_DESTINATION_SELLER}
     */
    public ReportEventRequest(
            long adSelectionId,
            @NonNull String eventKey,
            @NonNull String eventData,
            @ReportingDestination int reportingDestinations) {
        Objects.requireNonNull(eventKey);
        Objects.requireNonNull(eventData);

        Preconditions.checkArgument(
                adSelectionId != UNSET_AD_SELECTION_ID, UNSET_AD_SELECTION_ID_MESSAGE);
        Preconditions.checkArgument(
                reportingDestinations != UNSET_REPORTING_DESTINATIONS,
                UNSET_REPORTING_DESTINATIONS_MESSAGE);

        this.mAdSelectionId = adSelectionId;
        this.mEventKey = eventKey;
        this.mEventData = eventData;
        this.mReportingDestinations = reportingDestinations;
    }

    /**
     * Returns the adSelectionId, the primary identifier of an ad selection process.
     *
     * @hide
     */
    public long getAdSelectionId() {
        return mAdSelectionId;
    }

    /**
     * Returns the event key, the type of ad event to be reported.
     *
     * <p>This field will be used to fetch the {@code reportingUri} associated with the {@code
     * eventKey} registered in {@code registerAdBeacon} after ad selection.
     *
     * <p>This field should be an exact match to the {@code eventKey} registered in {@code
     * registerAdBeacon}. Specific details about {@code registerAdBeacon} can be found at the
     * documentation of {@link AdSelectionManager#reportImpression}
     *
     * <p>The event key (when inspecting its byte array with {@link String#getBytes()}) in {@code
     * UTF-8} format should not exceed 40 bytes. Any key exceeding this limit will not be registered
     * during the {@code registerAdBeacon} call.
     *
     * @hide
     */
    @NonNull
    public String getEventKey() {
        return mEventKey;
    }

    /**
     * Returns the ad event data.
     *
     * <p>After ad selection, this data is generated by the caller. The caller can then call {@link
     * AdSelectionManager#reportEvent}. This data will be attached in a POST request to the {@code
     * reportingUri} registered in {@code registerAdBeacon}.
     *
     * <p>The size of {@link String#getBytes()} in {@code UTF-8} format should be below 64KB.
     *
     * @hide
     */
    @NonNull
    public String getEventData() {
        return mEventData;
    }

    /**
     * Returns the bitfield of reporting destinations to report to (buyer, seller, or both).
     *
     * <p>To create this bitfield, place an {@code |} bitwise operator between each {@code
     * reportingDestination} to be reported to. For example to only report to buyer, set the
     * reportingDestinations field to {@link #FLAG_REPORTING_DESTINATION_BUYER} To only report to
     * seller, set the reportingDestinations field to {@link #FLAG_REPORTING_DESTINATION_SELLER} To
     * report to both buyers and sellers, set the reportingDestinations field to {@link
     * #FLAG_REPORTING_DESTINATION_BUYER} | {@link #FLAG_REPORTING_DESTINATION_SELLER}
     *
     * @hide
     */
    @ReportingDestination
    public int getReportingDestinations() {
        return mReportingDestinations;
    }

    /** @hide */
    @IntDef(
            flag = true,
            prefix = {"FLAG_REPORTING_DESTINATION"},
            value = {FLAG_REPORTING_DESTINATION_SELLER, FLAG_REPORTING_DESTINATION_BUYER})
    @Retention(RetentionPolicy.SOURCE)
    public @interface ReportingDestination {}
}
