/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.adservices.adselection;

import android.annotation.IntDef;
import android.annotation.NonNull;
import android.annotation.Nullable;
import android.os.Parcel;
import android.os.Parcelable;

import com.android.internal.util.Preconditions;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.util.Objects;

/**
 * Represent input params to the reportInteraction API.
 *
 * @hide
 */
public class ReportInteractionInput implements Parcelable {
    public static final int DESTINATION_SELLER = 0x1;
    public static final int DESTINATION_BUYER = 0x2;
    private static final int UNSET = 0;

    private final long mAdSelectionId;
    @NonNull private final String mInteractionKey;
    @NonNull private final InteractionData mInteractionData;
    private final int mDestinations; // buyer, seller, or both

    @NonNull
    public static final Creator<ReportInteractionInput> CREATOR =
            new Creator<ReportInteractionInput>() {
                @Override
                public ReportInteractionInput createFromParcel(@NonNull Parcel in) {
                    Objects.requireNonNull(in);

                    return new ReportInteractionInput(in);
                }

                @Override
                public ReportInteractionInput[] newArray(int size) {
                    return new ReportInteractionInput[size];
                }
            };

    private ReportInteractionInput(
            long adSelectionId,
            @NonNull String interactionKey,
            @NonNull InteractionData interactionData,
            int destinations) {
        Objects.requireNonNull(interactionKey);
        Objects.requireNonNull(interactionData);

        this.mAdSelectionId = adSelectionId;
        this.mInteractionKey = interactionKey;
        this.mInteractionData = interactionData;
        this.mDestinations = destinations;
    }

    private ReportInteractionInput(@NonNull Parcel in) {
        this.mAdSelectionId = in.readLong();
        this.mInteractionKey = in.readString();
        this.mInteractionData = InteractionData.CREATOR.createFromParcel(in);
        this.mDestinations = in.readInt();
    }

    @Override
    public int describeContents() {
        return 0;
    }

    @Override
    public void writeToParcel(@NonNull Parcel dest, int flags) {
        Objects.requireNonNull(dest);
        dest.writeLong(mAdSelectionId);
        dest.writeString(mInteractionKey);
        mInteractionData.writeToParcel(dest, flags);
        dest.writeInt(mDestinations);
    }

    /** Returns the adSelectionId, the primary identifier of an ad selection process. */
    public long getAdSelectionId() {
        return mAdSelectionId;
    }

    /**
     * Returns the interaction key, the type of interaction to be reported. This will be used to
     * fetch the {@code interactionReportingUri} associated with the {@code interactionKey}
     * registered in {@code registerAdBeacon} after ad selection.
     */
    public String getInteractionKey() {
        return mInteractionKey;
    }

    /**
     * Returns the interaction data. After ad selection, this data is generated by the caller, and
     * will be attached in a POST request to the {@code interactionReportingUri} registered in
     * {@code registerAdBeacon}.
     */
    public InteractionData getInteractionData() {
        return mInteractionData;
    }

    /** Returns the bitfield of destinations to report to (buyer, seller, or both) */
    public int getDestinations() {
        return mDestinations;
    }

    // TODO(b/261811605): Move this @IntDef to the external request object
    @IntDef(
            prefix = {"DESTINATION_"},
            value = {DESTINATION_SELLER, DESTINATION_BUYER})
    @Retention(RetentionPolicy.SOURCE)
    public @interface Destination {}

    /**
     * Builder for {@link ReportInteractionInput} objects.
     *
     * @hide
     */
    public static final class Builder {
        private long mAdSelectionId = UNSET;
        @Nullable private String mInteractionKey;
        @Nullable private InteractionData mInteractionData;
        private int mDestinations = UNSET;

        public Builder() {}

        /** Sets the adSelectionId. */
        @NonNull
        public ReportInteractionInput.Builder setAdSelectionId(long adSelectionId) {
            mAdSelectionId = adSelectionId;
            return this;
        }

        /** Sets the interactionKey. */
        @NonNull
        public ReportInteractionInput.Builder setInteractionKey(@NonNull String interactionKey) {
            Objects.requireNonNull(interactionKey);

            mInteractionKey = interactionKey;
            return this;
        }

        /** Sets the interactionData. */
        @NonNull
        public ReportInteractionInput.Builder setInteractionData(
                @NonNull InteractionData interactionData) {
            Objects.requireNonNull(interactionData);

            mInteractionData = interactionData;
            return this;
        }

        /** Sets the bitfield of destinations. */
        @NonNull
        public ReportInteractionInput.Builder setDestinations(int destinations) {

            mDestinations = destinations;
            return this;
        }

        /** Builds a {@link ReportInteractionInput} instance. */
        @NonNull
        public ReportInteractionInput build() {
            Objects.requireNonNull(mInteractionKey);
            Objects.requireNonNull(mInteractionData);

            Preconditions.checkArgument(mAdSelectionId != UNSET, "AdSelectionId not set");
            Preconditions.checkArgument(mDestinations != UNSET, "Destinations not set");

            return new ReportInteractionInput(
                    mAdSelectionId, mInteractionKey, mInteractionData, mDestinations);
        }
    }
}
