/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.adservices.ohttp;

import com.google.auto.value.AutoValue;
import com.google.common.io.BaseEncoding;

/**
 * Holds the OHTTP request context which contains the key config, the shared secret and the hpke
 * context
 *
 * <p>Clients need to save this request context to be able to decrypt the response from the server
 */
@AutoValue
public abstract class ObliviousHttpRequestContext {

    /** Returns the Oblivious HTTP key config */
    public abstract ObliviousHttpKeyConfig keyConfig();

    /** Returns the encapsulated shared secret generated by the HPKE setup base operation */
    public abstract EncapsulatedSharedSecret encapsulatedSharedSecret();

    /** The random seed that was used to construct the Hpke context */
    public abstract byte[] seed();

    /** Returns whether it uses the changed media type */
    public abstract boolean hasMediaTypeChanged();

    /** Create a OHTTP request context object */
    public static ObliviousHttpRequestContext create(
            ObliviousHttpKeyConfig keyConfig,
            EncapsulatedSharedSecret enc,
            byte[] seed,
            boolean hasMediaTypeChanged) {
        return new AutoValue_ObliviousHttpRequestContext(keyConfig, enc, seed, hasMediaTypeChanged);
    }

    /** Serialize the byte array seed into a tring */
    public static String serializeSeed(byte[] seed) {
        return BaseEncoding.base16().lowerCase().encode(seed);
    }

    /** Deserialize the seed string into its byte array */
    public static byte[] deserializeSeed(String serializedSeed) {
        return BaseEncoding.base16().lowerCase().decode(serializedSeed);
    }
}
