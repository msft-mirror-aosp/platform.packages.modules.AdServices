/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.adservices.data.adselection;

import android.annotation.NonNull;
import android.annotation.Nullable;

import androidx.room.ColumnInfo;
import androidx.room.Entity;
import androidx.room.Index;
import androidx.room.PrimaryKey;

import com.google.auto.value.AutoValue;

import java.time.Instant;
import java.util.Objects;

@AutoValue
@AutoValue.CopyAnnotations
@Entity(
        tableName = DBConsentedDebugConfiguration.TABLE_NAME,
        indices = {@Index(value = {"creation_timestamp"})})
public abstract class DBConsentedDebugConfiguration {
    public static final String TABLE_NAME = "consented_debug_configuration";

    /** Gets the autogenerated ad selection debug report id. */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "consented_debug_configuration_primary_key")
    @PrimaryKey(autoGenerate = true)
    @Nullable
    public abstract Long getConsentedDebugConfigurationPrimaryKey();

    /** Gets the debug report uri. */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "is_consent_provided")
    @NonNull
    public abstract boolean getIsConsentProvided();

    /** Gets the dev options enabled flag. */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "debug_token")
    @NonNull
    public abstract String getDebugToken();

    /** Gets the creation timestamp. */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "creation_timestamp")
    @NonNull
    public abstract Instant getCreationTimestamp();

    /** Gets the creation timestamp. */
    @AutoValue.CopyAnnotations
    @ColumnInfo(name = "expiry_timestamp")
    @NonNull
    public abstract Instant getExpiryTimestamp();

    /** Returns an AutoValue builder for a {@link DBAdSelectionDebugReport} object. */
    @NonNull
    public static DBConsentedDebugConfiguration.Builder builder() {
        return new AutoValue_DBConsentedDebugConfiguration.Builder()
                .setConsentedDebugConfigurationPrimaryKey(null)
                .setCreationTimestamp(Instant.now());
    }

    /** creates a DBAdSelectionDebugReport object. */
    @NonNull
    public static DBConsentedDebugConfiguration create(
            @Nullable Long consentedDebugConfigurationPrimaryKey,
            boolean isConsentProvided,
            @NonNull String debugToken,
            @NonNull Instant creationTimestamp,
            @NonNull Instant expiryTimestamp) {
        Objects.requireNonNull(debugToken);
        Objects.requireNonNull(creationTimestamp);
        Objects.requireNonNull(expiryTimestamp);

        return builder()
                .setConsentedDebugConfigurationPrimaryKey(consentedDebugConfigurationPrimaryKey)
                .setIsConsentProvided(isConsentProvided)
                .setDebugToken(debugToken)
                .setCreationTimestamp(creationTimestamp)
                .setExpiryTimestamp(expiryTimestamp)
                .build();
    }

    /** Builder class for a {@link DBConsentedDebugConfiguration} object. */
    @AutoValue.Builder
    public abstract static class Builder {
        /**
         * Sets the numerical ID linking {@link DBConsentedDebugConfiguration}.d.
         *
         * <p>This primary key is only used internally and does not need to be stable or
         * reproducible. It is auto-generated by Room if set to {@code null} on insertion.
         */
        @NonNull
        public abstract Builder setConsentedDebugConfigurationPrimaryKey(
                @Nullable Long consentedDebugConfigurationPrimaryKey);

        /** Sets is consented provided. */
        @NonNull
        public abstract Builder setIsConsentProvided(boolean isConsentProvided);

        /** Sets the debug token. */
        @NonNull
        public abstract Builder setDebugToken(@NonNull String debugToken);

        /** Sets the creation timestamp. */
        @NonNull
        public abstract Builder setCreationTimestamp(@NonNull Instant creationTimestamp);

        /** Sets the expiry timestamp. */
        @NonNull
        public abstract Builder setExpiryTimestamp(@NonNull Instant expiryTimestamp);

        /**
         * Builds and returns the {@link DBConsentedDebugConfiguration} object.
         *
         * @throws IllegalStateException if any required field is unset when the object is built
         */
        @NonNull
        public abstract DBConsentedDebugConfiguration build();
    }
}
