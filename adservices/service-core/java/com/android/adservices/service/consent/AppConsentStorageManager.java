/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.adservices.service.consent;

import android.os.Build;

import androidx.annotation.RequiresApi;

import com.android.adservices.LogUtil;
import com.android.adservices.data.common.BooleanFileDatastore;
import com.android.adservices.data.consent.AppConsentDao;
import com.android.adservices.service.common.feature.PrivacySandboxFeatureType;
import com.android.adservices.service.ui.data.UxStatesDao;
import com.android.adservices.service.ui.enrollment.collection.PrivacySandboxEnrollmentChannelCollection;
import com.android.adservices.service.ui.ux.collection.PrivacySandboxUxCollection;

import com.google.common.collect.ImmutableList;

import java.io.IOException;
import java.util.stream.Collectors;

/**
 * AppConsentStorageManager to handle user's consent related Apis.
 *
 * <p>Used in PPAPI_ONLY, PPAPI_AND_SYSTEM_SERVER
 */
@RequiresApi(Build.VERSION_CODES.S)
public class AppConsentStorageManager implements IConsentStorage {

    public static final int NO_MANUAL_INTERACTIONS_RECORDED = -1;
    public static final int UNKNOWN = 0;
    public static final int MANUAL_INTERACTIONS_RECORDED = 1;
    private final BooleanFileDatastore mDatastore;
    private final AppConsentDao mAppConsentDao;
    private final UxStatesDao mUxStatesDao;

    /**
     * Constructor of AppConsentStorageManager
     *
     * @param datastore stores consent
     * @param appConsentDao mostly used by FLEDGE
     * @param uxStatesDao stores ux related data
     */
    public AppConsentStorageManager(
            BooleanFileDatastore datastore, AppConsentDao appConsentDao, UxStatesDao uxStatesDao) {
        this.mDatastore = datastore;
        this.mAppConsentDao = appConsentDao;
        this.mUxStatesDao = uxStatesDao;
    }

    /**
     * Deletes all app consent data and all app data gathered or generated by the Privacy Sandbox.
     *
     * <p>This should be called when the Privacy Sandbox has been disabled.
     *
     * @throws IOException if the operation fails
     */
    @Override
    public void clearAllAppConsentData() throws IOException {
        mAppConsentDao.clearAllConsentData();
    }

    /**
     * Clear consent data after an app was uninstalled.
     *
     * @param packageName the package name that had been uninstalled.
     * @throws IOException if the operation fails
     */
    @Override
    public void clearConsentForUninstalledApp(String packageName) throws IOException {
        mAppConsentDao.clearConsentForUninstalledApp(packageName);
    }

    /**
     * Clear consent data after an app was uninstalled.
     *
     * @param packageName the package name that had been uninstalled.
     * @param packageUid the package uid that had been uninstalled.
     * @throws IOException if the operation fails
     */
    @Override
    public void clearConsentForUninstalledApp(String packageName, int packageUid)
            throws IOException {
        mAppConsentDao.clearConsentForUninstalledApp(packageName, packageUid);
    }

    /**
     * Deletes the list of known allowed apps as well as all app data from the Privacy Sandbox.
     *
     * <p>The list of blocked apps is not reset.
     *
     * @throws IOException if the operation fails
     */
    @Override
    public void clearKnownAppsWithConsent() throws IOException {
        mAppConsentDao.clearKnownAppsWithConsent();
    }

    /**
     * @return an {@link ImmutableList} of all known apps in the database that have had user consent
     *     revoked
     * @throws IOException if the operation fails
     */
    @Override
    public ImmutableList<String> getAppsWithRevokedConsent() throws IOException {
        return ImmutableList.copyOf(
                mAppConsentDao.getAppsWithRevokedConsent().stream().collect(Collectors.toList()));
    }

    /**
     * Retrieves the consent for all PP API services.
     *
     * <p>To read from PPAPI consent if source of truth is PPAPI. To read from system server consent
     * if source of truth is system server or dual sources.
     *
     * @return AdServicesApiConsent the consent
     */
    @Override
    public AdServicesApiConsent getConsent(AdServicesApiType apiType) {
        return AdServicesApiConsent.getConsent(mDatastore.get(apiType.toPpApiDatastoreKey()));
    }

    /**
     * Get the current privacy sandbox feature.
     *
     * <p>To write to PPAPI if consent source of truth is PPAPI_ONLY or dual sources. To write to
     * system server if consent source of truth is SYSTEM_SERVER_ONLY or dual sources.
     *
     * @return PrivacySandboxFeatureType privacy sandbox feature
     */
    @Override
    public PrivacySandboxFeatureType getCurrentPrivacySandboxFeature() {
        // test
        for (PrivacySandboxFeatureType featureType : PrivacySandboxFeatureType.values()) {
            if (Boolean.TRUE.equals(mDatastore.get(featureType.name()))) {
                return featureType;
            }
        }
        return PrivacySandboxFeatureType.PRIVACY_SANDBOX_UNSUPPORTED;
    }

    /**
     * Retrieves the default AdId state.
     *
     * @return true if the AdId is enabled by default, false otherwise.
     */
    @Override
    public boolean getDefaultAdIdState() {
        return mDatastore.get(ConsentConstants.DEFAULT_AD_ID_STATE);
    }

    /**
     * Retrieves the PP API default consent.
     *
     * @return AdServicesApiConsent.
     */
    @Override
    public AdServicesApiConsent getDefaultConsent(AdServicesApiType apiType) {
        return AdServicesApiConsent.getConsent(mDatastore.get(apiType.toPpApiDatastoreKey()));
    }

    /** Returns current enrollment channel. */
    @Override
    public PrivacySandboxEnrollmentChannelCollection getEnrollmentChannel(
            PrivacySandboxUxCollection ux) {
        return mUxStatesDao.getEnrollmentChannel(ux);
    }

    /**
     * @return an {@link ImmutableList} of all known apps in the database that have not had user
     *     consent revoked
     */
    @Override
    public ImmutableList<String> getKnownAppsWithConsent() throws IOException {
        return ImmutableList.copyOf(
                mAppConsentDao.getKnownAppsWithConsent().stream().collect(Collectors.toList()));
    }

    /**
     * Returns information whether user interacted with consent manually.
     *
     * @return true if the user interacted with the consent manually, otherwise false.
     */
    @Override
    public int getUserManualInteractionWithConsent() throws IOException {
        // test
        Boolean manualInteractionWithConsent =
                mDatastore.get(ConsentConstants.MANUAL_INTERACTION_WITH_CONSENT_RECORDED);
        if (manualInteractionWithConsent == null) {
            return UNKNOWN;
        } else if (Boolean.TRUE.equals(manualInteractionWithConsent)) {
            return MANUAL_INTERACTIONS_RECORDED;
        } else {
            return NO_MANUAL_INTERACTIONS_RECORDED;
        }
    }

    /** Returns current UX. */
    @Override
    public PrivacySandboxUxCollection getUx() {
        return mUxStatesDao.getUx();
    }

    /** Returns whether the isAdIdEnabled bit is true. */
    @Override
    public boolean isAdIdEnabled() {
        return mDatastore.get(ConsentConstants.IS_AD_ID_ENABLED);
    }

    /** Returns whether the isAdultAccount bit is true. */
    @Override
    public boolean isAdultAccount() {
        return mDatastore.get(ConsentConstants.IS_ADULT_ACCOUNT);
    }

    /**
     * Returns whether a given application (identified by package name) has had user consent
     * revoked.
     *
     * <p>If the given application is installed but is not found in the datastore, the application
     * is treated as having user consent, and this method returns {@code false}. If there is
     * IOException, return {@code true}.
     *
     * @throws IllegalArgumentException if the package name is invalid or not found as an installed
     *     application
     */
    @Override
    public boolean isConsentRevokedForApp(String packageName) throws IllegalArgumentException {
        try {
            return mAppConsentDao.isConsentRevokedForApp(packageName);
        } catch (IOException exception) {
            LogUtil.e(exception, "FLEDGE consent check failed due to IOException");
        }
        return true;
    }

    /** Returns whether the isEntryPointEnabled bit is true. */
    @Override
    public boolean isEntryPointEnabled() {
        return mDatastore.get(ConsentConstants.IS_ENTRY_POINT_ENABLED);
    }

    /** Returns whether the isU18Account bit is true. */
    @Override
    public boolean isU18Account() {
        return mDatastore.get(ConsentConstants.IS_U18_ACCOUNT);
    }

    /** Saves the default AdId state bit to data stores based on source of truth. */
    @Override
    public void recordDefaultAdIdState(boolean defaultAdIdState) throws IOException {
        mDatastore.put(ConsentConstants.DEFAULT_AD_ID_STATE, defaultAdIdState);
    }

    /** Saves the PP API default consent of a user. */
    @Override
    public void recordDefaultConsent(AdServicesApiType apiType, boolean defaultConsent)
            throws IOException {
        mDatastore.put(apiType.toPpApiDatastoreKey(), defaultConsent);
    }

    /**
     * Saves information to the storage that GA UX notification was displayed for the first time to
     * the user.
     */
    @Override
    public void recordGaUxNotificationDisplayed(boolean wasGaUxDisplayed) throws IOException {
        mDatastore.put(ConsentConstants.GA_UX_NOTIFICATION_DISPLAYED_ONCE, wasGaUxDisplayed);
    }

    /**
     * Saves information to the storage that notification was displayed for the first time to the
     * user.
     */
    @Override
    public void recordNotificationDisplayed(boolean wasNotificationDisplayed) throws IOException {
        // test
        mDatastore.put(ConsentConstants.NOTIFICATION_DISPLAYED_ONCE, wasNotificationDisplayed);
    }

    /** Saves information to the storage that user interacted with consent manually. */
    @Override
    public void recordUserManualInteractionWithConsent(int interaction) throws IOException {
        switch (interaction) {
            case NO_MANUAL_INTERACTIONS_RECORDED:
                mDatastore.put(ConsentConstants.MANUAL_INTERACTION_WITH_CONSENT_RECORDED, false);
                break;
            case UNKNOWN:
                mDatastore.remove(ConsentConstants.MANUAL_INTERACTION_WITH_CONSENT_RECORDED);
                break;
            case MANUAL_INTERACTIONS_RECORDED:
                mDatastore.put(ConsentConstants.MANUAL_INTERACTION_WITH_CONSENT_RECORDED, true);
                break;
            default:
                throw new IllegalArgumentException(
                        String.format("InteractionId < %d > can not be handled.", interaction));
        }
    }

    /** Set the AdIdEnabled bit to storage. */
    @Override
    public void setAdIdEnabled(boolean isAdIdEnabled) throws IOException {
        // test
        mDatastore.put(ConsentConstants.IS_AD_ID_ENABLED, isAdIdEnabled);
    }

    /** Set the AdultAccount bit to storage. */
    @Override
    public void setAdultAccount(boolean isAdultAccount) throws IOException {
        mDatastore.put(ConsentConstants.IS_ADULT_ACCOUNT, isAdultAccount);
    }

    /**
     * Sets the consent for this user ID for this API type in AppSearch. If we do not get
     * confirmation that the write was successful, then we throw an exception so that user does not
     * incorrectly think that the consent is updated.
     *
     * @throws IOException if the operation fails
     */
    @Override
    public void setConsent(AdServicesApiType apiType, boolean isGiven) throws IOException {
        mDatastore.put(apiType.toPpApiDatastoreKey(), isGiven);
    }

    /**
     * Sets consent for a given installed application, identified by package name.
     *
     * @throws IllegalArgumentException if the package name is invalid or not found as an installed
     *     application
     * @throws IOException if the operation fails
     */
    @Override
    public void setConsentForApp(String packageName, boolean isConsentRevoked) throws IOException {
        mAppConsentDao.setConsentForApp(packageName, isConsentRevoked);
    }

    /**
     * Tries to set consent for a given installed application, identified by package name, if it
     * does not already exist in the datastore, and returns the current consent setting after
     * checking.
     *
     * @return the current consent for the given {@code packageName} after trying to set the {@code
     *     value}
     * @throws IllegalArgumentException if the package name is invalid or not found as an installed
     *     application
     */
    @Override
    public boolean setConsentForAppIfNew(String packageName, boolean isConsentRevoked)
            throws IllegalArgumentException {
        // test
        try {
            return mAppConsentDao.setConsentForAppIfNew(packageName, isConsentRevoked);
        } catch (IOException exception) {
            LogUtil.e(exception, "FLEDGE consent check failed due to IOException");
            return true;
        }
    }

    /** Set the current privacy sandbox feature. */
    @Override
    public void setCurrentPrivacySandboxFeature(PrivacySandboxFeatureType featureType)
            throws IOException {
        for (PrivacySandboxFeatureType currentFeatureType : PrivacySandboxFeatureType.values()) {
            mDatastore.put(currentFeatureType.name(), currentFeatureType == featureType);
        }
    }

    /** Set the current enrollment channel to storage. */
    @Override
    public void setEnrollmentChannel(
            PrivacySandboxUxCollection ux, PrivacySandboxEnrollmentChannelCollection channel) {
        mUxStatesDao.setEnrollmentChannel(ux, channel);
    }

    /** Set the EntryPointEnabled bit to storage . */
    @Override
    public void setEntryPointEnabled(boolean isEntryPointEnabled) throws IOException {
        mDatastore.put(ConsentConstants.IS_ENTRY_POINT_ENABLED, isEntryPointEnabled);
    }

    /** Set the U18Account bit to storage. */
    @Override
    public void setU18Account(boolean isU18Account) throws IOException {
        mDatastore.put(ConsentConstants.IS_U18_ACCOUNT, isU18Account);
    }

    /** Set the U18NotificationDisplayed bit to storage. */
    @Override
    public void setU18NotificationDisplayed(boolean wasU18NotificationDisplayed)
            throws IOException {
        mDatastore.put(
                ConsentConstants.WAS_U18_NOTIFICATION_DISPLAYED, wasU18NotificationDisplayed);
    }

    /** Set the current UX to storage. */
    @Override
    public void setUx(PrivacySandboxUxCollection ux) {
        mUxStatesDao.setUx(ux);
    }

    /**
     * Retrieves if GA UX notification has been displayed.
     *
     * @return true if GA UX Consent Notification was displayed, otherwise false.
     */
    @Override
    public boolean wasGaUxNotificationDisplayed() {
        return mDatastore.get(ConsentConstants.GA_UX_NOTIFICATION_DISPLAYED_ONCE);
    }

    /**
     * Retrieves if notification has been displayed.
     *
     * @return true if Consent Notification was displayed, otherwise false.
     */
    @Override
    public boolean wasNotificationDisplayed() {
        return mDatastore.get(ConsentConstants.NOTIFICATION_DISPLAYED_ONCE);
    }

    /** Returns whether the wasU18NotificationDisplayed bit is true. */
    @Override
    public boolean wasU18NotificationDisplayed() {
        return mDatastore.get(ConsentConstants.WAS_U18_NOTIFICATION_DISPLAYED);
    }
}
