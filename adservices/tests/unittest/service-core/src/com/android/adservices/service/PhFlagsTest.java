/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.adservices.service;

import static com.android.adservices.common.DeviceConfigUtil.setAdservicesFlag;
import static com.android.adservices.mockito.ExtendedMockitoExpectations.mockGetAdServicesFlag;
import static com.android.adservices.service.Flags.ADID_KILL_SWITCH;
import static com.android.adservices.service.Flags.ADID_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.ADSERVICES_APK_SHA_CERTIFICATE;
import static com.android.adservices.service.Flags.ADSERVICES_ENABLED;
import static com.android.adservices.service.Flags.ADSERVICES_RELEASE_STAGE_FOR_COBALT;
import static com.android.adservices.service.Flags.AD_ID_API_APP_BLOCK_LIST;
import static com.android.adservices.service.Flags.AD_SERVICES_MODULE_JOB_POLICY;
import static com.android.adservices.service.Flags.APPSEARCH_WRITER_ALLOW_LIST_OVERRIDE;
import static com.android.adservices.service.Flags.APPSETID_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.APP_NAME_API_ERROR_COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.APP_NAME_API_ERROR_COBALT_LOGGING_SAMPLING_RATE;
import static com.android.adservices.service.Flags.ASYNC_REGISTRATION_JOB_QUEUE_INTERVAL_MS;
import static com.android.adservices.service.Flags.BACKGROUND_JOBS_LOGGING_KILL_SWITCH;
import static com.android.adservices.service.Flags.CLASSIFIER_DESCRIPTION_MAX_LENGTH;
import static com.android.adservices.service.Flags.CLASSIFIER_DESCRIPTION_MAX_WORDS;
import static com.android.adservices.service.Flags.CLASSIFIER_FORCE_USE_BUNDLED_FILES;
import static com.android.adservices.service.Flags.CLASSIFIER_NUMBER_OF_TOP_LABELS;
import static com.android.adservices.service.Flags.CLASSIFIER_THRESHOLD;
import static com.android.adservices.service.Flags.COBALT_ADSERVICES_API_KEY_HEX;
import static com.android.adservices.service.Flags.COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.COBALT_LOGGING_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.COBALT_UPLOAD_SERVICE_UNBIND_DELAY_MS;
import static com.android.adservices.service.Flags.COMPAT_LOGGING_KILL_SWITCH;
import static com.android.adservices.service.Flags.CONSENT_ALREADY_INTERACTED_FIX_ENABLE;
import static com.android.adservices.service.Flags.CONSENT_NOTIFICATION_RESET_TOKEN;
import static com.android.adservices.service.Flags.DEBUG_UX;
import static com.android.adservices.service.Flags.DEFAULT_ADEXT_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_ADEXT_WRITE_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_ADID_CACHE_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_ADSERVICES_CONSENT_MIGRATION_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_ADSERVICES_ENABLEMENT_CHECK_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_ADSERVICES_VERSION_MAPPINGS;
import static com.android.adservices.service.Flags.DEFAULT_AD_ID_FETCHER_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_AD_SERVICES_JS_SCRIPT_ENGINE_MAX_RETRY_ATTEMPTS;
import static com.android.adservices.service.Flags.DEFAULT_AD_SERVICES_RETRY_STRATEGY_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_APPSEARCH_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_APPSEARCH_WRITE_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_AUCTION_SERVER_AD_ID_FETCHER_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_BACKGROUND_JOB_SAMPLING_LOGGING_RATE;
import static com.android.adservices.service.Flags.DEFAULT_BLOCKED_TOPICS_SOURCE_OF_TRUTH;
import static com.android.adservices.service.Flags.DEFAULT_COMPUTE_VERSION_FROM_MAPPINGS_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_CONSENT_SOURCE_OF_TRUTH;
import static com.android.adservices.service.Flags.DEFAULT_CUSTOM_ERROR_CODE_SAMPLING_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_EEA_PAS_UX_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_ADEXT_DATA_SERVICE_APIS;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_ADEXT_SERVICE_DEBUG_PROXY;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_ADSERVICES_API_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_AD_SERVICES_SYSTEM_API;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_BACK_COMPAT_INIT;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_CONSENT_MANAGER_V2;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_TABLET_REGION_FIX;
import static com.android.adservices.service.Flags.DEFAULT_ENABLE_U18_APPSEARCH_MIGRATION;
import static com.android.adservices.service.Flags.DEFAULT_FLEDGE_AUCTION_SERVER_ENABLE_PAS_UNLIMITED_EGRESS;
import static com.android.adservices.service.Flags.DEFAULT_IS_GET_ADSERVICES_COMMON_STATES_API_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_JOB_SCHEDULING_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_JOB_SCHEDULING_LOGGING_SAMPLING_RATE;
import static com.android.adservices.service.Flags.DEFAULT_MAINLINE_TRAIN_VERSION;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MAX_DELAY_MS;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MIN_DELAY_MS;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_ATTRIBUTION_JOB_TRIGGERING_DELAY_MS;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_DEBUG_JOIN_KEY_ENROLLMENT_ALLOWLIST;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_DEBUG_JOIN_KEY_HASH_LIMIT;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_ENABLE_COARSE_EVENT_REPORT_DESTINATIONS;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_AGGREGATE_DEDUPLICATION_KEYS_PER_REGISTRATION;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_AGGREGATE_REPORT_UPLOAD_RETRY_WINDOW_MS;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_ATTRIBUTIONS_PER_INVOCATION;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_ATTRIBUTION_FILTERS;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_AGGREGATE_KEY_ID;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_FILTER_STRING;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_DELAYED_SOURCE_REGISTRATION_WINDOW;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_EVENT_REPORT_UPLOAD_RETRY_WINDOW_MS;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_FILTER_MAPS_PER_FILTER_SET;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_MAX_VALUES_PER_ATTRIBUTION_FILTER;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_PLATFORM_DEBUG_AD_ID_MATCHING_BLOCKLIST;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_PLATFORM_DEBUG_AD_ID_MATCHING_LIMIT;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_PRIVACY_EPSILON;
import static com.android.adservices.service.Flags.DEFAULT_MEASUREMENT_VTC_CONFIGURABLE_MAX_EVENT_REPORTS_COUNT;
import static com.android.adservices.service.Flags.DEFAULT_NOTIFICATION_DISMISSED_ON_CLICK;
import static com.android.adservices.service.Flags.DEFAULT_PAS_SCRIPT_DOWNLOAD_CONNECTION_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_PAS_SCRIPT_DOWNLOAD_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_PAS_SCRIPT_EXECUTION_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_PAS_SIGNALS_DOWNLOAD_CONNECTION_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_PAS_SIGNALS_DOWNLOAD_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DEFAULT_PAS_UX_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_RVC_POST_OTA_NOTIFICATION_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_RVC_POST_OTA_NOTIF_AGE_CHECK;
import static com.android.adservices.service.Flags.DEFAULT_RVC_UX_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_SPE_ON_ASYNC_REGISTRATION_FALLBACK_JOB_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_SPE_ON_BACKGROUND_FETCH_JOB_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_SPE_ON_EPOCH_JOB_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_SPE_ON_PILOT_JOBS_BATCH_2_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_SPE_ON_PILOT_JOBS_ENABLED;
import static com.android.adservices.service.Flags.DEFAULT_U18_UX_ENABLED;
import static com.android.adservices.service.Flags.DISABLE_FLEDGE_ENROLLMENT_CHECK;
import static com.android.adservices.service.Flags.DISABLE_MEASUREMENT_ENROLLMENT_CHECK;
import static com.android.adservices.service.Flags.DISABLE_TOPICS_ENROLLMENT_CHECK;
import static com.android.adservices.service.Flags.DOWNLOADER_CONNECTION_TIMEOUT_MS;
import static com.android.adservices.service.Flags.DOWNLOADER_MAX_DOWNLOAD_THREADS;
import static com.android.adservices.service.Flags.DOWNLOADER_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.ENABLE_ADEXT_SERVICE_CONSENT_DATA;
import static com.android.adservices.service.Flags.ENABLE_APPSEARCH_CONSENT_DATA;
import static com.android.adservices.service.Flags.ENABLE_DATABASE_SCHEMA_VERSION_8;
import static com.android.adservices.service.Flags.ENABLE_DATABASE_SCHEMA_VERSION_9;
import static com.android.adservices.service.Flags.ENABLE_ENROLLMENT_TEST_SEED;
import static com.android.adservices.service.Flags.ENABLE_LOGGED_TOPIC;
import static com.android.adservices.service.Flags.ENABLE_MDD_ENCRYPTION_KEYS;
import static com.android.adservices.service.Flags.ENABLE_MIGRATION_FROM_ADEXT_SERVICE;
import static com.android.adservices.service.Flags.ENCRYPTION_KEY_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.ENCRYPTION_KEY_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.ENCRYPTION_KEY_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.Flags.ENCRYPTION_KEY_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.ENFORCE_FOREGROUND_STATUS_FLEDGE_CUSTOM_AUDIENCE;
import static com.android.adservices.service.Flags.ENFORCE_FOREGROUND_STATUS_FLEDGE_OVERRIDES;
import static com.android.adservices.service.Flags.ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_IMPRESSION;
import static com.android.adservices.service.Flags.ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_INTERACTION;
import static com.android.adservices.service.Flags.ENFORCE_FOREGROUND_STATUS_FLEDGE_RUN_AD_SELECTION;
import static com.android.adservices.service.Flags.ENFORCE_FOREGROUND_STATUS_SIGNALS;
import static com.android.adservices.service.Flags.ENFORCE_FOREGROUND_STATUS_TOPICS;
import static com.android.adservices.service.Flags.ENFORCE_ISOLATE_MAX_HEAP_SIZE;
import static com.android.adservices.service.Flags.ENROLLMENT_API_BASED_SCHEMA_ENABLED;
import static com.android.adservices.service.Flags.ENROLLMENT_ENABLE_LIMITED_LOGGING;
import static com.android.adservices.service.Flags.ENROLLMENT_MDD_RECORD_DELETION_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_PER_BUYER_EVENT_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_TOTAL_EVENT_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_PER_BUYER_EVENT_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_TOTAL_EVENT_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_BIDDING_LOGIC_JS_VERSION;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_BUYER_MS;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_CA_MS;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_EXPIRATION_WINDOW_S;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_FROM_OUTCOMES_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_MAX_CONCURRENT_BIDDING_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_OFF_DEVICE_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_OFF_DEVICE_REQUEST_COMPRESSION_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_PREBUILT_URI_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_SCORING_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_AD_SELECTION_SELECTING_OUTCOME_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_APP_INSTALL_FILTERING_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_APP_INSTALL_FILTERING_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_APP_PACKAGE_NAME_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_AD_RENDER_ID_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_AD_RENDER_ID_MAX_LENGTH;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_API_USAGE_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_URI;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_AUCTION_KEY_SHARDING;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_AUCTION_KEY_FETCH_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_JOIN_KEY_FETCH_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_IN_ADVANCE_INTERVAL_MS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_FLEX_MS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RESPONSE_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RUNTIME_MS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_ON_EMPTY_DB_AND_IN_ADVANCE_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_COMPRESSION_ALGORITHM_VERSION;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_CONSENTED_DEBUGGING_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_COORDINATOR_URL_ALLOWLIST;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_EVENT;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_IMPRESSION;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENABLED_FOR_SELECT_ADS_MEDIATION;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENABLED_FOR_UPDATE_HISTOGRAM;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENABLE_AD_FILTER_IN_GET_AD_SELECTION_DATA;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENABLE_DEBUG_REPORTING;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_AEAD_ID;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KDF_ID;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KEM_ID;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_ENCRYPTION_KEY_MAX_AGE_SECONDS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_FORCE_SEARCH_WHEN_OWNER_IS_ABSENT_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_GET_AD_SELECTION_DATA_PAYLOAD_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_JOIN_KEY_FETCH_URI;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_KEY_FETCH_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_KILL_SWITCH;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_MEDIA_TYPE_CHANGE_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_MULTI_CLOUD_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_OMIT_ADS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_PAYLOAD_BUCKET_SIZES;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_PAYLOAD_FORMAT_VERSION;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_REFRESH_EXPIRED_KEYS_DURING_AUCTION;
import static com.android.adservices.service.Flags.FLEDGE_AUCTION_SERVER_REQUEST_FLAGS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_ELIGIBLE_UPDATE_BASE_INTERVAL_S;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_JOB_FLEX_MS;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_JOB_MAX_RUNTIME_MS;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_MAX_NUM_UPDATED;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_MAX_RESPONSE_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_BACKGROUND_FETCH_THREAD_POOL_SIZE;
import static com.android.adservices.service.Flags.FLEDGE_BEACON_REPORTING_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_CPC_BILLING_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_CPC_BILLING_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_DEFAULT_EXPIRE_IN_MS;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_ACTIVATION_DELAY_IN_MS;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_ADS_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_BIDDING_LOGIC_URI_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_DAILY_UPDATE_URI_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_EXPIRE_IN_MS;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_NAME_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_NUM_ADS;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_OWNER_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_TRUSTED_BIDDING_DATA_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_PER_APP_MAX_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_CUSTOM_AUDIENCE_SERVICE_KILL_SWITCH;
import static com.android.adservices.service.Flags.FLEDGE_DATA_VERSION_HEADER_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DATA_VERSION_HEADER_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEBUG_REPORT_SENDER_JOB_FLEX_MS;
import static com.android.adservices.service.Flags.FLEDGE_DEBUG_REPORT_SENDER_JOB_MAX_RUNTIME_MS;
import static com.android.adservices.service.Flags.FLEDGE_DEBUG_REPORT_SENDER_JOB_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_DEBUG_REPORT_SENDER_JOB_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_DEBUG_REPORT_SENDER_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_CONSENTED_DEBUGGING_CLI_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_CUSTOM_AUDIENCE_CLI_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_AUTHORIY_URL_JOIN;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_CONNECTION_TYPE;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_REQUIRES_BATTERY_NOT_LOW;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_REQUIRES_DEVICE_IDLE;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_TIME_PERIOD_MS;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_BACKGROUND_PROCESS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_FEATURE_AUCTION_SERVER_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_FEATURE_ON_DEVICE_AUCTION_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_FETCH_SERVER_PARAMS_URL;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_GET_TOKENS_URL;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_HTTP_CLIENT_TIMEOUT_IN_MS;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_JOIN_URL;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_KEY_ATTESTATION_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_MESSAGE_TTL_SECONDS;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_NUMBER_OF_MESSAGES_PER_BACKGROUND_PROCESS;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_PERCENTAGE_IMMEDIATE_SIGN_JOIN_CALLS;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_REGISTER_CLIENT_PARAMETERS_URL;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_SET_TYPE_TO_SIGN_JOIN;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_SIGN_BATCH_SIZE;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_SIGN_JOIN_FEATURE_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_DEFAULT_KANON_SIGN_JOIN_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_BATCH_DELAY_SECONDS;
import static com.android.adservices.service.Flags.FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_MAX_ITEMS_PER_BATCH;
import static com.android.adservices.service.Flags.FLEDGE_EVENT_LEVEL_DEBUG_REPORT_SEND_IMMEDIATELY;
import static com.android.adservices.service.Flags.FLEDGE_FETCH_CUSTOM_AUDIENCE_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_CUSTOM_AUDIENCE_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_REQUEST_CUSTOM_HEADER_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_RETRY_AFTER_VALUE_MS;
import static com.android.adservices.service.Flags.FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_FETCH_CUSTOM_AUDIENCE_MIN_RETRY_AFTER_VALUE_MS;
import static com.android.adservices.service.Flags.FLEDGE_FREQUENCY_CAP_FILTERING_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_FREQUENCY_CAP_FILTERING_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_HTTP_CACHE_DEFAULT_MAX_AGE_SECONDS;
import static com.android.adservices.service.Flags.FLEDGE_HTTP_CACHE_ENABLE;
import static com.android.adservices.service.Flags.FLEDGE_HTTP_CACHE_ENABLE_JS_CACHING;
import static com.android.adservices.service.Flags.FLEDGE_HTTP_CACHE_MAX_ENTRIES;
import static com.android.adservices.service.Flags.FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_FALLBACK_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_ON_DEVICE_AUCTION_KILL_SWITCH;
import static com.android.adservices.service.Flags.FLEDGE_ON_DEVICE_AUCTION_SHOULD_USE_UNIFIED_TABLES;
import static com.android.adservices.service.Flags.FLEDGE_REGISTER_AD_BEACON_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_REPORT_IMPRESSION_API_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_REPORT_IMPRESSION_MAX_INTERACTION_REPORTING_URI_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_PER_AD_TECH_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_TOTAL_COUNT;
import static com.android.adservices.service.Flags.FLEDGE_REPORT_IMPRESSION_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.Flags.FLEDGE_REPORT_IMPRESSION_REGISTERED_AD_BEACONS_MAX_INTERACTION_KEY_SIZE_B;
import static com.android.adservices.service.Flags.FLEDGE_REPORT_INTERACTION_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_FLEX_MS;
import static com.android.adservices.service.Flags.FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_MIN_DELAY_MINS_OVERRIDE;
import static com.android.adservices.service.Flags.FLEDGE_SELECT_ADS_FROM_OUTCOMES_API_METRICS_ENABLED;
import static com.android.adservices.service.Flags.FLEDGE_SELECT_ADS_KILL_SWITCH;
import static com.android.adservices.service.Flags.FOREGROUND_STATUS_LEVEL;
import static com.android.adservices.service.Flags.GA_UX_FEATURE_ENABLED;
import static com.android.adservices.service.Flags.GET_ADSERVICES_COMMON_STATES_ALLOW_LIST;
import static com.android.adservices.service.Flags.GLOBAL_KILL_SWITCH;
import static com.android.adservices.service.Flags.ISOLATE_MAX_HEAP_SIZE_BYTES;
import static com.android.adservices.service.Flags.IS_BACK_COMPACT_ACTIVITY_FEATURE_ENABLED;
import static com.android.adservices.service.Flags.IS_EEA_DEVICE;
import static com.android.adservices.service.Flags.IS_EEA_DEVICE_FEATURE_ENABLED;
import static com.android.adservices.service.Flags.IS_U18_SUPERVISED_ACCOUNT_ENABLED_DEFAULT;
import static com.android.adservices.service.Flags.IS_U18_UX_DETENTION_CHANNEL_ENABLED_DEFAULT;
import static com.android.adservices.service.Flags.MAX_ODP_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES;
import static com.android.adservices.service.Flags.MAX_RESPONSE_BASED_REGISTRATION_SIZE_BYTES;
import static com.android.adservices.service.Flags.MAX_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES;
import static com.android.adservices.service.Flags.MDD_ENCRYPTION_KEYS_MANIFEST_FILE_URL;
import static com.android.adservices.service.Flags.MDD_TOPICS_CLASSIFIER_MANIFEST_FILE_URL;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_MAIN_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATE_REPORT_DELAY_CONFIG;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_ENABLED;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_LIST;
import static com.android.adservices.service.Flags.MEASUREMENT_AGGREGATION_COORDINATOR_PATH;
import static com.android.adservices.service.Flags.MEASUREMENT_APP_PACKAGE_NAME_LOGGING_ALLOWLIST;
import static com.android.adservices.service.Flags.MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.Flags.MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_ATTRIBUTION_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_ATTRIBUTION_JOB_TRIGGERING_DELAY_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_DATA_EXPIRY_WINDOW_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_DB_SIZE_LIMIT;
import static com.android.adservices.service.Flags.MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_DEFAULT_AGGREGATION_COORDINATOR_ORIGIN;
import static com.android.adservices.service.Flags.MEASUREMENT_DELETE_EXPIRED_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_DELETE_EXPIRED_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_DELETE_EXPIRED_JOB_REQUIRES_DEVICE_IDLE;
import static com.android.adservices.service.Flags.MEASUREMENT_DELETE_UNINSTALLED_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_DELETE_UNINSTALLED_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_DESTINATION_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_AGGREGATABLE_REPORT_PAYLOAD_PADDING;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_API_STATUS_ALLOW_LIST_CHECK;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_APP_PACKAGE_NAME_LOGGING;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_ARA_DEDUPLICATION_ALIGNMENT_V1;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_ATTRIBUTION_SCOPE;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_CONFIGURABLE_AGGREGATE_REPORT_DELAY;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_DATASTORE_MANAGER_THROW_DATASTORE_EXCEPTION;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_DEBUG_REPORT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_DELETE_REPORTS_ON_UNRECOVERABLE_EXCEPTION;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_DESTINATION_PUBLISHER_ENROLLMENT_FIFO;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_DESTINATION_RATE_LIMIT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_FIFO_DESTINATIONS_DELETE_AGGREGATE_REPORTS;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_HEADER_ERROR_DEBUG_REPORT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_LOOKBACK_WINDOW_FILTER;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_MAX_AGGREGATE_REPORTS_PER_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_NAVIGATION_REPORTING_ORIGIN_CHECK;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_ODP_WEB_TRIGGER_REGISTRATION;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_PREINSTALL_CHECK;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_REDIRECT_TO_WELL_KNOWN_PATH;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_JSON_EXCEPTION;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_UNACCOUNTED_EXCEPTION;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_SCOPED_ATTRIBUTION_RATE_LIMIT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_SEPARATE_REPORT_TYPES_FOR_ATTRIBUTION_RATE_LIMIT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_SESSION_STABLE_KILL_SWITCHES;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_SHARED_FILTER_DATA_KEYS_XNA;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_SHARED_SOURCE_DEBUG_KEY;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_SOURCE_DEACTIVATION_AFTER_FILTERING;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_SOURCE_DEBUG_REPORT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_TRIGGER_CONTEXT_ID;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_TRIGGER_DATA_MATCHING;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_TRIGGER_DEBUG_REPORT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_UPDATE_TRIGGER_REGISTRATION_HEADER_LIMIT;
import static com.android.adservices.service.Flags.MEASUREMENT_ENABLE_XNA;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_ENROLLMENT_ORIGIN_MATCH;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_FOREGROUND_STATUS_DELETE_REGISTRATIONS;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_FOREGROUND_STATUS_GET_STATUS;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCES;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_TRIGGER;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_TRIGGER;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_MAIN_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_REPORTS_CTC_EARLY_REPORTING_WINDOWS;
import static com.android.adservices.service.Flags.MEASUREMENT_EVENT_REPORTS_VTC_EARLY_REPORTING_WINDOWS;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEXIBLE_EVENT_REPORTING_API_ENABLED;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_API_MAX_EVENT_REPORTS;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_API_MAX_EVENT_REPORT_WINDOWS;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_EVENT;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_NAVIGATION;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_EVENT;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_NAVIGATION;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_API_MAX_TRIGGER_DATA_CARDINALITY;
import static com.android.adservices.service.Flags.MEASUREMENT_FLEX_LITE_API_ENABLED;
import static com.android.adservices.service.Flags.MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.Flags.MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MEASUREMENT_IS_CLICK_DEDUPLICATION_ENABLED;
import static com.android.adservices.service.Flags.MEASUREMENT_IS_CLICK_DEDUPLICATION_ENFORCED;
import static com.android.adservices.service.Flags.MEASUREMENT_IS_CLICK_VERIFICATION_ENABLED;
import static com.android.adservices.service.Flags.MEASUREMENT_IS_CLICK_VERIFIED_BY_INPUT_EVENT;
import static com.android.adservices.service.Flags.MEASUREMENT_JOB_IMMEDIATE_AGGREGATE_REPORTING_KILL_SWITCH;
import static com.android.adservices.service.Flags.MEASUREMENT_KILL_SWITCH;
import static com.android.adservices.service.Flags.MEASUREMENT_MANIFEST_FILE_URL;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_AGGREGATE_ATTRIBUTION_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_AGGREGATE_KEYS_PER_SOURCE_REGISTRATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_AGGREGATE_KEYS_PER_TRIGGER_REGISTRATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_DESTINATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_ATTRIBUTION_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_ATTRIBUTION_SCOPES_PER_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_ATTRIBUTION_SCOPE_LENGTH;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_DESTINATIONS_PER_PUBLISHER_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_DEST_PER_PUBLISHER_X_ENROLLMENT_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_DISTINCT_DESTINATIONS_IN_ACTIVE_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_DISTINCT_REPORTING_ORIGINS_IN_ATTRIBUTION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_DISTINCT_REP_ORIG_PER_PUBLISHER_X_DEST_IN_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_DISTINCT_WEB_DESTINATIONS_IN_SOURCE_REGISTRATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_EVENT_ATTRIBUTION_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_EVENT_REPORTS_PER_DESTINATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_INSTALL_ATTRIBUTION_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_LENGTH_OF_TRIGGER_CONTEXT_ID;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_POST_INSTALL_EXCLUSIVITY_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_REGISTRATIONS_PER_JOB_INVOCATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_REGISTRATION_REDIRECTS;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_REPORTING_ORIGINS_PER_SOURCE_REPORTING_SITE_PER_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_REPORT_STATES_PER_SOURCE_REGISTRATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_RETRIES_PER_REGISTRATION_REQUEST;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_SOURCES_PER_CLICK;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_SOURCES_PER_PUBLISHER;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_SUM_OF_AGGREGATE_VALUES_PER_SOURCE;
import static com.android.adservices.service.Flags.MEASUREMENT_MAX_TRIGGERS_PER_DESTINATION;
import static com.android.adservices.service.Flags.MEASUREMENT_MINIMUM_AGGREGATABLE_REPORT_WINDOW_IN_SECONDS;
import static com.android.adservices.service.Flags.MEASUREMENT_MINIMUM_EVENT_REPORT_WINDOW_IN_SECONDS;
import static com.android.adservices.service.Flags.MEASUREMENT_MIN_INSTALL_ATTRIBUTION_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MIN_POST_INSTALL_EXCLUSIVITY_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MIN_REPORTING_ORIGIN_UPDATE_WINDOW;
import static com.android.adservices.service.Flags.MEASUREMENT_MIN_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS;
import static com.android.adservices.service.Flags.MEASUREMENT_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_NULL_AGGREGATE_REPORT_ENABLED;
import static com.android.adservices.service.Flags.MEASUREMENT_NULL_AGG_REPORT_RATE_EXCL_SOURCE_REGISTRATION_TIME;
import static com.android.adservices.service.Flags.MEASUREMENT_NULL_AGG_REPORT_RATE_INCL_SOURCE_REGISTRATION_TIME;
import static com.android.adservices.service.Flags.MEASUREMENT_RATE_LIMIT_WINDOW_MILLISECONDS;
import static com.android.adservices.service.Flags.MEASUREMENT_REGISTER_SOURCES_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.MEASUREMENT_REGISTER_SOURCE_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.MEASUREMENT_REGISTER_TRIGGER_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.MEASUREMENT_REGISTER_WEB_SOURCE_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.MEASUREMENT_REGISTER_WEB_TRIGGER_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.MEASUREMENT_REGISTRATION_INPUT_EVENT_VALID_WINDOW_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_SOURCE_REGISTRATION_TIME_OPTIONAL_FOR_AGG_REPORTS_ENABLED;
import static com.android.adservices.service.Flags.MEASUREMENT_THROW_UNKNOWN_EXCEPTION_SAMPLING_RATE;
import static com.android.adservices.service.Flags.MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.Flags.MEASUREMENT_VERBOSE_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.Flags.MSMT_API_APP_ALLOW_LIST;
import static com.android.adservices.service.Flags.MSMT_API_APP_BLOCK_LIST;
import static com.android.adservices.service.Flags.MSMT_REGISTRATION_COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.NUMBER_OF_EPOCHS_TO_KEEP_IN_HISTORY;
import static com.android.adservices.service.Flags.PAS_EXTENDED_METRICS_ENABLED;
import static com.android.adservices.service.Flags.PPAPI_APP_ALLOW_LIST;
import static com.android.adservices.service.Flags.PPAPI_APP_SIGNATURE_ALLOW_LIST;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_CLEANUP_ENABLED;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_ENABLED;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_ENCODED_PAYLOAD_MAX_SIZE_BYTES;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_ENCODER_REFRESH_WINDOW_SECONDS;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_FETCH_SIGNAL_UPDATES_MAX_SIZE_BYTES;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_PERIODIC_ENCODING_ENABLED;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_FLEX_MS;
import static com.android.adservices.service.Flags.PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.RECORD_MANUAL_INTERACTION_ENABLED;
import static com.android.adservices.service.Flags.SDK_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.SHARED_DATABASE_SCHEMA_VERSION_4_ENABLED;
import static com.android.adservices.service.Flags.TOGGLE_SPEED_BUMP_ENABLED;
import static com.android.adservices.service.Flags.TOPICS_API_APP_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.TOPICS_API_SDK_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.Flags.TOPICS_COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.TOPICS_DISABLE_DIRECT_APP_CALLS;
import static com.android.adservices.service.Flags.TOPICS_DISABLE_PLAINTEXT_RESPONSE;
import static com.android.adservices.service.Flags.TOPICS_ENCRYPTION_ENABLED;
import static com.android.adservices.service.Flags.TOPICS_ENCRYPTION_METRICS_ENABLED;
import static com.android.adservices.service.Flags.TOPICS_EPOCH_JOB_PERIOD_MS;
import static com.android.adservices.service.Flags.TOPICS_NUMBER_OF_LOOK_BACK_EPOCHS;
import static com.android.adservices.service.Flags.TOPICS_NUMBER_OF_RANDOM_TOPICS;
import static com.android.adservices.service.Flags.TOPICS_NUMBER_OF_TOP_TOPICS;
import static com.android.adservices.service.Flags.TOPICS_PRIVACY_BUDGET_FOR_TOPIC_ID_DISTRIBUTION;
import static com.android.adservices.service.Flags.TOPICS_TEST_ENCRYPTION_PUBLIC_KEY;
import static com.android.adservices.service.Flags.UI_DIALOG_FRAGMENT;
import static com.android.adservices.service.Flags.UI_EEA_COUNTRIES;
import static com.android.adservices.service.Flags.UI_FEATURE_TYPE_LOGGING_ENABLED;
import static com.android.adservices.service.Flags.UI_OTA_RESOURCES_MANIFEST_FILE_URL;
import static com.android.adservices.service.Flags.UI_OTA_STRINGS_MANIFEST_FILE_URL;
import static com.android.adservices.service.FlagsConstants.KEY_ADEXT_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_ADEXT_WRITE_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_ADID_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_ADSERVICES_APK_SHA_CERTS;
import static com.android.adservices.service.FlagsConstants.KEY_ADSERVICES_CONSENT_MIGRATION_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_ADSERVICES_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_ADSERVICES_ENABLEMENT_CHECK_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_ADSERVICES_RELEASE_STAGE_FOR_COBALT;
import static com.android.adservices.service.FlagsConstants.KEY_ADSERVICES_VERSION_MAPPINGS;
import static com.android.adservices.service.FlagsConstants.KEY_AD_ID_API_APP_BLOCK_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_AD_ID_CACHE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_AD_ID_FETCHER_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_AD_SERVICES_JS_SCRIPT_ENGINE_MAX_RETRY_ATTEMPTS;
import static com.android.adservices.service.FlagsConstants.KEY_AD_SERVICES_MODULE_JOB_POLICY;
import static com.android.adservices.service.FlagsConstants.KEY_AD_SERVICES_RETRY_STRATEGY_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_APPSEARCH_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_APPSEARCH_WRITER_ALLOW_LIST_OVERRIDE;
import static com.android.adservices.service.FlagsConstants.KEY_APPSEARCH_WRITE_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_APPSETID_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_APP_NAME_API_ERROR_COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_APP_NAME_API_ERROR_COBALT_LOGGING_SAMPLING_RATE;
import static com.android.adservices.service.FlagsConstants.KEY_ASYNC_REGISTRATION_JOB_QUEUE_INTERVAL_MS;
import static com.android.adservices.service.FlagsConstants.KEY_BACKGROUND_JOBS_LOGGING_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_BACKGROUND_JOB_SAMPLING_LOGGING_RATE;
import static com.android.adservices.service.FlagsConstants.KEY_BLOCKED_TOPICS_SOURCE_OF_TRUTH;
import static com.android.adservices.service.FlagsConstants.KEY_CLASSIFIER_DESCRIPTION_MAX_LENGTH;
import static com.android.adservices.service.FlagsConstants.KEY_CLASSIFIER_DESCRIPTION_MAX_WORDS;
import static com.android.adservices.service.FlagsConstants.KEY_CLASSIFIER_FORCE_USE_BUNDLED_FILES;
import static com.android.adservices.service.FlagsConstants.KEY_CLASSIFIER_NUMBER_OF_TOP_LABELS;
import static com.android.adservices.service.FlagsConstants.KEY_CLASSIFIER_THRESHOLD;
import static com.android.adservices.service.FlagsConstants.KEY_COBALT_ADSERVICES_API_KEY_HEX;
import static com.android.adservices.service.FlagsConstants.KEY_COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_COBALT_LOGGING_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_COBALT_UPLOAD_SERVICE_UNBIND_DELAY_MS;
import static com.android.adservices.service.FlagsConstants.KEY_COMPAT_LOGGING_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_CONSENT_ALREADY_INTERACTED_FIX_ENABLE;
import static com.android.adservices.service.FlagsConstants.KEY_CONSENT_NOTIFICATION_RESET_TOKEN;
import static com.android.adservices.service.FlagsConstants.KEY_CONSENT_SOURCE_OF_TRUTH;
import static com.android.adservices.service.FlagsConstants.KEY_CUSTOM_ERROR_CODE_SAMPLING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_DEBUG_UX;
import static com.android.adservices.service.FlagsConstants.KEY_DISABLE_FLEDGE_ENROLLMENT_CHECK;
import static com.android.adservices.service.FlagsConstants.KEY_DISABLE_MEASUREMENT_ENROLLMENT_CHECK;
import static com.android.adservices.service.FlagsConstants.KEY_DISABLE_TOPICS_ENROLLMENT_CHECK;
import static com.android.adservices.service.FlagsConstants.KEY_DOWNLOADER_CONNECTION_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_DOWNLOADER_MAX_DOWNLOAD_THREADS;
import static com.android.adservices.service.FlagsConstants.KEY_DOWNLOADER_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_EEA_PAS_UX_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_ADEXT_DATA_SERVICE_APIS;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_ADEXT_DATA_SERVICE_DEBUG_PROXY;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_ADEXT_SERVICE_CONSENT_DATA;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_ADSERVICES_API_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_AD_SERVICES_SYSTEM_API;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_APPSEARCH_CONSENT_DATA;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_BACK_COMPAT;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_BACK_COMPAT_INIT;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_COMPUTE_VERSION_FROM_MAPPINGS;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_CONSENT_MANAGER_V2;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_DATABASE_SCHEMA_VERSION_8;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_DATABASE_SCHEMA_VERSION_9;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_ENROLLMENT_TEST_SEED;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_LOGGED_TOPIC;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_MDD_ENCRYPTION_KEYS;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_MIGRATION_FROM_ADEXT_SERVICE;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_TABLET_REGION_FIX;
import static com.android.adservices.service.FlagsConstants.KEY_ENABLE_U18_APPSEARCH_MIGRATION;
import static com.android.adservices.service.FlagsConstants.KEY_ENCODED_ERROR_CODE_LIST_PER_SAMPLE_INTERVAL;
import static com.android.adservices.service.FlagsConstants.KEY_ENCRYPTION_KEY_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_ENCRYPTION_KEY_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_ENCRYPTION_KEY_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_ENCRYPTION_KEY_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_CUSTOM_AUDIENCE;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_OVERRIDE;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_IMPRESSION;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_INTERACTION;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_RUN_AD_SELECTION;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_FOREGROUND_STATUS_SIGNALS;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_FOREGROUND_STATUS_TOPICS;
import static com.android.adservices.service.FlagsConstants.KEY_ENFORCE_ISOLATE_MAX_HEAP_SIZE;
import static com.android.adservices.service.FlagsConstants.KEY_ENROLLMENT_API_BASED_SCHEMA_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_ENROLLMENT_BLOCKLIST_IDS;
import static com.android.adservices.service.FlagsConstants.KEY_ENROLLMENT_ENABLE_LIMITED_LOGGING;
import static com.android.adservices.service.FlagsConstants.KEY_ENROLLMENT_MDD_RECORD_DELETION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_ERROR_CODE_LOGGING_DENY_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_PER_BUYER_EVENT_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_TOTAL_EVENT_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_PER_BUYER_EVENT_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_TOTAL_EVENT_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_BIDDING_LOGIC_JS_VERSION;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_BUYER_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_CA_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_EXPIRATION_WINDOW_S;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_FROM_OUTCOMES_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_MAX_CONCURRENT_BIDDING_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_OFF_DEVICE_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_OFF_DEVICE_REQUEST_COMPRESSION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_PREBUILT_URI_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_SCORING_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AD_SELECTION_SELECTING_OUTCOME_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_APP_INSTALL_FILTERING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_APP_INSTALL_FILTERING_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_APP_PACKAGE_NAME_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_AD_ID_FETCHER_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_AD_RENDER_ID_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_AD_RENDER_ID_MAX_LENGTH;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_API_USAGE_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_URI;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_AUCTION_KEY_SHARDING;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_AUCTION_KEY_FETCH_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_JOIN_KEY_FETCH_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_IN_ADVANCE_INTERVAL_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_FLEX_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RESPONSE_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RUNTIME_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_ON_EMPTY_DB_AND_IN_ADVANCE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_COMPRESSION_ALGORITHM_VERSION;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_CONSENTED_DEBUGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_COORDINATOR_URL_ALLOWLIST;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_EVENT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_IMPRESSION;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_SELECT_ADS_MEDIATION;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_UPDATE_HISTOGRAM;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLE_AD_FILTER_IN_GET_AD_SELECTION_DATA;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLE_DEBUG_REPORTING;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENABLE_PAS_UNLIMITED_EGRESS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_AEAD_ID;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KDF_ID;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KEM_ID;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_KEY_MAX_AGE_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_FORCE_SEARCH_WHEN_OWNER_IS_ABSENT_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_GET_AD_SELECTION_DATA_PAYLOAD_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_JOIN_KEY_FETCH_URI;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_KEY_FETCH_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_MEDIA_TYPE_CHANGE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_MULTI_CLOUD_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_OMIT_ADS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_PAYLOAD_BUCKET_SIZES;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_PAYLOAD_FORMAT_VERSION;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_REFRESH_EXPIRED_KEYS_DURING_AUCTION;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_AUCTION_SERVER_REQUEST_FLAGS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_ELIGIBLE_UPDATE_BASE_INTERVAL_S;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_JOB_FLEX_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_JOB_MAX_RUNTIME_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_MAX_NUM_UPDATED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_MAX_RESPONSE_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BACKGROUND_FETCH_THREAD_POOL_SIZE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_BEACON_REPORTING_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CPC_BILLING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CPC_BILLING_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_DEFAULT_EXPIRE_IN_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_ACTIVATION_DELAY_IN_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_ADS_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_BIDDING_LOGIC_URI_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_DAILY_UPDATE_URI_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_EXPIRE_IN_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_NAME_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_NUM_ADS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_OWNER_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_TRUSTED_BIDDING_DATA_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_CUSTOM_AUDIENCE_PER_APP_MAX_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_DATA_VERSION_HEADER_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_DATA_VERSION_HEADER_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_DEBUG_REPORTI_SENDER_JOB_MAX_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_DEBUG_REPORTI_SENDER_JOB_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_DEBUG_REPORTI_SENDER_JOB_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_DEBUG_REPORT_SENDER_JOB_FLEX_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_DEBUG_REPORT_SENDER_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_ENABLE_KANON_AUCTION_SERVER_FEATURE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_ENABLE_KANON_ON_DEVICE_AUCTION_FEATURE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_ENABLE_KANON_SIGN_JOIN_FEATURE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_BATCH_DELAY_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_MAX_ITEMS_PER_BATCH;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORT_SEND_IMMEDIATELY;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_CUSTOM_AUDIENCE_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_REQUEST_CUSTOM_HEADER_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_RETRY_AFTER_VALUE_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MIN_RETRY_AFTER_VALUE_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FREQUENCY_CAP_FILTERING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_FREQUENCY_CAP_FILTERING_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_HTTP_CACHE_DEFAULT_MAX_AGE_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_HTTP_CACHE_ENABLE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_HTTP_CACHE_ENABLE_JS_CACHING;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_HTTP_CACHE_MAX_ENTRIES;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_IS_CONSENTED_DEBUGGING_CLI_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_IS_CUSTOM_AUDIENCE_CLI_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_BACKGROUND_JOB_REQUIRES_BATTERY_NOT_LOW;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_BACKGROUND_JOB_REQUIRES_DEVICE_IDLE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_BACKGROUND_JOB_TYPE_OF_CONNECTION;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_BACKGROUND_PROCESS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_BACKGROUND_TIME_PERIOD_IN_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_GET_TOKENS_URL;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_HTTP_CLIENT_TIMEOUT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_JOIN_URL;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_JOIN_URL_AUTHORIY;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_KEY_ATTESTATION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_MESSAGE_TTL_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_NUMBER_OF_MESSAGES_PER_BACKGROUND_PROCESS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_PERCENTAGE_IMMEDIATE_SIGN_JOIN_CALLS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_REGISTER_CLIENT_PARAMETERS_URL;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_SET_TYPE_TO_SIGN_JOIN;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_SIGN_BATCH_SIZE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_KANON_SIGN_JOIN_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_FALLBACK_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_ON_DEVICE_AUCTION_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_ON_DEVICE_AUCTION_SHOULD_USE_UNIFIED_TABLES;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REGISTER_AD_BEACON_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REPORT_IMPRESSION_API_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REPORT_IMPRESSION_MAX_INTERACTION_REPORTING_URI_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_PER_AD_TECH_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_TOTAL_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REPORT_IMPRESSION_OVERALL_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REPORT_IMPRESSION_REGISTERED_AD_BEACONS_MAX_INTERACTION_KEY_SIZE_B;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_REPORT_INTERACTION_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_FLEX_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_MIN_DELAY_MINS_OVERRIDE;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_SELECT_ADS_FROM_OUTCOMES_API_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_FLEDGE_SELECT_ADS_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_FOREGROUND_STATUS_LEVEL;
import static com.android.adservices.service.FlagsConstants.KEY_GA_UX_FEATURE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_GET_ADSERVICES_COMMON_STATES_ALLOW_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_GLOBAL_BLOCKED_TOPIC_IDS;
import static com.android.adservices.service.FlagsConstants.KEY_GLOBAL_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_ISOLATE_MAX_HEAP_SIZE_BYTES;
import static com.android.adservices.service.FlagsConstants.KEY_IS_BACK_COMPACT_ACTIVITY_FEATURE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_IS_EEA_DEVICE;
import static com.android.adservices.service.FlagsConstants.KEY_IS_EEA_DEVICE_FEATURE_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_IS_GET_ADSERVICES_COMMON_STATES_API_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_IS_U18_SUPERVISED_ACCOUNT_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_IS_U18_UX_DETENTION_CHANNEL_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_JOB_SCHEDULING_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_JOB_SCHEDULING_LOGGING_SAMPLING_RATE;
import static com.android.adservices.service.FlagsConstants.KEY_KANON_FETCH_PARAMETERS_URL;
import static com.android.adservices.service.FlagsConstants.KEY_MAINLINE_TRAIN_VERSION;
import static com.android.adservices.service.FlagsConstants.KEY_MAX_ODP_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES;
import static com.android.adservices.service.FlagsConstants.KEY_MAX_RESPONSE_BASED_REGISTRATION_SIZE_BYTES;
import static com.android.adservices.service.FlagsConstants.KEY_MAX_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES;
import static com.android.adservices.service.FlagsConstants.KEY_MDD_ENCRYPTION_KEYS_MANIFEST_FILE_URL;
import static com.android.adservices.service.FlagsConstants.KEY_MDD_TOPICS_CLASSIFIER_MANIFEST_FILE_URL;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_MAIN_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATE_REPORT_DELAY_CONFIG;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_AGGREGATION_COORDINATOR_PATH;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_APP_PACKAGE_NAME_LOGGING_ALLOWLIST;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MAX_DELAY_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MIN_DELAY_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ATTRIBUTION_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ATTRIBUTION_JOB_TRIGGERING_DELAY_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DATA_EXPIRY_WINDOW_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DB_SIZE_LIMIT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_JOIN_KEY_ENROLLMENT_ALLOWLIST;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_JOIN_KEY_HASH_LIMIT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_KEY_AD_ID_MATCHING_ENROLLMENT_BLOCKLIST;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_KEY_AD_ID_MATCHING_LIMIT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DEFAULT_AGGREGATION_COORDINATOR_ORIGIN;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DELETE_EXPIRED_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DELETE_EXPIRED_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DELETE_EXPIRED_JOB_REQUIRES_DEVICE_IDLE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DELETE_UNINSTALLED_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DELETE_UNINSTALLED_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_DESTINATION_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_AGGREGATABLE_REPORT_PAYLOAD_PADDING;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_API_STATUS_ALLOW_LIST_CHECK;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_APP_PACKAGE_NAME_LOGGING;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_ARA_DEDUPLICATION_ALIGNMENT_V1;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_ATTRIBUTION_SCOPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_COARSE_EVENT_REPORT_DESTINATIONS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_CONFIGURABLE_AGGREGATE_REPORT_DELAY;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_DATASTORE_MANAGER_THROW_DATASTORE_EXCEPTION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_DEBUG_REPORT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_DELETE_REPORTS_ON_UNRECOVERABLE_EXCEPTION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_DESTINATION_PUBLISHER_ENROLLMENT_FIFO;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_DESTINATION_RATE_LIMIT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_FIFO_DESTINATIONS_DELETE_AGGREGATE_REPORTS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_HEADER_ERROR_DEBUG_REPORT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_LOOKBACK_WINDOW_FILTER;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_MAX_AGGREGATE_REPORTS_PER_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_NAVIGATION_REPORTING_ORIGIN_CHECK;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_ODP_WEB_TRIGGER_REGISTRATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_PREINSTALL_CHECK;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_REDIRECT_TO_WELL_KNOWN_PATH;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_CRYPTO_EXCEPTION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_JSON_EXCEPTION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_UNACCOUNTED_EXCEPTION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_SCOPED_ATTRIBUTION_RATE_LIMIT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_SEPARATE_REPORT_TYPES_FOR_ATTRIBUTION_RATE_LIMIT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_SESSION_STABLE_KILL_SWITCHES;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_SHARED_FILTER_DATA_KEYS_XNA;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_SHARED_SOURCE_DEBUG_KEY;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_SOURCE_DEACTIVATION_AFTER_FILTERING;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_SOURCE_DEBUG_REPORT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_TRIGGER_CONTEXT_ID;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_TRIGGER_DATA_MATCHING;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_TRIGGER_DEBUG_REPORT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_UPDATE_TRIGGER_REGISTRATION_HEADER_LIMIT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENABLE_XNA;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_ENROLLMENT_ORIGIN_MATCH;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_DELETE_REGISTRATIONS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_GET_STATUS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCES;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_TRIGGER;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_TRIGGER;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_API_DEFAULT_EPSILON;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_MAIN_REPORTING_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_REPORTS_CTC_EARLY_REPORTING_WINDOWS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_EVENT_REPORTS_VTC_EARLY_REPORTING_WINDOWS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEXIBLE_EVENT_REPORTING_API_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_API_MAX_EVENT_REPORTS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_API_MAX_EVENT_REPORT_WINDOWS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_EVENT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_NAVIGATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_EVENT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_NAVIGATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_API_MAX_TRIGGER_DATA_CARDINALITY;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_FLEX_LITE_API_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_IS_CLICK_DEDUPLICATION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_IS_CLICK_DEDUPLICATION_ENFORCED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_IS_CLICK_VERIFICATION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_IS_CLICK_VERIFIED_BY_INPUT_EVENT;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_JOB_IMMEDIATE_AGGREGATE_REPORTING_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_KILL_SWITCH;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MANIFEST_FILE_URL;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_AGGREGATE_ATTRIBUTION_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_AGGREGATE_DEDUPLICATION_KEYS_PER_REGISTRATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_AGGREGATE_KEYS_PER_SOURCE_REGISTRATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_AGGREGATE_KEYS_PER_TRIGGER_REGISTRATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_DESTINATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_AGGREGATE_REPORT_UPLOAD_RETRY_WINDOW_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_ATTRIBUTIONS_PER_INVOCATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_ATTRIBUTION_FILTERS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_ATTRIBUTION_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_ATTRIBUTION_SCOPES_PER_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_ATTRIBUTION_SCOPE_LENGTH;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_AGGREGATE_KEY_ID;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_FILTER_STRING;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_DELAYED_SOURCE_REGISTRATION_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_DESTINATIONS_PER_PUBLISHER_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_DEST_PER_PUBLISHER_X_ENROLLMENT_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_DISTINCT_DESTINATIONS_IN_ACTIVE_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_DISTINCT_REPORTING_ORIGINS_IN_ATTRIBUTION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_DISTINCT_REPORTING_ORIGINS_IN_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_DISTINCT_WEB_DESTINATIONS_IN_SOURCE_REGISTRATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_EVENT_ATTRIBUTION_PER_RATE_LIMIT_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_EVENT_REPORTS_PER_DESTINATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_EVENT_REPORT_UPLOAD_RETRY_WINDOW_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_FILTER_MAPS_PER_FILTER_SET;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_INSTALL_ATTRIBUTION_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_LENGTH_OF_TRIGGER_CONTEXT_ID;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_POST_INSTALL_EXCLUSIVITY_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_REGISTRATIONS_PER_JOB_INVOCATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_REGISTRATION_REDIRECTS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_REPORTING_ORIGINS_PER_SOURCE_REPORTING_SITE_PER_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_REPORT_STATES_PER_SOURCE_REGISTRATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_RETRIES_PER_REGISTRATION_REQUEST;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_SOURCES_PER_CLICK;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_SOURCES_PER_PUBLISHER;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_SUM_OF_AGGREGATE_VALUES_PER_SOURCE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_TRIGGERS_PER_DESTINATION;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MAX_VALUES_PER_ATTRIBUTION_FILTER;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MINIMUM_AGGREGATABLE_REPORT_WINDOW_IN_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MINIMUM_EVENT_REPORT_WINDOW_IN_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MIN_INSTALL_ATTRIBUTION_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MIN_POST_INSTALL_EXCLUSIVITY_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MIN_REPORTING_ORIGIN_UPDATE_WINDOW;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_MIN_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_NETWORK_CONNECT_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_NETWORK_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_NULL_AGGREGATE_REPORT_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_NULL_AGG_REPORT_RATE_EXCL_SOURCE_REGISTRATION_TIME;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_NULL_AGG_REPORT_RATE_INCL_SOURCE_REGISTRATION_TIME;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_RATE_LIMIT_WINDOW_MILLISECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_REGISTER_SOURCES_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_REGISTER_SOURCE_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_REGISTER_TRIGGER_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_REGISTER_WEB_SOURCE_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_REGISTER_WEB_TRIGGER_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_REGISTRATION_INPUT_EVENT_VALID_WINDOW_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_SOURCE_REGISTRATION_TIME_OPTIONAL_FOR_AGG_REPORTS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_THROW_UNKNOWN_EXCEPTION_SAMPLING_RATE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_VERBOSE_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE;
import static com.android.adservices.service.FlagsConstants.KEY_MEASUREMENT_VTC_CONFIGURABLE_MAX_EVENT_REPORTS_COUNT;
import static com.android.adservices.service.FlagsConstants.KEY_MSMT_API_APP_ALLOW_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_MSMT_API_APP_BLOCK_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_MSMT_REGISTRATION_COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_NOTIFICATION_DISMISSED_ON_CLICK;
import static com.android.adservices.service.FlagsConstants.KEY_NUMBER_OF_EPOCHS_TO_KEEP_IN_HISTORY;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_APP_ALLOW_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_EXTENDED_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_SCRIPT_DOWNLOAD_CONNECTION_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_SCRIPT_DOWNLOAD_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_SCRIPT_EXECUTION_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_SIGNALS_DOWNLOAD_CONNECTION_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_SIGNALS_DOWNLOAD_READ_TIMEOUT_MS;
import static com.android.adservices.service.FlagsConstants.KEY_PAS_UX_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_PPAPI_APP_ALLOW_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_PPAPI_APP_SIGNATURE_ALLOW_LIST;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_CLEANUP_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_ENCODED_PAYLOAD_MAX_SIZE_BYTES;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_ENCODER_REFRESH_WINDOW_SECONDS;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_FETCH_SIGNAL_UPDATES_MAX_SIZE_BYTES;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_PERIODIC_ENCODING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_FLEX_MS;
import static com.android.adservices.service.FlagsConstants.KEY_PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_RECORD_MANUAL_INTERACTION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_RVC_POST_OTA_NOTIFICATION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_RVC_POST_OTA_NOTIF_AGE_CHECK;
import static com.android.adservices.service.FlagsConstants.KEY_RVC_UX_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_SDK_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_SHARED_DATABASE_SCHEMA_VERSION_4_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_SPE_ON_ASYNC_REGISTRATION_FALLBACK_JOB_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_SPE_ON_BACKGROUND_FETCH_JOB_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_SPE_ON_EPOCH_JOB_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_SPE_ON_PILOT_JOBS_BATCH_2_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_SPE_ON_PILOT_JOBS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_API_APP_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_API_SDK_REQUEST_PERMITS_PER_SECOND;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_COBALT_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_DISABLE_DIRECT_APP_CALLS;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_DISABLE_PLAINTEXT_RESPONSE;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_ENCRYPTION_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_ENCRYPTION_METRICS_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_EPOCH_JOB_PERIOD_MS;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_NUMBER_OF_LOOK_BACK_EPOCHS;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_NUMBER_OF_RANDOM_TOPICS;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_NUMBER_OF_TOP_TOPICS;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_PRIVACY_BUDGET_FOR_TOPIC_ID_DISTRIBUTION;
import static com.android.adservices.service.FlagsConstants.KEY_TOPICS_TEST_ENCRYPTION_PUBLIC_KEY;
import static com.android.adservices.service.FlagsConstants.KEY_U18_UX_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_UI_DIALOG_FRAGMENT_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_UI_EEA_COUNTRIES;
import static com.android.adservices.service.FlagsConstants.KEY_UI_FEATURE_TYPE_LOGGING_ENABLED;
import static com.android.adservices.service.FlagsConstants.KEY_UI_OTA_RESOURCES_MANIFEST_FILE_URL;
import static com.android.adservices.service.FlagsConstants.KEY_UI_OTA_STRINGS_MANIFEST_FILE_URL;
import static com.android.adservices.service.FlagsConstants.KEY_UI_TOGGLE_SPEED_BUMP_ENABLED;
import static com.android.adservices.shared.common.flags.ModuleSharedFlags.ENCODED_ERROR_CODE_LIST_PER_SAMPLE_INTERVAL;

import static com.google.common.truth.Truth.assertThat;

import static org.junit.Assert.assertThrows;

import android.provider.DeviceConfig;
import android.util.Log;

import com.android.adservices.common.AdServicesExtendedMockitoTestCase;
import com.android.adservices.mockito.AdServicesExtendedMockitoRule;
import com.android.adservices.mockito.ExtendedMockitoExpectations;
import com.android.adservices.service.fixture.TestableSystemProperties;
import com.android.modules.utils.build.SdkLevel;
import com.android.modules.utils.testing.ExtendedMockitoRule.SpyStatic;
import com.android.modules.utils.testing.TestableDeviceConfig;

import com.google.common.collect.ImmutableList;

import org.junit.Test;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.stream.Collectors;

/** Unit tests for {@link com.android.adservices.service.PhFlags} */
@SpyStatic(SdkLevel.class)
public final class PhFlagsTest extends AdServicesExtendedMockitoTestCase {

    private final Flags mPhFlags = PhFlags.getInstance();
    private final Flags mTestFlags = FakeFlagsFactory.getFlagsForTest();

    private final PhFlagsTestHelper mFlagsTestHelper = new PhFlagsTestHelper(mPhFlags, expect);

    private final FlagGuard mMsmtKillSwitchGuard =
            value -> mFlagsTestHelper.setMsmmtKillSwitch(!value);

    @Override
    protected AdServicesExtendedMockitoRule getAdServicesExtendedMockitoRule() {
        return newDefaultAdServicesExtendedMockitoRuleBuilder()
                .addStaticMockFixtures(TestableDeviceConfig::new, TestableSystemProperties::new)
                .build();
    }

    @Test
    public void testGetTopicsNumberOfRandomTopics() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_TOPICS_NUMBER_OF_RANDOM_TOPICS,
                TOPICS_NUMBER_OF_RANDOM_TOPICS,
                Flags::getTopicsNumberOfRandomTopics);
    }

    @Test
    public void testGetTopicsNumberOfTopTopics() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_TOPICS_NUMBER_OF_TOP_TOPICS,
                TOPICS_NUMBER_OF_TOP_TOPICS,
                Flags::getTopicsNumberOfTopTopics);
    }

    @Test
    public void testGetTopicsNumberOfLookBackEpochs() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_TOPICS_NUMBER_OF_LOOK_BACK_EPOCHS,
                TOPICS_NUMBER_OF_LOOK_BACK_EPOCHS,
                Flags::getTopicsNumberOfLookBackEpochs);
    }

    @Test
    public void testGetTopicsPrivacyBudgetForTopicIdDistribution() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_TOPICS_PRIVACY_BUDGET_FOR_TOPIC_ID_DISTRIBUTION,
                TOPICS_PRIVACY_BUDGET_FOR_TOPIC_ID_DISTRIBUTION,
                Flags::getTopicsPrivacyBudgetForTopicIdDistribution);
    }

    @Test
    public void testGetTopicsDisableDirectAppCalls() {
        mFlagsTestHelper.testConfigFlag(
                KEY_TOPICS_DISABLE_DIRECT_APP_CALLS,
                TOPICS_DISABLE_DIRECT_APP_CALLS,
                Flags::getTopicsDisableDirectAppCalls);
    }

    @Test
    public void testGetTopicsEncryptionEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_TOPICS_ENCRYPTION_ENABLED,
                TOPICS_ENCRYPTION_ENABLED,
                Flags::getTopicsEncryptionEnabled);
    }

    @Test
    public void testGetTopicsEncryptionMetricsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_TOPICS_ENCRYPTION_METRICS_ENABLED,
                TOPICS_ENCRYPTION_METRICS_ENABLED,
                Flags::getTopicsEncryptionMetricsEnabled);
    }

    @Test
    public void testGetTopicsDisablePlaintextResponse() {
        mFlagsTestHelper.testConfigFlag(
                KEY_TOPICS_DISABLE_PLAINTEXT_RESPONSE,
                TOPICS_DISABLE_PLAINTEXT_RESPONSE,
                Flags::getTopicsDisablePlaintextResponse);
    }

    @Test
    public void testGetTopicsTestEncryptionPublicKey() {
        mFlagsTestHelper.testConfigFlag(
                KEY_TOPICS_TEST_ENCRYPTION_PUBLIC_KEY,
                TOPICS_TEST_ENCRYPTION_PUBLIC_KEY,
                Flags::getTopicsTestEncryptionPublicKey);
    }

    @Test
    public void testGetClassifierNumberOfTopLabels() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CLASSIFIER_NUMBER_OF_TOP_LABELS,
                CLASSIFIER_NUMBER_OF_TOP_LABELS,
                Flags::getClassifierNumberOfTopLabels);
    }

    @Test
    public void testGetClassifierThreshold() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CLASSIFIER_THRESHOLD, CLASSIFIER_THRESHOLD, Flags::getClassifierThreshold);
    }

    @Test
    public void testGetClassifierDescriptionMaxWords() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CLASSIFIER_DESCRIPTION_MAX_WORDS,
                CLASSIFIER_DESCRIPTION_MAX_WORDS,
                Flags::getClassifierDescriptionMaxWords);
    }

    @Test
    public void testGetClassifierDescriptionMaxLength() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CLASSIFIER_DESCRIPTION_MAX_LENGTH,
                CLASSIFIER_DESCRIPTION_MAX_LENGTH,
                Flags::getClassifierDescriptionMaxLength);
    }

    @Test
    public void testGetClassifierForceUseBundledFiles() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CLASSIFIER_FORCE_USE_BUNDLED_FILES,
                CLASSIFIER_FORCE_USE_BUNDLED_FILES,
                Flags::getClassifierForceUseBundledFiles);
    }

    @Test
    public void testTopicsCobaltLoggingEnabled() {
        disableGlobalKillSwitch();
        setCobaltLoggingEnabled(true);

        mFlagsTestHelper.testConfigFlag(
                KEY_TOPICS_COBALT_LOGGING_ENABLED,
                TOPICS_COBALT_LOGGING_ENABLED,
                Flags::getTopicsCobaltLoggingEnabled);
    }

    @Test
    public void testMeasurementRegistrationCobaltLoggingEnabled() {
        disableGlobalKillSwitch();
        setCobaltLoggingEnabled(true);

        mFlagsTestHelper.testConfigFlag(
                KEY_MSMT_REGISTRATION_COBALT_LOGGING_ENABLED,
                MSMT_REGISTRATION_COBALT_LOGGING_ENABLED,
                Flags::getMsmtRegistrationCobaltLoggingEnabled);
    }

    @Test
    public void testCobaltAdservicesApiKeyHex() {
        mFlagsTestHelper.testConfigFlag(
                KEY_COBALT_ADSERVICES_API_KEY_HEX,
                COBALT_ADSERVICES_API_KEY_HEX,
                Flags::getCobaltAdservicesApiKeyHex);
    }

    @Test
    public void testAdservicesReleaseStageForCobalt() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ADSERVICES_RELEASE_STAGE_FOR_COBALT,
                ADSERVICES_RELEASE_STAGE_FOR_COBALT,
                Flags::getAdservicesReleaseStageForCobalt);
    }

    @Test
    public void testGetCobaltLoggingJobPeriodMs() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_COBALT_LOGGING_JOB_PERIOD_MS,
                COBALT_LOGGING_JOB_PERIOD_MS,
                Flags::getCobaltLoggingJobPeriodMs);
    }

    @Test
    public void testGetCobaltUploadServiceUnbindDelayMs() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_COBALT_UPLOAD_SERVICE_UNBIND_DELAY_MS,
                COBALT_UPLOAD_SERVICE_UNBIND_DELAY_MS,
                Flags::getCobaltUploadServiceUnbindDelayMs);
    }

    @Test
    public void testGetCobaltLoggingEnabled() {
        // Disable global_kill_switch so that this flag can be tested.
        disableGlobalKillSwitch();

        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getCobaltLoggingEnabled()).isEqualTo(COBALT_LOGGING_ENABLED);

        // Now overriding with the value from PH.
        boolean phOverridingValue = !COBALT_LOGGING_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_COBALT_LOGGING_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getCobaltLoggingEnabled()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetCobaltLoggingEnabled_cobaltLoggingDisabled() {
        // Disable global_kill_switch so that this flag can be tested.
        disableGlobalKillSwitch();
        setCobaltLoggingEnabled(false);

        assertThat(mPhFlags.getCobaltLoggingEnabled()).isFalse();

        verifyGetBooleanNotCalled(FlagsConstants.KEY_TOPICS_COBALT_LOGGING_ENABLED);
    }

    @Test
    public void testGetAppNameApiErrorCobaltLoggingEnabled() {
        // Disable global_kill_switch so that this flag can be tested.
        disableGlobalKillSwitch();
        setCobaltLoggingEnabled(true);

        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getAppNameApiErrorCobaltLoggingEnabled())
                .isEqualTo(APP_NAME_API_ERROR_COBALT_LOGGING_ENABLED);

        // Now overriding with the value from PH.
        boolean phOverridingValue = !APP_NAME_API_ERROR_COBALT_LOGGING_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_APP_NAME_API_ERROR_COBALT_LOGGING_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getAppNameApiErrorCobaltLoggingEnabled()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetAppNameApiErrorCobaltLoggingEnabled_cobaltLoggingDisabled() {
        // Disable global_kill_switch so that this flag can be tested.
        disableGlobalKillSwitch();
        setCobaltLoggingEnabled(false);

        // APP_NAME_API_ERROR_COBALT_LOGGING_ENABLED is guarded by COBALT_LOGGING_ENABLED.
        assertThat(mPhFlags.getAppNameApiErrorCobaltLoggingEnabled()).isFalse();

        verifyGetBooleanNotCalled(FlagsConstants.KEY_APP_NAME_API_ERROR_COBALT_LOGGING_ENABLED);
    }

    @Test
    public void testGetAppNameApiErrorCobaltLoggingSamplingRate() {
        mFlagsTestHelper.testConfigFlag(
                KEY_APP_NAME_API_ERROR_COBALT_LOGGING_SAMPLING_RATE,
                APP_NAME_API_ERROR_COBALT_LOGGING_SAMPLING_RATE,
                Flags::getAppNameApiErrorCobaltLoggingSamplingRate);
    }

    @Test
    public void testGetEncryptionKeyNetworkConnectTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENCRYPTION_KEY_NETWORK_CONNECT_TIMEOUT_MS,
                ENCRYPTION_KEY_NETWORK_CONNECT_TIMEOUT_MS,
                Flags::getEncryptionKeyNetworkConnectTimeoutMs);
    }

    @Test
    public void testGetEncryptionKeyNetworkReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENCRYPTION_KEY_NETWORK_READ_TIMEOUT_MS,
                ENCRYPTION_KEY_NETWORK_READ_TIMEOUT_MS,
                Flags::getEncryptionKeyNetworkReadTimeoutMs);
    }

    @Test
    public void testGetMddTopicsClassifierManifestFileUrl() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MDD_TOPICS_CLASSIFIER_MANIFEST_FILE_URL,
                MDD_TOPICS_CLASSIFIER_MANIFEST_FILE_URL,
                Flags::getMddTopicsClassifierManifestFileUrl);
    }

    @Test
    public void testGetAdSelectionMaxConcurrentBiddingCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_MAX_CONCURRENT_BIDDING_COUNT,
                FLEDGE_AD_SELECTION_MAX_CONCURRENT_BIDDING_COUNT,
                Flags::getAdSelectionMaxConcurrentBiddingCount);
    }

    @Test
    public void testGetAdSelectionBiddingTimeoutPerCaMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_CA_MS,
                FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_CA_MS,
                Flags::getAdSelectionBiddingTimeoutPerCaMs);
    }

    @Test
    public void testGetAdSelectionBiddingTimeoutPerBuyerMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_BUYER_MS,
                FLEDGE_AD_SELECTION_BIDDING_TIMEOUT_PER_BUYER_MS,
                Flags::getAdSelectionBiddingTimeoutPerBuyerMs);
    }

    @Test
    public void testGetAdSelectionScoringTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_SCORING_TIMEOUT_MS,
                FLEDGE_AD_SELECTION_SCORING_TIMEOUT_MS,
                Flags::getAdSelectionScoringTimeoutMs);
    }

    @Test
    public void testGetAdSelectionSelectingOutcomeTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_SELECTING_OUTCOME_TIMEOUT_MS,
                FLEDGE_AD_SELECTION_SELECTING_OUTCOME_TIMEOUT_MS,
                Flags::getAdSelectionSelectingOutcomeTimeoutMs);
    }

    @Test
    public void testGetAdSelectionOverallTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_OVERALL_TIMEOUT_MS,
                FLEDGE_AD_SELECTION_OVERALL_TIMEOUT_MS,
                Flags::getAdSelectionOverallTimeoutMs);
    }

    @Test
    public void testGetAdSelectionFromOutcomesOverallTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_FROM_OUTCOMES_OVERALL_TIMEOUT_MS,
                FLEDGE_AD_SELECTION_FROM_OUTCOMES_OVERALL_TIMEOUT_MS,
                Flags::getAdSelectionFromOutcomesOverallTimeoutMs);
    }

    @Test
    public void testGetOffDeviceAdSelectionOverallTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_OFF_DEVICE_OVERALL_TIMEOUT_MS,
                FLEDGE_AD_SELECTION_OFF_DEVICE_OVERALL_TIMEOUT_MS,
                Flags::getAdSelectionOffDeviceOverallTimeoutMs);
    }

    @Test
    public void testGetFledgeAdSelectionContextualAdsMetricsEnabled() {
        assertThat(mPhFlags.getFledgeAdSelectionContextualAdsMetricsEnabled())
                .isEqualTo(FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_METRICS_ENABLED);

        boolean phOverridingValue = !FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_METRICS_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_METRICS_ENABLED,
                Boolean.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getFledgeAdSelectionContextualAdsMetricsEnabled())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeAppInstallFilteringEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_APP_INSTALL_FILTERING_ENABLED,
                FLEDGE_APP_INSTALL_FILTERING_ENABLED,
                Flags::getFledgeAppInstallFilteringEnabled);
    }

    @Test
    public void testGetFledgFrequencyCapFilteringEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_FREQUENCY_CAP_FILTERING_ENABLED,
                FLEDGE_FREQUENCY_CAP_FILTERING_ENABLED,
                Flags::getFledgeFrequencyCapFilteringEnabled);
    }

    @Test
    public void testGetFledgeAdSelectionContextualAdsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_ENABLED,
                FLEDGE_AD_SELECTION_CONTEXTUAL_ADS_ENABLED,
                Flags::getFledgeAdSelectionContextualAdsEnabled);
    }

    @Test
    public void testGetFledgeAdFilteringMetricsEnabled() {
        assertThat(mPhFlags.getFledgeAppInstallFilteringMetricsEnabled())
                .isEqualTo(FLEDGE_APP_INSTALL_FILTERING_METRICS_ENABLED);

        boolean phOverridingValue = !FLEDGE_APP_INSTALL_FILTERING_METRICS_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_APP_INSTALL_FILTERING_METRICS_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getFledgeAppInstallFilteringMetricsEnabled())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeFrequencyCapFilteringMetricsEnabled() {
        assertThat(mPhFlags.getFledgeFrequencyCapFilteringMetricsEnabled())
                .isEqualTo(FLEDGE_FREQUENCY_CAP_FILTERING_METRICS_ENABLED);

        boolean phOverridingValue = !FLEDGE_FREQUENCY_CAP_FILTERING_METRICS_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_FREQUENCY_CAP_FILTERING_METRICS_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getFledgeFrequencyCapFilteringMetricsEnabled())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeFetchCustomAudienceEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_ENABLED,
                FLEDGE_FETCH_CUSTOM_AUDIENCE_ENABLED,
                Flags::getFledgeFetchCustomAudienceEnabled);
    }

    @Test
    public void testGetFledgeAdSelectionBiddingLogicJsVersion() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_BIDDING_LOGIC_JS_VERSION,
                FLEDGE_AD_SELECTION_BIDDING_LOGIC_JS_VERSION,
                Flags::getFledgeAdSelectionBiddingLogicJsVersion);
    }

    @Test
    public void testGetFledgeAuctionServerAdRenderIdEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_AD_RENDER_ID_ENABLED,
                FLEDGE_AUCTION_SERVER_AD_RENDER_ID_ENABLED,
                Flags::getFledgeAuctionServerAdRenderIdEnabled);
    }

    @Test
    public void testGetFledgeAuctionServerAdIdFetchTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_AD_ID_FETCHER_TIMEOUT_MS,
                DEFAULT_AUCTION_SERVER_AD_ID_FETCHER_TIMEOUT_MS,
                Flags::getFledgeAuctionServerAdIdFetcherTimeoutMs);
    }

    @Test
    public void testGetFledgAuctionServerAdRenderIdMaxLength() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_AD_RENDER_ID_MAX_LENGTH,
                FLEDGE_AUCTION_SERVER_AD_RENDER_ID_MAX_LENGTH,
                Flags::getFledgeAuctionServerAdRenderIdMaxLength);
    }

    @Test
    public void testGetDownloaderConnectionTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_DOWNLOADER_CONNECTION_TIMEOUT_MS,
                DOWNLOADER_CONNECTION_TIMEOUT_MS,
                Flags::getDownloaderConnectionTimeoutMs);
    }

    @Test
    public void testGetDownloaderReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_DOWNLOADER_READ_TIMEOUT_MS,
                DOWNLOADER_READ_TIMEOUT_MS,
                Flags::getDownloaderReadTimeoutMs);
    }

    @Test
    public void testGetDownloaderMaxDownloadThreads() {
        mFlagsTestHelper.testConfigFlag(
                KEY_DOWNLOADER_MAX_DOWNLOAD_THREADS,
                DOWNLOADER_MAX_DOWNLOAD_THREADS,
                Flags::getDownloaderMaxDownloadThreads);
    }

    @Test
    public void testGetMeasurementEventMainReportingJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_MAIN_REPORTING_JOB_PERIOD_MS,
                MEASUREMENT_EVENT_MAIN_REPORTING_JOB_PERIOD_MS,
                Flags::getMeasurementEventMainReportingJobPeriodMs);
    }

    @Test
    public void testGetMeasurementEventFallbackReportingJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERIOD_MS,
                MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERIOD_MS,
                Flags::getMeasurementEventFallbackReportingJobPeriodMs);
    }

    @Test
    public void testGetEnrollmentOriginMatch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_ENROLLMENT_ORIGIN_MATCH,
                MEASUREMENT_ENFORCE_ENROLLMENT_ORIGIN_MATCH,
                Flags::getEnforceEnrollmentOriginMatch);
    }

    @Test
    public void testGetMeasurementAggregationCoordinatorOriginEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_ENABLED,
                MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_ENABLED,
                Flags::getMeasurementAggregationCoordinatorOriginEnabled);
    }

    @Test
    public void testGetMeasurementAggregationCoordinatorOriginList() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_LIST,
                MEASUREMENT_AGGREGATION_COORDINATOR_ORIGIN_LIST,
                Flags::getMeasurementAggregationCoordinatorOriginList);
    }

    @Test
    public void testGetMeasurementDefaultAggregationCoordinatorOrigin() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEFAULT_AGGREGATION_COORDINATOR_ORIGIN,
                MEASUREMENT_DEFAULT_AGGREGATION_COORDINATOR_ORIGIN,
                Flags::getMeasurementDefaultAggregationCoordinatorOrigin);
    }

    @Test
    public void testGetMeasurementAggregationCoordinatorPath() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATION_COORDINATOR_PATH,
                MEASUREMENT_AGGREGATION_COORDINATOR_PATH,
                Flags::getMeasurementAggregationCoordinatorPath);
    }

    @Test
    public void testGetMeasurementAggregateMainReportingJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_MAIN_REPORTING_JOB_PERIOD_MS,
                MEASUREMENT_AGGREGATE_MAIN_REPORTING_JOB_PERIOD_MS,
                Flags::getMeasurementAggregateMainReportingJobPeriodMs);
    }

    @Test
    public void testGetMeasurementAggregateFallbackReportingJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERIOD_MS,
                MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERIOD_MS,
                Flags::getMeasurementAggregateFallbackReportingJobPeriodMs);
    }

    @Test
    public void testGetMeasurementDbSizeLimit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DB_SIZE_LIMIT,
                MEASUREMENT_DB_SIZE_LIMIT,
                Flags::getMeasurementDbSizeLimit);
    }

    @Test
    public void testGetMeasurementManifestFileUrl() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MANIFEST_FILE_URL,
                MEASUREMENT_MANIFEST_FILE_URL,
                Flags::getMeasurementManifestFileUrl);
    }

    @Test
    public void testGetMeasurementNetworkConnectTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_NETWORK_CONNECT_TIMEOUT_MS,
                MEASUREMENT_NETWORK_CONNECT_TIMEOUT_MS,
                Flags::getMeasurementNetworkConnectTimeoutMs);
    }

    @Test
    public void testGetMeasurementNetworkReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_NETWORK_READ_TIMEOUT_MS,
                MEASUREMENT_NETWORK_READ_TIMEOUT_MS,
                Flags::getMeasurementNetworkReadTimeoutMs);
    }

    @Test
    public void testGetMeasurementIsClickVerificationEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_IS_CLICK_VERIFICATION_ENABLED,
                MEASUREMENT_IS_CLICK_VERIFICATION_ENABLED,
                Flags::getMeasurementIsClickVerificationEnabled);
    }

    @Test
    public void testGetMeasurementIsClickVerifiedByInputEvent() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_IS_CLICK_VERIFIED_BY_INPUT_EVENT,
                MEASUREMENT_IS_CLICK_VERIFIED_BY_INPUT_EVENT,
                Flags::getMeasurementIsClickVerifiedByInputEvent);
    }

    @Test
    public void testGetMeasurementRegistrationInputEventValidWindowMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_REGISTRATION_INPUT_EVENT_VALID_WINDOW_MS,
                MEASUREMENT_REGISTRATION_INPUT_EVENT_VALID_WINDOW_MS,
                Flags::getMeasurementRegistrationInputEventValidWindowMs);
    }

    @Test
    public void testGetMeasurementIsClickDeduplicationEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_IS_CLICK_DEDUPLICATION_ENABLED,
                MEASUREMENT_IS_CLICK_DEDUPLICATION_ENABLED,
                Flags::getMeasurementIsClickDeduplicationEnabled);
    }

    @Test
    public void testGetMeasurementIsClickDeduplicationEnforced() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_IS_CLICK_DEDUPLICATION_ENFORCED,
                MEASUREMENT_IS_CLICK_DEDUPLICATION_ENFORCED,
                Flags::getMeasurementIsClickDeduplicationEnforced);
    }

    @Test
    public void testGetMeasurementMaxSourcesPerClick() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_SOURCES_PER_CLICK,
                MEASUREMENT_MAX_SOURCES_PER_CLICK,
                Flags::getMeasurementMaxSourcesPerClick);
    }

    @Test
    public void testGetMeasurementEnableXNA() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_XNA, MEASUREMENT_ENABLE_XNA, Flags::getMeasurementEnableXNA);
    }

    @Test
    public void testGetMeasurementEnableDebugReport() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_DEBUG_REPORT,
                MEASUREMENT_ENABLE_DEBUG_REPORT,
                Flags::getMeasurementEnableDebugReport);
    }

    @Test
    public void testGetMeasurementEnableSourceDebugReport() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_SOURCE_DEBUG_REPORT,
                MEASUREMENT_ENABLE_SOURCE_DEBUG_REPORT,
                Flags::getMeasurementEnableSourceDebugReport);
    }

    @Test
    public void testGetMeasurementEnableTriggerDebugReport() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_TRIGGER_DEBUG_REPORT,
                MEASUREMENT_ENABLE_TRIGGER_DEBUG_REPORT,
                Flags::getMeasurementEnableTriggerDebugReport);
    }

    @Test
    public void testGetMeasurementEnableHeaderErrorDebugReport() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_HEADER_ERROR_DEBUG_REPORT,
                MEASUREMENT_ENABLE_HEADER_ERROR_DEBUG_REPORT,
                Flags::getMeasurementEnableHeaderErrorDebugReport);
    }

    @Test
    public void testGetMeasurementDebugJoinKeyHashLimit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_JOIN_KEY_HASH_LIMIT,
                DEFAULT_MEASUREMENT_DEBUG_JOIN_KEY_HASH_LIMIT,
                Flags::getMeasurementDebugJoinKeyHashLimit);
    }

    @Test
    public void testGetMeasurementDebugJoinKeyEnrollmentAllowList() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_JOIN_KEY_ENROLLMENT_ALLOWLIST,
                DEFAULT_MEASUREMENT_DEBUG_JOIN_KEY_ENROLLMENT_ALLOWLIST,
                Flags::getMeasurementDebugJoinKeyEnrollmentAllowlist);
    }

    @Test
    public void testGetMeasurementDebugKeyAdIDMatchingLimit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_KEY_AD_ID_MATCHING_LIMIT,
                DEFAULT_MEASUREMENT_PLATFORM_DEBUG_AD_ID_MATCHING_LIMIT,
                Flags::getMeasurementPlatformDebugAdIdMatchingLimit);
    }

    @Test
    public void testGetMeasurementDebugKeyAdIdMatchingEnrollmentBlocklist() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_KEY_AD_ID_MATCHING_ENROLLMENT_BLOCKLIST,
                DEFAULT_MEASUREMENT_PLATFORM_DEBUG_AD_ID_MATCHING_BLOCKLIST,
                Flags::getMeasurementPlatformDebugAdIdMatchingEnrollmentBlocklist);
    }

    @Test
    public void testGetComputeVersionFromMappings() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_COMPUTE_VERSION_FROM_MAPPINGS,
                DEFAULT_COMPUTE_VERSION_FROM_MAPPINGS_ENABLED,
                Flags::getEnableComputeVersionFromMappings);
    }

    @Test
    public void testGetMainlineTrainVersion() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MAINLINE_TRAIN_VERSION,
                DEFAULT_MAINLINE_TRAIN_VERSION,
                Flags::getMainlineTrainVersion);
    }

    @Test
    public void testGetAdservicesVersionMappings() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ADSERVICES_VERSION_MAPPINGS,
                DEFAULT_ADSERVICES_VERSION_MAPPINGS,
                Flags::getAdservicesVersionMappings);
    }

    @Test
    public void testGetMeasurementDataExpiryWindowMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DATA_EXPIRY_WINDOW_MS,
                MEASUREMENT_DATA_EXPIRY_WINDOW_MS,
                Flags::getMeasurementDataExpiryWindowMs);
    }

    @Test
    public void testGetMeasurementMaxRegistrationRedirects() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_REGISTRATION_REDIRECTS,
                MEASUREMENT_MAX_REGISTRATION_REDIRECTS,
                Flags::getMeasurementMaxRegistrationRedirects);
    }

    @Test
    public void testGetMeasurementMaxRegistrationsPerJobInvocation() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_REGISTRATIONS_PER_JOB_INVOCATION,
                MEASUREMENT_MAX_REGISTRATIONS_PER_JOB_INVOCATION,
                Flags::getMeasurementMaxRegistrationsPerJobInvocation);
    }

    @Test
    public void testGetMeasurementMaxRetriesPerRegistrationRequest() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_RETRIES_PER_REGISTRATION_REQUEST,
                MEASUREMENT_MAX_RETRIES_PER_REGISTRATION_REQUEST,
                Flags::getMeasurementMaxRetriesPerRegistrationRequest);
    }

    @Test
    public void testGetMeasurementAsyncRegistrationJobTriggerMinDelayMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MIN_DELAY_MS,
                DEFAULT_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MIN_DELAY_MS,
                Flags::getMeasurementAsyncRegistrationJobTriggerMinDelayMs);
    }

    @Test
    public void testGetMeasurementAsyncRegistrationJobTriggerMaxDelayMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MAX_DELAY_MS,
                DEFAULT_MEASUREMENT_ASYNC_REGISTRATION_JOB_TRIGGER_MAX_DELAY_MS,
                Flags::getMeasurementAsyncRegistrationJobTriggerMaxDelayMs);
    }

    @Test
    public void testGetMeasurementMaxBytesPerAttributionFilterString() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_FILTER_STRING,
                DEFAULT_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_FILTER_STRING,
                Flags::getMeasurementMaxBytesPerAttributionFilterString);
    }

    @Test
    public void testGetMeasurementMaxBytesPerAttributionAggregateKeyId() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_AGGREGATE_KEY_ID,
                DEFAULT_MEASUREMENT_MAX_BYTES_PER_ATTRIBUTION_AGGREGATE_KEY_ID,
                Flags::getMeasurementMaxBytesPerAttributionAggregateKeyId);
    }

    @Test
    public void testGetMeasurementMaxAggregateDeduplicationKeysPerRegistration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_AGGREGATE_DEDUPLICATION_KEYS_PER_REGISTRATION,
                DEFAULT_MEASUREMENT_MAX_AGGREGATE_DEDUPLICATION_KEYS_PER_REGISTRATION,
                Flags::getMeasurementMaxAggregateDeduplicationKeysPerRegistration);
    }

    @Test
    public void testGetMeasurementMaxFilterMapsPerFilterSet() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_FILTER_MAPS_PER_FILTER_SET,
                DEFAULT_MEASUREMENT_MAX_FILTER_MAPS_PER_FILTER_SET,
                Flags::getMeasurementMaxFilterMapsPerFilterSet);
    }

    @Test
    public void testGetMeasurementMaxValuesPerAttributionFilter() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_VALUES_PER_ATTRIBUTION_FILTER,
                DEFAULT_MEASUREMENT_MAX_VALUES_PER_ATTRIBUTION_FILTER,
                Flags::getMeasurementMaxValuesPerAttributionFilter);
    }

    @Test
    public void testGetMeasurementMaxAttributionFilters() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_ATTRIBUTION_FILTERS,
                DEFAULT_MEASUREMENT_MAX_ATTRIBUTION_FILTERS,
                Flags::getMeasurementMaxAttributionFilters);
    }

    @Test
    public void testGetMeasurementMaxEventReportUploadRetryWindowMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_EVENT_REPORT_UPLOAD_RETRY_WINDOW_MS,
                DEFAULT_MEASUREMENT_MAX_EVENT_REPORT_UPLOAD_RETRY_WINDOW_MS,
                Flags::getMeasurementMaxEventReportUploadRetryWindowMs);
    }

    @Test
    public void testGetMeasurementAttributionJobTriggerDelayMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ATTRIBUTION_JOB_TRIGGERING_DELAY_MS,
                DEFAULT_MEASUREMENT_ATTRIBUTION_JOB_TRIGGERING_DELAY_MS,
                Flags::getMeasurementAttributionJobTriggerDelayMs);
    }

    @Test
    public void testGetMeasurementMaxAttributionsPerInvocation() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_ATTRIBUTIONS_PER_INVOCATION,
                DEFAULT_MEASUREMENT_MAX_ATTRIBUTIONS_PER_INVOCATION,
                Flags::getMeasurementMaxAttributionsPerInvocation);
    }

    @Test
    public void testGetMeasurementMaxAggregateReportUploadRetryWindowMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_AGGREGATE_REPORT_UPLOAD_RETRY_WINDOW_MS,
                DEFAULT_MEASUREMENT_MAX_AGGREGATE_REPORT_UPLOAD_RETRY_WINDOW_MS,
                Flags::getMeasurementMaxAggregateReportUploadRetryWindowMs);
    }

    @Test
    public void testGetMeasurementMaxDelayedSourceRegistrationWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_DELAYED_SOURCE_REGISTRATION_WINDOW,
                DEFAULT_MEASUREMENT_MAX_DELAYED_SOURCE_REGISTRATION_WINDOW,
                Flags::getMeasurementMaxDelayedSourceRegistrationWindow);
    }

    @Test
    public void testGetMeasurementMaxAttributionPerRateLimitWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_ATTRIBUTION_PER_RATE_LIMIT_WINDOW,
                MEASUREMENT_MAX_ATTRIBUTION_PER_RATE_LIMIT_WINDOW,
                Flags::getMeasurementMaxAttributionPerRateLimitWindow);
    }

    @Test
    public void testGetMeasurementMaxEventAttributionPerRateLimitWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_EVENT_ATTRIBUTION_PER_RATE_LIMIT_WINDOW,
                MEASUREMENT_MAX_EVENT_ATTRIBUTION_PER_RATE_LIMIT_WINDOW,
                Flags::getMeasurementMaxEventAttributionPerRateLimitWindow);
    }

    @Test
    public void testGetMeasurementMaxAggregateAttributionPerRateLimitWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_AGGREGATE_ATTRIBUTION_PER_RATE_LIMIT_WINDOW,
                MEASUREMENT_MAX_AGGREGATE_ATTRIBUTION_PER_RATE_LIMIT_WINDOW,
                Flags::getMeasurementMaxAggregateAttributionPerRateLimitWindow);
    }

    @Test
    public void testGetMeasurementMaxDistinctEnrollmentsPerPublisherXDestinationInAttribution() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_DISTINCT_REPORTING_ORIGINS_IN_ATTRIBUTION,
                MEASUREMENT_MAX_DISTINCT_REPORTING_ORIGINS_IN_ATTRIBUTION,
                Flags::getMeasurementMaxDistinctReportingOriginsInAttribution);
    }

    @Test
    public void testGetMeasurementMaxDistinctDestinationsInActiveSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_DISTINCT_DESTINATIONS_IN_ACTIVE_SOURCE,
                MEASUREMENT_MAX_DISTINCT_DESTINATIONS_IN_ACTIVE_SOURCE,
                Flags::getMeasurementMaxDistinctDestinationsInActiveSource);
    }

    @Test
    public void testGetMeasurementMaxReportingOriginsPerSourceReportingSitePerWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_REPORTING_ORIGINS_PER_SOURCE_REPORTING_SITE_PER_WINDOW,
                MEASUREMENT_MAX_REPORTING_ORIGINS_PER_SOURCE_REPORTING_SITE_PER_WINDOW,
                Flags::getMeasurementMaxReportingOriginsPerSourceReportingSitePerWindow);
    }

    @Test
    public void testGetMeasurementMaxDistinctReportingOriginsInSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_DISTINCT_REPORTING_ORIGINS_IN_SOURCE,
                MEASUREMENT_MAX_DISTINCT_REP_ORIG_PER_PUBLISHER_X_DEST_IN_SOURCE,
                Flags::getMeasurementMaxDistinctRepOrigPerPublXDestInSource);
    }

    @Test
    public void testGetMeasurementEnableAggregatableReportPayloadPadding() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_AGGREGATABLE_REPORT_PAYLOAD_PADDING,
                MEASUREMENT_ENABLE_AGGREGATABLE_REPORT_PAYLOAD_PADDING,
                Flags::getMeasurementEnableAggregatableReportPayloadPadding);
    }

    @Test
    public void testGetMeasurementEnableDestinationRateLimit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_DESTINATION_RATE_LIMIT,
                MEASUREMENT_ENABLE_DESTINATION_RATE_LIMIT,
                Flags::getMeasurementEnableDestinationRateLimit);
    }

    @Test
    public void testGetMeasurementMaxDestinationsPerPublisherPerRateLimitWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_DESTINATIONS_PER_PUBLISHER_PER_RATE_LIMIT_WINDOW,
                MEASUREMENT_MAX_DESTINATIONS_PER_PUBLISHER_PER_RATE_LIMIT_WINDOW,
                Flags::getMeasurementMaxDestinationsPerPublisherPerRateLimitWindow);
    }

    @Test
    public void testGetMeasurementMaxDestPerPublisherXEnrollmentPerRateLimitWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_DEST_PER_PUBLISHER_X_ENROLLMENT_PER_RATE_LIMIT_WINDOW,
                MEASUREMENT_MAX_DEST_PER_PUBLISHER_X_ENROLLMENT_PER_RATE_LIMIT_WINDOW,
                Flags::getMeasurementMaxDestPerPublisherXEnrollmentPerRateLimitWindow);
    }

    @Test
    public void testGetMeasurementDestinationRateLimitWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DESTINATION_RATE_LIMIT_WINDOW,
                MEASUREMENT_DESTINATION_RATE_LIMIT_WINDOW,
                Flags::getMeasurementDestinationRateLimitWindow);
    }

    @Test
    public void testGetMeasurementEnableDestinationXPublisherXEnrollmentFifo() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_DESTINATION_PUBLISHER_ENROLLMENT_FIFO,
                MEASUREMENT_ENABLE_DESTINATION_PUBLISHER_ENROLLMENT_FIFO,
                Flags::getMeasurementEnableDestinationXPublisherXEnrollmentFifo);
    }

    @Test
    public void testGetMeasurementEnableFifoDestinationsDeleteAggregateReports() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_FIFO_DESTINATIONS_DELETE_AGGREGATE_REPORTS,
                MEASUREMENT_ENABLE_FIFO_DESTINATIONS_DELETE_AGGREGATE_REPORTS,
                Flags::getMeasurementEnableFifoDestinationsDeleteAggregateReports);
    }

    @Test
    public void testFledgeAppPackageNameLoggingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_APP_PACKAGE_NAME_LOGGING_ENABLED,
                FLEDGE_APP_PACKAGE_NAME_LOGGING_ENABLED,
                Flags::getFledgeAppPackageNameLoggingEnabled);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_COUNT,
                FLEDGE_CUSTOM_AUDIENCE_MAX_COUNT,
                Flags::getFledgeCustomAudienceMaxCount);
    }

    @Test
    public void testGetFledgeCustomAudiencePerAppMaxCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_PER_APP_MAX_COUNT,
                FLEDGE_CUSTOM_AUDIENCE_PER_APP_MAX_COUNT,
                Flags::getFledgeCustomAudiencePerAppMaxCount);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxOwnerCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_OWNER_COUNT,
                FLEDGE_CUSTOM_AUDIENCE_MAX_OWNER_COUNT,
                Flags::getFledgeCustomAudienceMaxOwnerCount);
    }

    @Test
    public void testGetFledgeCustomAudienceDefaultExpireInMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_DEFAULT_EXPIRE_IN_MS,
                FLEDGE_CUSTOM_AUDIENCE_DEFAULT_EXPIRE_IN_MS,
                Flags::getFledgeCustomAudienceDefaultExpireInMs);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxActivationDelayInMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_ACTIVATION_DELAY_IN_MS,
                FLEDGE_CUSTOM_AUDIENCE_MAX_ACTIVATION_DELAY_IN_MS,
                Flags::getFledgeCustomAudienceMaxActivationDelayInMs);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxExpireInMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_EXPIRE_IN_MS,
                FLEDGE_CUSTOM_AUDIENCE_MAX_EXPIRE_IN_MS,
                Flags::getFledgeCustomAudienceMaxExpireInMs);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxNameSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_NAME_SIZE_B,
                FLEDGE_CUSTOM_AUDIENCE_MAX_NAME_SIZE_B,
                Flags::getFledgeCustomAudienceMaxNameSizeB);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxDailyUpdateUriSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_DAILY_UPDATE_URI_SIZE_B,
                FLEDGE_CUSTOM_AUDIENCE_MAX_DAILY_UPDATE_URI_SIZE_B,
                Flags::getFledgeCustomAudienceMaxDailyUpdateUriSizeB);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxBiddingLogicUriSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_BIDDING_LOGIC_URI_SIZE_B,
                FLEDGE_CUSTOM_AUDIENCE_MAX_BIDDING_LOGIC_URI_SIZE_B,
                Flags::getFledgeCustomAudienceMaxBiddingLogicUriSizeB);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxUserBiddingSignalsSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B,
                FLEDGE_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B,
                Flags::getFledgeCustomAudienceMaxUserBiddingSignalsSizeB);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxTrustedBiddingDataSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_TRUSTED_BIDDING_DATA_SIZE_B,
                FLEDGE_CUSTOM_AUDIENCE_MAX_TRUSTED_BIDDING_DATA_SIZE_B,
                Flags::getFledgeCustomAudienceMaxTrustedBiddingDataSizeB);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxAdsSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_ADS_SIZE_B,
                FLEDGE_CUSTOM_AUDIENCE_MAX_ADS_SIZE_B,
                Flags::getFledgeCustomAudienceMaxAdsSizeB);
    }

    @Test
    public void testGetFledgeCustomAudienceMaxNumAds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CUSTOM_AUDIENCE_MAX_NUM_ADS,
                FLEDGE_CUSTOM_AUDIENCE_MAX_NUM_ADS,
                Flags::getFledgeCustomAudienceMaxNumAds);
    }

    @Test
    public void testGetFetchCustomAudienceMaxUserBiddingSignalsSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B,
                FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_USER_BIDDING_SIGNALS_SIZE_B,
                Flags::getFledgeFetchCustomAudienceMaxUserBiddingSignalsSizeB);
    }

    @Test
    public void testGetFetchCustomAudienceMaxRequestCustomHeaderSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_REQUEST_CUSTOM_HEADER_SIZE_B,
                FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_REQUEST_CUSTOM_HEADER_SIZE_B,
                Flags::getFledgeFetchCustomAudienceMaxRequestCustomHeaderSizeB);
    }

    @Test
    public void testGetFetchCustomAudienceMaxCustomAudienceSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_CUSTOM_AUDIENCE_SIZE_B,
                FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_CUSTOM_AUDIENCE_SIZE_B,
                Flags::getFledgeFetchCustomAudienceMaxCustomAudienceSizeB);
    }

    @Test
    public void testGetFledgeFetchCustomAudienceMinRetryAfterValueMS() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MIN_RETRY_AFTER_VALUE_MS,
                FLEDGE_FETCH_CUSTOM_AUDIENCE_MIN_RETRY_AFTER_VALUE_MS,
                Flags::getFledgeFetchCustomAudienceMinRetryAfterValueMs);
    }

    @Test
    public void testFledgeFetchCustomAudienceMaxRetryAfterValueMS() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_RETRY_AFTER_VALUE_MS,
                FLEDGE_FETCH_CUSTOM_AUDIENCE_MAX_RETRY_AFTER_VALUE_MS,
                Flags::getFledgeFetchCustomAudienceMaxRetryAfterValueMs);
    }

    @Test
    public void testGetFledgeHttpCachingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_HTTP_CACHE_ENABLE,
                FLEDGE_HTTP_CACHE_ENABLE,
                Flags::getFledgeHttpCachingEnabled);
    }

    @Test
    public void testGetFledgeJsCachingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_HTTP_CACHE_ENABLE_JS_CACHING,
                FLEDGE_HTTP_CACHE_ENABLE_JS_CACHING,
                Flags::getFledgeHttpJsCachingEnabled);
    }

    @Test
    public void testGetFledgeHttpCacheMaxEntries() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_HTTP_CACHE_MAX_ENTRIES,
                FLEDGE_HTTP_CACHE_MAX_ENTRIES,
                Flags::getFledgeHttpCacheMaxEntries);
    }

    @Test
    public void testGetFledgeOnDeviceAuctionShouldUseUnifiedTables() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_ON_DEVICE_AUCTION_SHOULD_USE_UNIFIED_TABLES,
                FLEDGE_ON_DEVICE_AUCTION_SHOULD_USE_UNIFIED_TABLES,
                Flags::getFledgeOnDeviceAuctionShouldUseUnifiedTables);
    }

    @Test
    public void testGetFledgeHttpCacheMaxAgeSeconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_HTTP_CACHE_DEFAULT_MAX_AGE_SECONDS,
                FLEDGE_HTTP_CACHE_DEFAULT_MAX_AGE_SECONDS,
                Flags::getFledgeHttpCacheMaxAgeSeconds);
    }

    @Test
    public void testGetFledgeAdCounterHistogramAbsoluteMaxTotalEventCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_TOTAL_EVENT_COUNT,
                FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_TOTAL_EVENT_COUNT,
                Flags::getFledgeAdCounterHistogramAbsoluteMaxTotalEventCount);
    }

    @Test
    public void testGetFledgeAdCounterHistogramLowerMaxTotalEventCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_TOTAL_EVENT_COUNT,
                FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_TOTAL_EVENT_COUNT,
                Flags::getFledgeAdCounterHistogramLowerMaxTotalEventCount);
    }

    @Test
    public void testGetFledgeAdCounterHistogramAbsoluteMaxPerBuyerEventCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_PER_BUYER_EVENT_COUNT,
                FLEDGE_AD_COUNTER_HISTOGRAM_ABSOLUTE_MAX_PER_BUYER_EVENT_COUNT,
                Flags::getFledgeAdCounterHistogramAbsoluteMaxPerBuyerEventCount);
    }

    @Test
    public void testGetFledgeAdCounterHistogramLowerMaxPerBuyerEventCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_PER_BUYER_EVENT_COUNT,
                FLEDGE_AD_COUNTER_HISTOGRAM_LOWER_MAX_PER_BUYER_EVENT_COUNT,
                Flags::getFledgeAdCounterHistogramLowerMaxPerBuyerEventCount);
    }

    @Test
    public void testGetFledgeBackgroundFetchJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_JOB_PERIOD_MS,
                FLEDGE_BACKGROUND_FETCH_JOB_PERIOD_MS,
                Flags::getFledgeBackgroundFetchJobPeriodMs);
    }

    @Test
    public void testGetFledgeBackgroundFetchEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_ENABLED,
                FLEDGE_BACKGROUND_FETCH_ENABLED,
                Flags::getFledgeBackgroundFetchEnabled);
    }

    @Test
    public void testGetFledgeBackgroundFetchJobFlexMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_JOB_FLEX_MS,
                FLEDGE_BACKGROUND_FETCH_JOB_FLEX_MS,
                Flags::getFledgeBackgroundFetchJobFlexMs);
    }

    @Test
    public void testGetFledgeBackgroundFetchJobMaxRuntimeMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_JOB_MAX_RUNTIME_MS,
                FLEDGE_BACKGROUND_FETCH_JOB_MAX_RUNTIME_MS,
                Flags::getFledgeBackgroundFetchJobMaxRuntimeMs);
    }

    @Test
    public void testGetFledgeBackgroundFetchMaxNumUpdated() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_MAX_NUM_UPDATED,
                FLEDGE_BACKGROUND_FETCH_MAX_NUM_UPDATED,
                Flags::getFledgeBackgroundFetchMaxNumUpdated);
    }

    @Test
    public void testGetFledgeBackgroundFetchThreadPoolSize() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_THREAD_POOL_SIZE,
                FLEDGE_BACKGROUND_FETCH_THREAD_POOL_SIZE,
                Flags::getFledgeBackgroundFetchThreadPoolSize);
    }

    @Test
    public void testGetFledgeBackgroundFetchEligibleUpdateBaseIntervalS() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_ELIGIBLE_UPDATE_BASE_INTERVAL_S,
                FLEDGE_BACKGROUND_FETCH_ELIGIBLE_UPDATE_BASE_INTERVAL_S,
                Flags::getFledgeBackgroundFetchEligibleUpdateBaseIntervalS);
    }

    @Test
    public void testGetFledgeBackgroundFetchNetworkConnectTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_NETWORK_CONNECT_TIMEOUT_MS,
                FLEDGE_BACKGROUND_FETCH_NETWORK_CONNECT_TIMEOUT_MS,
                Flags::getFledgeBackgroundFetchNetworkConnectTimeoutMs);
    }

    @Test
    public void testGetFledgeBackgroundFetchNetworkReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_NETWORK_READ_TIMEOUT_MS,
                FLEDGE_BACKGROUND_FETCH_NETWORK_READ_TIMEOUT_MS,
                Flags::getFledgeBackgroundFetchNetworkReadTimeoutMs);
    }

    @Test
    public void testGetFledgeBackgroundFetchMaxResponseSizeB() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_MAX_RESPONSE_SIZE_B,
                FLEDGE_BACKGROUND_FETCH_MAX_RESPONSE_SIZE_B,
                Flags::getFledgeBackgroundFetchMaxResponseSizeB);
    }

    @Test
    public void testGetProtectedSignalsPeriodicEncodingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PROTECTED_SIGNALS_PERIODIC_ENCODING_ENABLED,
                PROTECTED_SIGNALS_PERIODIC_ENCODING_ENABLED,
                Flags::getProtectedSignalsPeriodicEncodingEnabled);
    }

    @Test
    public void testGetProtectedSignalPeriodicEncodingJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_PERIOD_MS,
                PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_PERIOD_MS,
                Flags::getProtectedSignalPeriodicEncodingJobPeriodMs);
    }

    @Test
    public void testGetProtectedSignalsPeriodicEncodingJobFlexMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_FLEX_MS,
                PROTECTED_SIGNALS_PERIODIC_ENCODING_JOB_FLEX_MS,
                Flags::getProtectedSignalsPeriodicEncodingJobFlexMs);
    }

    @Test
    public void testGetProtectedSignalsEncoderRefreshWindowSeconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PROTECTED_SIGNALS_ENCODER_REFRESH_WINDOW_SECONDS,
                PROTECTED_SIGNALS_ENCODER_REFRESH_WINDOW_SECONDS,
                Flags::getProtectedSignalsEncoderRefreshWindowSeconds);
    }

    @Test
    public void testGetProtectedSignalsEncodedPayloadMaxSizeBytes() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PROTECTED_SIGNALS_ENCODED_PAYLOAD_MAX_SIZE_BYTES,
                PROTECTED_SIGNALS_ENCODED_PAYLOAD_MAX_SIZE_BYTES,
                Flags::getProtectedSignalsEncodedPayloadMaxSizeBytes);
    }

    @Test
    public void testGetProtectedSignalsFetchSignalUpdatesMaxSizeBytes() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PROTECTED_SIGNALS_FETCH_SIGNAL_UPDATES_MAX_SIZE_BYTES,
                PROTECTED_SIGNALS_FETCH_SIGNAL_UPDATES_MAX_SIZE_BYTES,
                Flags::getProtectedSignalsFetchSignalUpdatesMaxSizeBytes);
    }

    @Test
    public void testGetFledgeRegisterAdBeaconEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_REGISTER_AD_BEACON_ENABLED,
                FLEDGE_REGISTER_AD_BEACON_ENABLED,
                Flags::getFledgeRegisterAdBeaconEnabled);
    }

    @Test
    public void testGetFledgeCpcBillingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CPC_BILLING_ENABLED,
                FLEDGE_CPC_BILLING_ENABLED,
                Flags::getFledgeCpcBillingEnabled);
    }

    @Test
    public void testGetProtectedSignalsCleanupEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PROTECTED_SIGNALS_CLEANUP_ENABLED,
                PROTECTED_SIGNALS_CLEANUP_ENABLED,
                Flags::getProtectedSignalsCleanupEnabled);
    }

    @Test
    public void testGetFledgeDataVersionHeaderEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_DATA_VERSION_HEADER_ENABLED,
                FLEDGE_DATA_VERSION_HEADER_ENABLED,
                Flags::getFledgeDataVersionHeaderEnabled);
    }

    @Test
    public void testGetMeasurementJobImmediateAggregateReportingKillSwitch() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_MEASUREMENT_JOB_IMMEDIATE_AGGREGATE_REPORTING_KILL_SWITCH,
                MEASUREMENT_JOB_IMMEDIATE_AGGREGATE_REPORTING_KILL_SWITCH,
                FeatureFlagType.LEGACY_KILL_SWITCH,
                mMsmtKillSwitchGuard,
                Flags::getMeasurementJobImmediateAggregateReportingKillSwitch);
    }

    @Test
    public void testGetBeaconReportingMetricsEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_BEACON_REPORTING_METRICS_ENABLED,
                FLEDGE_BEACON_REPORTING_METRICS_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_FLEDGE_REGISTER_AD_BEACON_ENABLED, value),
                Flags::getFledgeBeaconReportingMetricsEnabled);
    }

    @Test
    public void testGetFledgeBaApiUsageMetricsEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_AUCTION_SERVER_API_USAGE_METRICS_ENABLED,
                FLEDGE_AUCTION_SERVER_API_USAGE_METRICS_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_FLEDGE_AUCTION_SERVER_ENABLED, value),
                Flags::getFledgeAuctionServerApiUsageMetricsEnabled);
    }

    @Test
    public void testGetFledgeAuctionServerKeyFetchMetricsEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_AUCTION_SERVER_KEY_FETCH_METRICS_ENABLED,
                FLEDGE_AUCTION_SERVER_KEY_FETCH_METRICS_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_FLEDGE_AUCTION_SERVER_ENABLED, value),
                Flags::getFledgeAuctionServerKeyFetchMetricsEnabled);
    }

    @Test
    public void testGetFledgeSelectAdsFromOutcomesApiMetricsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_SELECT_ADS_FROM_OUTCOMES_API_METRICS_ENABLED,
                FLEDGE_SELECT_ADS_FROM_OUTCOMES_API_METRICS_ENABLED,
                Flags::getFledgeSelectAdsFromOutcomesApiMetricsEnabled);
    }

    @Test
    public void testGetFledgeCpcBillingMetricsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_CPC_BILLING_METRICS_ENABLED,
                FLEDGE_CPC_BILLING_METRICS_ENABLED,
                Flags::getFledgeCpcBillingMetricsEnabled);
    }

    @Test
    public void testGetFledgeDataVersionHeaderMetricsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_DATA_VERSION_HEADER_METRICS_ENABLED,
                FLEDGE_DATA_VERSION_HEADER_METRICS_ENABLED,
                Flags::getFledgeDataVersionHeaderMetricsEnabled);
    }

    @Test
    public void testGetFledgeReportImpressionApiMetricsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_REPORT_IMPRESSION_API_METRICS_ENABLED,
                FLEDGE_REPORT_IMPRESSION_API_METRICS_ENABLED,
                Flags::getFledgeReportImpressionApiMetricsEnabled);
    }

    @Test
    public void testGetFledgeEventLevelDebugReportingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_ENABLED,
                FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_ENABLED,
                Flags::getFledgeEventLevelDebugReportingEnabled);
    }

    @Test
    public void testGetFledgeEventLevelDebugReportSendImmediately() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORT_SEND_IMMEDIATELY,
                FLEDGE_EVENT_LEVEL_DEBUG_REPORT_SEND_IMMEDIATELY,
                Flags::getFledgeEventLevelDebugReportSendImmediately);
    }

    @Test
    public void testGetFledgeEventLevelDebugReportingDelay() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_BATCH_DELAY_SECONDS,
                FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_BATCH_DELAY_SECONDS,
                Flags::getFledgeEventLevelDebugReportingBatchDelaySeconds);
    }

    @Test
    public void testGetFledgeEventLevelDebugReportingMaxItemsPerBatch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_MAX_ITEMS_PER_BATCH,
                FLEDGE_EVENT_LEVEL_DEBUG_REPORTING_MAX_ITEMS_PER_BATCH,
                Flags::getFledgeEventLevelDebugReportingMaxItemsPerBatch);
    }

    @Test
    public void testGetFledgeDebugReportSenderJobNetworkConnectionTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_DEBUG_REPORTI_SENDER_JOB_NETWORK_CONNECT_TIMEOUT_MS,
                FLEDGE_DEBUG_REPORT_SENDER_JOB_NETWORK_CONNECT_TIMEOUT_MS,
                Flags::getFledgeDebugReportSenderJobNetworkConnectionTimeoutMs);
    }

    @Test
    public void testGetFledgeDebugReportSenderJobNetworkReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_DEBUG_REPORTI_SENDER_JOB_NETWORK_READ_TIMEOUT_MS,
                FLEDGE_DEBUG_REPORT_SENDER_JOB_NETWORK_READ_TIMEOUT_MS,
                Flags::getFledgeDebugReportSenderJobNetworkReadTimeoutMs);
    }

    @Test
    public void testGetFledgeDebugReportSenderJobMaxRuntimeMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_DEBUG_REPORTI_SENDER_JOB_MAX_TIMEOUT_MS,
                FLEDGE_DEBUG_REPORT_SENDER_JOB_MAX_RUNTIME_MS,
                Flags::getFledgeDebugReportSenderJobMaxRuntimeMs);
    }

    @Test
    public void testGetFledgeDebugReportSenderJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_DEBUG_REPORT_SENDER_JOB_PERIOD_MS,
                FLEDGE_DEBUG_REPORT_SENDER_JOB_PERIOD_MS,
                Flags::getFledgeDebugReportSenderJobPeriodMs);
    }

    @Test
    public void testGetFledgeDebugReportSenderJobFlexMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_DEBUG_REPORT_SENDER_JOB_FLEX_MS,
                FLEDGE_DEBUG_REPORT_SENDER_JOB_FLEX_MS,
                Flags::getFledgeDebugReportSenderJobFlexMs);
    }

    @Test
    public void testGetEnforceForegroundStatusForFledgeRunAdSelection() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_RUN_AD_SELECTION,
                ENFORCE_FOREGROUND_STATUS_FLEDGE_RUN_AD_SELECTION,
                Flags::getEnforceForegroundStatusForFledgeRunAdSelection);
    }

    @Test
    public void testGetEnforceForegroundStatusForFledgeReportImpression() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_IMPRESSION,
                ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_IMPRESSION,
                Flags::getEnforceForegroundStatusForFledgeReportImpression);
    }

    @Test
    public void testGetEnforceForegroundStatusForFledgeReportInteraction() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_INTERACTION,
                ENFORCE_FOREGROUND_STATUS_FLEDGE_REPORT_INTERACTION,
                Flags::getEnforceForegroundStatusForFledgeReportInteraction);
    }

    @Test
    public void testEnforceForegroundStatusForFledgeOverrides() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_OVERRIDE,
                ENFORCE_FOREGROUND_STATUS_FLEDGE_OVERRIDES,
                Flags::getEnforceForegroundStatusForFledgeOverrides);
    }

    @Test
    public void testEnforceForegroundStatusForFledgeCustomAudience() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENFORCE_FOREGROUND_STATUS_FLEDGE_CUSTOM_AUDIENCE,
                ENFORCE_FOREGROUND_STATUS_FLEDGE_CUSTOM_AUDIENCE,
                Flags::getEnforceForegroundStatusForFledgeCustomAudience);
    }

    @Test
    public void testGetEnforceForegroundStatusForMeasurementDeleteRegistrations() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_DELETE_REGISTRATIONS,
                MEASUREMENT_ENFORCE_FOREGROUND_STATUS_DELETE_REGISTRATIONS,
                Flags::getEnforceForegroundStatusForMeasurementDeleteRegistrations);
        assertThat(mTestFlags.getEnforceForegroundStatusForMeasurementDeleteRegistrations())
                .isEqualTo(MEASUREMENT_ENFORCE_FOREGROUND_STATUS_DELETE_REGISTRATIONS);
    }

    @Test
    public void testGetEnforceForegroundStatusForMeasurementRegisterSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCE,
                MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCE,
                Flags::getEnforceForegroundStatusForMeasurementRegisterSource);
        assertThat(mTestFlags.getEnforceForegroundStatusForMeasurementRegisterSource())
                .isEqualTo(MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCE);
    }

    @Test
    public void testGetEnforceForegroundStatusForMeasurementRegisterSources() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCES,
                MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCES,
                Flags::getEnforceForegroundStatusForMeasurementRegisterSources);
        assertThat(mTestFlags.getEnforceForegroundStatusForMeasurementRegisterSources())
                .isEqualTo(MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_SOURCES);
    }

    @Test
    public void testGetEnforceForegroundStatusForMeasurementRegisterTrigger() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_TRIGGER,
                MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_TRIGGER,
                Flags::getEnforceForegroundStatusForMeasurementRegisterTrigger);
        assertThat(mTestFlags.getEnforceForegroundStatusForMeasurementRegisterTrigger())
                .isEqualTo(MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_TRIGGER);
    }

    @Test
    public void testGetEnforceForegroundStatusForMeasurementRegisterWebSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_SOURCE,
                MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_SOURCE,
                Flags::getEnforceForegroundStatusForMeasurementRegisterWebSource);
        assertThat(mTestFlags.getEnforceForegroundStatusForMeasurementRegisterWebSource())
                .isEqualTo(MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_SOURCE);
    }

    @Test
    public void testGetEnforceForegroundStatusForMeasurementRegisterWebTrigger() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_TRIGGER,
                MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_TRIGGER,
                Flags::getEnforceForegroundStatusForMeasurementRegisterWebTrigger);
        assertThat(mTestFlags.getEnforceForegroundStatusForMeasurementRegisterWebTrigger())
                .isEqualTo(MEASUREMENT_ENFORCE_FOREGROUND_STATUS_REGISTER_WEB_TRIGGER);
    }

    @Test
    public void testGetEnforceForegroundStatusForMeasurementStatus() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENFORCE_FOREGROUND_STATUS_GET_STATUS,
                MEASUREMENT_ENFORCE_FOREGROUND_STATUS_GET_STATUS,
                Flags::getEnforceForegroundStatusForMeasurementStatus);
        assertThat(mTestFlags.getEnforceForegroundStatusForMeasurementStatus())
                .isEqualTo(MEASUREMENT_ENFORCE_FOREGROUND_STATUS_GET_STATUS);
    }

    @Test
    public void testGetAdServicesEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_ADSERVICES_ENABLED,
                ADSERVICES_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> overrideGlobalKillSwitch(!value),
                Flags::getAdServicesEnabled);
    }

    @Test
    public void testGetGaUxFeatureEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_GA_UX_FEATURE_ENABLED, GA_UX_FEATURE_ENABLED, Flags::getGaUxFeatureEnabled);
    }

    @Test
    public void testGetDialogFragmentEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_UI_DIALOG_FRAGMENT_ENABLED,
                UI_DIALOG_FRAGMENT,
                Flags::getUiDialogFragmentEnabled);
    }

    @Test
    public void testGetToggleSpeedBumpEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_UI_TOGGLE_SPEED_BUMP_ENABLED,
                TOGGLE_SPEED_BUMP_ENABLED,
                Flags::getToggleSpeedBumpEnabled);
    }

    @Test
    public void testGetMeasurementEnabled() {
        // Disable global_kill_switch so that this flag can be tested.
        disableGlobalKillSwitch();

        boolean defaultKsValue = MEASUREMENT_KILL_SWITCH;
        boolean phOverridingKsValue = !defaultKsValue;
        boolean expectedDefaultValue = !defaultKsValue;
        boolean expectedOverriddenValue = !expectedDefaultValue;
        Log.v(
                mTag,
                "defaultKsValue(MEASUREMENT_KILL_SWITCH)="
                        + defaultKsValue
                        + ", phOverridingKsValue="
                        + phOverridingKsValue
                        + ", expectedDefaultValue="
                        + expectedDefaultValue
                        + ", expectedOverriddenValue="
                        + expectedOverriddenValue);

        // Without any overriding, the value is the hard coded constant.
        expect.withMessage("getMeasurementEnabled() by default")
                .that(mPhFlags.getMeasurementEnabled())
                .isEqualTo(expectedDefaultValue);

        // Now overriding with the value from PH.
        setMeasurementKillSwitch(phOverridingKsValue);

        expect.withMessage("getMeasurementEnabled() when set by device_config")
                .that(mPhFlags.getMeasurementEnabled())
                .isEqualTo(expectedOverriddenValue);
    }

    @Test
    public void testGetMeasurementEnabled_globalOverride() {
        enableGlobalKillSwitch();
        setMeasurementKillSwitch(false);

        expect.withMessage("getMeasurementEnabled() when global kill switch is on")
                .that(mPhFlags.getMeasurementEnabled())
                .isFalse();
    }

    @Test
    public void testGetMeasurementAttributionFallbackJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERIOD_MS,
                MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERIOD_MS,
                Flags::getMeasurementAttributionFallbackJobPeriodMs);
    }

    @Test
    public void testGetMeasurementVerboseDebugReportingFallbackJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS,
                MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS,
                Flags::getMeasurementVerboseDebugReportingFallbackJobPeriodMs);
    }

    @Test
    public void testGetMeasurementDebugReportingFallbackJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS,
                MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERIOD_MS,
                Flags::getMeasurementDebugReportingFallbackJobPeriodMs);
    }

    @Test
    public void testGetMeasurementEventReportsVtcEarlyReportingWindows() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_REPORTS_VTC_EARLY_REPORTING_WINDOWS,
                MEASUREMENT_EVENT_REPORTS_VTC_EARLY_REPORTING_WINDOWS,
                Flags::getMeasurementEventReportsVtcEarlyReportingWindows);
    }

    @Test
    public void testGetMeasurementEventReportsCtcEarlyReportingWindows() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_REPORTS_CTC_EARLY_REPORTING_WINDOWS,
                MEASUREMENT_EVENT_REPORTS_CTC_EARLY_REPORTING_WINDOWS,
                Flags::getMeasurementEventReportsCtcEarlyReportingWindows);
    }

    @Test
    public void testGetMeasurementEnableConfigurableAggregateReportDelay() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_CONFIGURABLE_AGGREGATE_REPORT_DELAY,
                MEASUREMENT_ENABLE_CONFIGURABLE_AGGREGATE_REPORT_DELAY,
                Flags::getMeasurementEnableConfigurableAggregateReportDelay);
    }

    @Test
    public void testGetMeasurementAggregateReportDelay() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_REPORT_DELAY_CONFIG,
                MEASUREMENT_AGGREGATE_REPORT_DELAY_CONFIG,
                Flags::getMeasurementAggregateReportDelayConfig);
    }

    @Test
    public void testGetMeasurementEnableLookbackWindowFilter() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_LOOKBACK_WINDOW_FILTER,
                MEASUREMENT_ENABLE_LOOKBACK_WINDOW_FILTER,
                Flags::getMeasurementEnableLookbackWindowFilter);
    }

    @Test
    public void testGetAdIdKillSwitch_globalOverride() {
        // test that global killswitch override has no effect on
        // AdIdKillswitch.
        assertThat(mPhFlags.getAdIdKillSwitch()).isEqualTo(ADID_KILL_SWITCH);

        boolean phOverridingValue = !ADID_KILL_SWITCH;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_GLOBAL_KILL_SWITCH,
                Boolean.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getAdIdKillSwitch()).isEqualTo(ADID_KILL_SWITCH);
    }

    @Test
    public void testGetMeasurementMaxSourcesPerPublisher() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_SOURCES_PER_PUBLISHER,
                MEASUREMENT_MAX_SOURCES_PER_PUBLISHER,
                Flags::getMeasurementMaxSourcesPerPublisher);
    }

    @Test
    public void testGetMeasurementMaxTriggersPerDestination() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_TRIGGERS_PER_DESTINATION,
                MEASUREMENT_MAX_TRIGGERS_PER_DESTINATION,
                Flags::getMeasurementMaxTriggersPerDestination);
    }

    @Test
    public void testGetMeasurementMaxAggregateReportsPerDestination() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_DESTINATION,
                MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_DESTINATION,
                Flags::getMeasurementMaxAggregateReportsPerDestination);
    }

    @Test
    public void testGetMeasurementMaxEventReportsPerDestination() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_EVENT_REPORTS_PER_DESTINATION,
                MEASUREMENT_MAX_EVENT_REPORTS_PER_DESTINATION,
                Flags::getMeasurementMaxEventReportsPerDestination);
    }

    @Test
    public void testGetMeasurementMaxAggregateKeysPerSourceRegistration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_AGGREGATE_KEYS_PER_SOURCE_REGISTRATION,
                MEASUREMENT_MAX_AGGREGATE_KEYS_PER_SOURCE_REGISTRATION,
                Flags::getMeasurementMaxAggregateKeysPerSourceRegistration);
    }

    @Test
    public void testGetMeasurementMaxAggregateKeysPerTriggerRegistration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_AGGREGATE_KEYS_PER_TRIGGER_REGISTRATION,
                MEASUREMENT_MAX_AGGREGATE_KEYS_PER_TRIGGER_REGISTRATION,
                Flags::getMeasurementMaxAggregateKeysPerTriggerRegistration);
    }

    @Test
    public void test_globalKillswitchOverrides_getAdIdKillSwitch() {
        // Without any overriding, AdId Killswitch is off.
        assertThat(mPhFlags.getAdIdKillSwitch()).isEqualTo(ADID_KILL_SWITCH);

        // Without any overriding, Global Killswitch is off.
        assertThat(mPhFlags.getGlobalKillSwitch()).isEqualTo(GLOBAL_KILL_SWITCH);

        // Now overriding with the value from PH.
        boolean phOverridingValue = true;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_GLOBAL_KILL_SWITCH,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now Global Killswitch is on.
        assertThat(mPhFlags.getGlobalKillSwitch()).isTrue();

        // Global Killswitch is on, but is ignored by the getAdIdKillswitch.
        assertThat(mPhFlags.getAdIdKillSwitch()).isFalse();
    }

    @Test
    public void testGetProtectedSignalsEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_PROTECTED_SIGNALS_ENABLED,
                PROTECTED_SIGNALS_ENABLED,
                FeatureFlagType.FEATURE_FLAG_BACKED_BY_LEGACY_KILL_SWITCH,
                value -> overrideGlobalKillSwitch(!value),
                Flags::getProtectedSignalsEnabled);
    }

    @Test
    public void testGetFledgeAuctionServerKillSwitch() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_AUCTION_SERVER_KILL_SWITCH,
                FLEDGE_AUCTION_SERVER_KILL_SWITCH,
                FeatureFlagType.LEGACY_KILL_SWITCH,
                value -> {
                    overrideGlobalKillSwitch(!value);
                    overrideSelectAdsKillSwitch(!value);
                },
                Flags::getFledgeAuctionServerKillSwitch);
    }

    @Test
    public void testGetFledgeOnDeviceAuctionKillSwitch_setsCorrectValue() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_ON_DEVICE_AUCTION_KILL_SWITCH,
                FLEDGE_ON_DEVICE_AUCTION_KILL_SWITCH,
                FeatureFlagType.LEGACY_KILL_SWITCH,
                value -> {
                    overrideGlobalKillSwitch(!value);
                    overrideSelectAdsKillSwitch(!value);
                },
                Flags::getFledgeOnDeviceAuctionKillSwitch);
    }

    @Test
    public void test_fledgeSelectAdsServiceKillSwitch_shouldOverrideOtherKillSwitches() {
        // Disable global_kill_switch so that this flag can be tested.
        disableGlobalKillSwitch();
        disableSelectAdsKillSwitch();

        assertThat(mPhFlags.getFledgeOnDeviceAuctionKillSwitch())
                .isEqualTo(FLEDGE_ON_DEVICE_AUCTION_KILL_SWITCH);
        assertThat(mPhFlags.getFledgeAuctionServerKillSwitch())
                .isEqualTo(FLEDGE_AUCTION_SERVER_KILL_SWITCH);

        enableSelectAdsKillSwitch();
        assertThat(mPhFlags.getFledgeOnDeviceAuctionKillSwitch()).isEqualTo(true);
        assertThat(mPhFlags.getFledgeAuctionServerKillSwitch()).isEqualTo(true);
    }

    @Test
    public void testGetFledgeGlobalKillSwitchOverridesOtherFledgeKillSwitches() {
        // Disable global_kill_switch so that this flag can be tested.
        disableGlobalKillSwitch();

        // without any overrides the Fledge API kill switch should be off
        assertThat(mPhFlags.getFledgeSelectAdsKillSwitch())
                .isEqualTo(FLEDGE_SELECT_ADS_KILL_SWITCH);
        assertThat(mPhFlags.getFledgeCustomAudienceServiceKillSwitch())
                .isEqualTo(FLEDGE_CUSTOM_AUDIENCE_SERVICE_KILL_SWITCH);
        assertThat(mPhFlags.getFledgeAuctionServerKillSwitch())
                .isEqualTo(FLEDGE_AUCTION_SERVER_KILL_SWITCH);
        assertThat(mPhFlags.getFledgeOnDeviceAuctionKillSwitch())
                .isEqualTo(FLEDGE_ON_DEVICE_AUCTION_KILL_SWITCH);

        // Now overriding with the value from PH.
        boolean phOverridingValue = !FLEDGE_CUSTOM_AUDIENCE_SERVICE_KILL_SWITCH;
        overrideGlobalKillSwitch(phOverridingValue);

        assertThat(mPhFlags.getFledgeSelectAdsKillSwitch()).isEqualTo(phOverridingValue);
        assertThat(mPhFlags.getFledgeCustomAudienceServiceKillSwitch())
                .isEqualTo(phOverridingValue);
        assertThat(mPhFlags.getFledgeAuctionServerKillSwitch()).isEqualTo(phOverridingValue);
        assertThat(mPhFlags.getFledgeOnDeviceAuctionKillSwitch()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetEncryptionKeyJobRequiredNetworkType() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getEncryptionKeyJobRequiredNetworkType())
                .isEqualTo(ENCRYPTION_KEY_JOB_REQUIRED_NETWORK_TYPE);

        // Now overriding with the value from PH.
        int phOverridingValue = ENCRYPTION_KEY_JOB_REQUIRED_NETWORK_TYPE + 1;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENCRYPTION_KEY_JOB_REQUIRED_NETWORK_TYPE,
                Integer.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getEncryptionKeyJobRequiredNetworkType()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetEncryptionKeyJobPeriodMs() {
        // Assert the value before override.
        assertThat(mPhFlags.getEncryptionKeyJobPeriodMs()).isEqualTo(ENCRYPTION_KEY_JOB_PERIOD_MS);

        // Now overriding with the value from PH.
        long phOverridingValue = ENCRYPTION_KEY_JOB_PERIOD_MS + 1;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENCRYPTION_KEY_JOB_PERIOD_MS,
                Long.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getEncryptionKeyJobPeriodMs()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetEnableMddEncryptionKeys() {
        // Assert the value before override.
        assertThat(mPhFlags.getEnableMddEncryptionKeys()).isEqualTo(ENABLE_MDD_ENCRYPTION_KEYS);

        // Now overriding with the value from PH.
        boolean phOverridingValue = !ENABLE_MDD_ENCRYPTION_KEYS;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENABLE_MDD_ENCRYPTION_KEYS,
                Boolean.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getEnableMddEncryptionKeys()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testMddEncryptionKeysManifestFileUrl() {
        // Assert the value before override.
        assertThat(mPhFlags.getMddEncryptionKeysManifestFileUrl())
                .isEqualTo(MDD_ENCRYPTION_KEYS_MANIFEST_FILE_URL);

        // Now overriding with the value from PH.
        String phOverridingValue = "https://newUrl.com";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MDD_ENCRYPTION_KEYS_MANIFEST_FILE_URL,
                phOverridingValue,
                false);

        assertThat(mPhFlags.getMddEncryptionKeysManifestFileUrl()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetPpapiAppAllowList() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getPpapiAppAllowList()).isEqualTo(PPAPI_APP_ALLOW_LIST);

        // Now overriding with the value from PH.
        String phOverridingValue = PPAPI_APP_ALLOW_LIST + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_PPAPI_APP_ALLOW_LIST,
                phOverridingValue,
                /* makeDefault */ false);

        assertThat(mPhFlags.getPpapiAppAllowList()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetPasAppAllowList() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getPasAppAllowList()).isEqualTo(PPAPI_APP_ALLOW_LIST);

        // Now overriding with the value from PH.
        String phOverridingValue = PPAPI_APP_ALLOW_LIST + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_PAS_APP_ALLOW_LIST,
                phOverridingValue,
                /* makeDefault */ false);

        assertThat(mPhFlags.getPasAppAllowList()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetAdIdApiAppBlockList() {
        assertThat(mPhFlags.getAdIdApiAppBlockList()).isEqualTo(AD_ID_API_APP_BLOCK_LIST);

        // Now overriding with the value from PH.
        String phOverridingValue = AD_ID_API_APP_BLOCK_LIST + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_AD_ID_API_APP_BLOCK_LIST,
                phOverridingValue,
                /* makeDefault */ false);

        assertThat(mPhFlags.getAdIdApiAppBlockList()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetMsmtApiAppAllowList() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(FlagsFactory.getFlags().getMsmtApiAppAllowList())
                .isEqualTo(MSMT_API_APP_ALLOW_LIST);

        // Now overriding with the value from PH.
        String phOverridingValue = MSMT_API_APP_ALLOW_LIST + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MSMT_API_APP_ALLOW_LIST,
                phOverridingValue,
                /* makeDefault */ false);

        Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getMsmtApiAppAllowList()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetMsmtApiAppBlockList() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(FlagsFactory.getFlags().getMsmtApiAppBlockList())
                .isEqualTo(MSMT_API_APP_BLOCK_LIST);

        // Now overriding with the value from PH.
        String phOverridingValue = MSMT_API_APP_BLOCK_LIST + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MSMT_API_APP_BLOCK_LIST,
                phOverridingValue,
                /* makeDefault */ false);

        Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getMsmtApiAppBlockList()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetPpapiAppSignatureAllowList() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getPpapiAppSignatureAllowList())
                .isEqualTo(PPAPI_APP_SIGNATURE_ALLOW_LIST);

        // Now overriding with the value from PH.
        String phOverridingValue =
                PPAPI_APP_SIGNATURE_ALLOW_LIST + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_PPAPI_APP_SIGNATURE_ALLOW_LIST,
                phOverridingValue,
                /* makeDefault */ false);

        assertThat(mPhFlags.getPpapiAppSignatureAllowList()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetAppsearchWriterAllowListOverride() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getAppsearchWriterAllowListOverride())
                .isEqualTo(APPSEARCH_WRITER_ALLOW_LIST_OVERRIDE);

        // Now overriding with the value from PH.
        String phOverridingValue =
                APPSEARCH_WRITER_ALLOW_LIST_OVERRIDE + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_APPSEARCH_WRITER_ALLOW_LIST_OVERRIDE,
                phOverridingValue,
                /* makeDefault */ false);

        assertThat(mPhFlags.getAppsearchWriterAllowListOverride()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetAdServicesApksShaCerts() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getAdservicesApkShaCertificate())
                .isEqualTo(ADSERVICES_APK_SHA_CERTIFICATE);

        // Now overriding with the value from PH.
        String phOverridingValue =
                ADSERVICES_APK_SHA_CERTIFICATE + "SomePackageName,AnotherPackageName";
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ADSERVICES_APK_SHA_CERTS,
                phOverridingValue,
                /* makeDefault */ false);

        assertThat(mPhFlags.getAdservicesApkShaCertificate()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetSdkRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getSdkRequestPermitsPerSecond())
                .isEqualTo(SDK_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = SDK_REQUEST_PERMITS_PER_SECOND + 6;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_SDK_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getSdkRequestPermitsPerSecond()).isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getSdkRequestPermitsPerSecond())
                .isEqualTo(SDK_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetAdIdRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getAdIdRequestPermitsPerSecond())
                .isEqualTo(ADID_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = ADID_REQUEST_PERMITS_PER_SECOND + 7;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ADID_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getAdIdRequestPermitsPerSecond()).isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getAdIdRequestPermitsPerSecond())
                .isEqualTo(ADID_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetAppSetIdRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getAppSetIdRequestPermitsPerSecond())
                .isEqualTo(APPSETID_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = APPSETID_REQUEST_PERMITS_PER_SECOND + 7;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_APPSETID_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getAppSetIdRequestPermitsPerSecond()).isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getAppSetIdRequestPermitsPerSecond())
                .isEqualTo(APPSETID_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetMeasurementRegisterSourceRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getMeasurementRegisterSourceRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_SOURCE_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = MEASUREMENT_REGISTER_SOURCE_REQUEST_PERMITS_PER_SECOND + 7;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MEASUREMENT_REGISTER_SOURCE_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getMeasurementRegisterSourceRequestPermitsPerSecond())
                .isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getMeasurementRegisterSourceRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_SOURCE_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetMeasurementRegisterSourcesRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(FlagsFactory.getFlags().getMeasurementRegisterSourcesRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_SOURCES_REQUEST_PERMITS_PER_SECOND);

        final float phOverridingValue = 7;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MEASUREMENT_REGISTER_SOURCES_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        final Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getMeasurementRegisterSourcesRequestPermitsPerSecond())
                .isEqualTo(phOverridingValue);

        final Flags flags = FakeFlagsFactory.getFlagsForTest();
        assertThat(flags.getMeasurementRegisterSourcesRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_SOURCES_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetMeasurementRegisterWebSourceRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getMeasurementRegisterWebSourceRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_WEB_SOURCE_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = MEASUREMENT_REGISTER_WEB_SOURCE_REQUEST_PERMITS_PER_SECOND + 8;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MEASUREMENT_REGISTER_WEB_SOURCE_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getMeasurementRegisterWebSourceRequestPermitsPerSecond())
                .isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getMeasurementRegisterWebSourceRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_WEB_SOURCE_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetMeasurementRegisterTriggerRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getMeasurementRegisterTriggerRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_TRIGGER_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = MEASUREMENT_REGISTER_TRIGGER_REQUEST_PERMITS_PER_SECOND + 9;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MEASUREMENT_REGISTER_TRIGGER_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getMeasurementRegisterTriggerRequestPermitsPerSecond())
                .isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getMeasurementRegisterTriggerRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_TRIGGER_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetMeasurementRegisterWebTriggerRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(
                        FlagsFactory.getFlags()
                                .getMeasurementRegisterWebTriggerRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_WEB_TRIGGER_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = MEASUREMENT_REGISTER_WEB_TRIGGER_REQUEST_PERMITS_PER_SECOND + 10;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MEASUREMENT_REGISTER_WEB_TRIGGER_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getMeasurementRegisterWebTriggerRequestPermitsPerSecond())
                .isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getMeasurementRegisterWebTriggerRequestPermitsPerSecond())
                .isEqualTo(MEASUREMENT_REGISTER_WEB_TRIGGER_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetTopicsApiAppRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getTopicsApiAppRequestPermitsPerSecond())
                .isEqualTo(TOPICS_API_APP_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = TOPICS_API_APP_REQUEST_PERMITS_PER_SECOND + 7;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_TOPICS_API_APP_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getTopicsApiAppRequestPermitsPerSecond()).isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getTopicsApiAppRequestPermitsPerSecond())
                .isEqualTo(TOPICS_API_APP_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetTopicsApiSdkRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getTopicsApiSdkRequestPermitsPerSecond())
                .isEqualTo(TOPICS_API_SDK_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = TOPICS_API_SDK_REQUEST_PERMITS_PER_SECOND + 7;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_TOPICS_API_SDK_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getTopicsApiSdkRequestPermitsPerSecond()).isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getTopicsApiSdkRequestPermitsPerSecond())
                .isEqualTo(TOPICS_API_SDK_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetFledgeReportInteractionRequestPermitsPerSecond() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getFledgeReportInteractionRequestPermitsPerSecond())
                .isEqualTo(FLEDGE_REPORT_INTERACTION_REQUEST_PERMITS_PER_SECOND);

        float phOverridingValue = FLEDGE_REPORT_INTERACTION_REQUEST_PERMITS_PER_SECOND + 7;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_REPORT_INTERACTION_REQUEST_PERMITS_PER_SECOND,
                Float.toString(phOverridingValue),
                /* makeDefault */ false);

        // Now verify that the PhFlag value was overridden.
        assertThat(mPhFlags.getFledgeReportInteractionRequestPermitsPerSecond())
                .isEqualTo(phOverridingValue);

        assertThat(mTestFlags.getFledgeReportInteractionRequestPermitsPerSecond())
                .isEqualTo(FLEDGE_REPORT_INTERACTION_REQUEST_PERMITS_PER_SECOND);
    }

    @Test
    public void testGetNumberOfEpochsToKeepInHistory() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_NUMBER_OF_EPOCHS_TO_KEEP_IN_HISTORY,
                NUMBER_OF_EPOCHS_TO_KEEP_IN_HISTORY,
                Flags::getNumberOfEpochsToKeepInHistory);
    }

    @Test
    public void testGetForegroundStatuslLevelForValidation() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getForegroundStatuslLevelForValidation())
                .isEqualTo(FOREGROUND_STATUS_LEVEL);

        int phOverridingValue = FOREGROUND_STATUS_LEVEL + 6;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FOREGROUND_STATUS_LEVEL,
                Integer.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getForegroundStatuslLevelForValidation()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetEnforceIsolateMaxHeapSize() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getEnforceIsolateMaxHeapSize())
                .isEqualTo(ENFORCE_ISOLATE_MAX_HEAP_SIZE);

        // Now overriding with the value from PH.
        boolean phOverridingValue = !ENFORCE_ISOLATE_MAX_HEAP_SIZE;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENFORCE_ISOLATE_MAX_HEAP_SIZE,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getEnforceIsolateMaxHeapSize()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetIsolateMaxHeapSizeBytes() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getIsolateMaxHeapSizeBytes()).isEqualTo(ISOLATE_MAX_HEAP_SIZE_BYTES);

        // Now overriding with the value from PH.
        long phOverridingValue = ISOLATE_MAX_HEAP_SIZE_BYTES + 1000;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ISOLATE_MAX_HEAP_SIZE_BYTES,
                Long.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getIsolateMaxHeapSizeBytes()).isEqualTo(phOverridingValue);
    }

    // Troubles between google-java-format and checkstyle
    // CHECKSTYLE:OFF IndentationCheck
    @Test
    public void testGetReportImpressionOverallTimeoutMs() {
        // without any overriding, the value is hard coded constant
        assertThat(mPhFlags.getReportImpressionOverallTimeoutMs())
                .isEqualTo(FLEDGE_REPORT_IMPRESSION_OVERALL_TIMEOUT_MS);

        long phOverridingValue = FLEDGE_REPORT_IMPRESSION_OVERALL_TIMEOUT_MS + 4;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_REPORT_IMPRESSION_OVERALL_TIMEOUT_MS,
                Long.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getReportImpressionOverallTimeoutMs()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetReportImpressionMaxRegisteredAdBeaconsTotalCount() {
        // without any overriding, the value is hard coded constant
        assertThat(
                        FlagsFactory.getFlags()
                                .getFledgeReportImpressionMaxRegisteredAdBeaconsTotalCount())
                .isEqualTo(FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_TOTAL_COUNT);

        long phOverridingValue = FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_TOTAL_COUNT + 4;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_TOTAL_COUNT,
                Long.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getFledgeReportImpressionMaxRegisteredAdBeaconsTotalCount())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeReportImpressionRegisteredAdBeaconsMaxInteractionKeySize_B() {
        // without any overriding, the value is hard coded constant
        assertThat(
                        FlagsFactory.getFlags()
                                .getFledgeReportImpressionRegisteredAdBeaconsMaxInteractionKeySizeB())
                .isEqualTo(
                        FLEDGE_REPORT_IMPRESSION_REGISTERED_AD_BEACONS_MAX_INTERACTION_KEY_SIZE_B);

        long phOverridingValue =
                FLEDGE_REPORT_IMPRESSION_REGISTERED_AD_BEACONS_MAX_INTERACTION_KEY_SIZE_B + 4;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_REPORT_IMPRESSION_REGISTERED_AD_BEACONS_MAX_INTERACTION_KEY_SIZE_B,
                Long.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getFledgeReportImpressionRegisteredAdBeaconsMaxInteractionKeySizeB())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeReportImpressionMaxInteractionReportingUriSizeB() {
        // without any overriding, the value is hard coded constant
        assertThat(
                        FlagsFactory.getFlags()
                                .getFledgeReportImpressionMaxInteractionReportingUriSizeB())
                .isEqualTo(FLEDGE_REPORT_IMPRESSION_MAX_INTERACTION_REPORTING_URI_SIZE_B);

        long phOverridingValue = FLEDGE_REPORT_IMPRESSION_MAX_INTERACTION_REPORTING_URI_SIZE_B + 4;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_REPORT_IMPRESSION_MAX_INTERACTION_REPORTING_URI_SIZE_B,
                Long.toString(phOverridingValue),
                false);

        Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getFledgeReportImpressionMaxInteractionReportingUriSizeB())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeScheduleCustomAudienceUpdateEnabled() {
        // without any overriding, the value is hard coded constant
        assertThat(FlagsFactory.getFlags().getFledgeScheduleCustomAudienceUpdateEnabled())
                .isEqualTo(FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_ENABLED);

        boolean phOverridingValue = !FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_ENABLED,
                Boolean.toString(phOverridingValue),
                false);

        Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getFledgeScheduleCustomAudienceUpdateEnabled())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeScheduleCustomAudienceUpdateJobPeriodMs() {
        // without any overriding, the value is hard coded constant
        assertThat(FlagsFactory.getFlags().getFledgeScheduleCustomAudienceUpdateJobPeriodMs())
                .isEqualTo(FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_PERIOD_MS);

        long phOverridingValue = FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_PERIOD_MS + 4;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_PERIOD_MS,
                Long.toString(phOverridingValue),
                false);

        Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getFledgeScheduleCustomAudienceUpdateJobPeriodMs())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeScheduleCustomAudienceUpdateJobFlexMs() {
        // without any overriding, the value is hard coded constant
        assertThat(FlagsFactory.getFlags().getFledgeScheduleCustomAudienceUpdateJobFlexMs())
                .isEqualTo(FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_FLEX_MS);

        long phOverridingValue = FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_FLEX_MS + 5;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_JOB_FLEX_MS,
                Long.toString(phOverridingValue),
                false);

        Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getFledgeScheduleCustomAudienceUpdateJobFlexMs())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeScheduleCustomAudienceMinDelayMinsOverride() {
        // without any overriding, the value is hard coded constant
        assertThat(FlagsFactory.getFlags().getFledgeScheduleCustomAudienceMinDelayMinsOverride())
                .isEqualTo(FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_MIN_DELAY_MINS_OVERRIDE);

        int phOverridingValue = FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_MIN_DELAY_MINS_OVERRIDE + 6;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_SCHEDULE_CUSTOM_AUDIENCE_UPDATE_MIN_DELAY_MINS_OVERRIDE,
                Integer.toString(phOverridingValue),
                false);

        Flags phFlags = FlagsFactory.getFlags();
        assertThat(phFlags.getFledgeScheduleCustomAudienceMinDelayMinsOverride())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeReportImpressionMaxRegisteredAdBeaconsPerAdTechCount() {
        // without any overriding, the value is hard coded constant
        assertThat(
                        FlagsFactory.getFlags()
                                .getFledgeReportImpressionMaxRegisteredAdBeaconsPerAdTechCount())
                .isEqualTo(FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_PER_AD_TECH_COUNT);

        long phOverridingValue =
                FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_PER_AD_TECH_COUNT + 4;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_REPORT_IMPRESSION_MAX_REGISTERED_AD_BEACONS_PER_AD_TECH_COUNT,
                Long.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getFledgeReportImpressionMaxRegisteredAdBeaconsPerAdTechCount())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testIsDisableTopicsEnrollmentCheck() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.isDisableTopicsEnrollmentCheck())
                .isEqualTo(DISABLE_TOPICS_ENROLLMENT_CHECK);

        boolean phOverridingValue = !DISABLE_TOPICS_ENROLLMENT_CHECK;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_DISABLE_TOPICS_ENROLLMENT_CHECK,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.isDisableTopicsEnrollmentCheck()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetDisableFledgeEnrollmentCheck() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getDisableFledgeEnrollmentCheck())
                .isEqualTo(DISABLE_FLEDGE_ENROLLMENT_CHECK);

        boolean phOverridingValue = !DISABLE_FLEDGE_ENROLLMENT_CHECK;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_DISABLE_FLEDGE_ENROLLMENT_CHECK,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getDisableFledgeEnrollmentCheck()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testIsDisableMeasurementEnrollmentCheck() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.isDisableMeasurementEnrollmentCheck())
                .isEqualTo(DISABLE_MEASUREMENT_ENROLLMENT_CHECK);

        boolean phOverridingValue = !DISABLE_MEASUREMENT_ENROLLMENT_CHECK;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_DISABLE_MEASUREMENT_ENROLLMENT_CHECK,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.isDisableMeasurementEnrollmentCheck()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testIsEnableEnrollmentTestSeed() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.isEnableEnrollmentTestSeed()).isEqualTo(ENABLE_ENROLLMENT_TEST_SEED);

        boolean phOverridingValue = !ENABLE_ENROLLMENT_TEST_SEED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENABLE_ENROLLMENT_TEST_SEED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.isEnableEnrollmentTestSeed()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetEnrollmentMddRecordDeletionEnabled() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getEnrollmentMddRecordDeletionEnabled())
                .isEqualTo(ENROLLMENT_MDD_RECORD_DELETION_ENABLED);

        boolean phOverridingValue = !ENROLLMENT_MDD_RECORD_DELETION_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENROLLMENT_MDD_RECORD_DELETION_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getEnrollmentMddRecordDeletionEnabled()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetEnforceForegroundStatusForTopics() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getEnforceForegroundStatusForTopics())
                .isEqualTo(ENFORCE_FOREGROUND_STATUS_TOPICS);

        // Now overriding with the value from PH.
        boolean phOverridingValue = !ENFORCE_FOREGROUND_STATUS_TOPICS;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENFORCE_FOREGROUND_STATUS_TOPICS,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getEnforceForegroundStatusForTopics()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetEnforceForegroundStatusForSignals() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getEnforceForegroundStatusForSignals())
                .isEqualTo(ENFORCE_FOREGROUND_STATUS_SIGNALS);

        // Now overriding with the value from PH.
        boolean phOverridingValue = !ENFORCE_FOREGROUND_STATUS_SIGNALS;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_ENFORCE_FOREGROUND_STATUS_SIGNALS,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getEnforceForegroundStatusForSignals()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetAdSelectionPrebuiltUriEnabled() {
        assertThat(mPhFlags.getFledgeAdSelectionPrebuiltUriEnabled())
                .isEqualTo(FLEDGE_AD_SELECTION_PREBUILT_URI_ENABLED);

        boolean phOverridingValue = !FLEDGE_AD_SELECTION_PREBUILT_URI_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_AD_SELECTION_PREBUILT_URI_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getFledgeAdSelectionPrebuiltUriEnabled()).isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeAuctionServerPayloadBucketSizes() {
        assertThat(mPhFlags.getFledgeAuctionServerPayloadBucketSizes())
                .isEqualTo(FLEDGE_AUCTION_SERVER_PAYLOAD_BUCKET_SIZES);
        ImmutableList<Integer> phOverridingValue = ImmutableList.of(-2, -3);
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_AUCTION_SERVER_PAYLOAD_BUCKET_SIZES,
                phOverridingValue.stream().map(Object::toString).collect(Collectors.joining(",")),
                /* makeDefault */ false);

        assertThat(mPhFlags.getFledgeAuctionServerPayloadBucketSizes())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeAuctionServerForceContinueWhenOwnerIsNullEnabled() {
        assertThat(mPhFlags.getFledgeAuctionServerForceSearchWhenOwnerIsAbsentEnabled())
                .isEqualTo(FLEDGE_AUCTION_SERVER_FORCE_SEARCH_WHEN_OWNER_IS_ABSENT_ENABLED);

        boolean phOverridingValue =
                !FLEDGE_AUCTION_SERVER_FORCE_SEARCH_WHEN_OWNER_IS_ABSENT_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_AUCTION_SERVER_FORCE_SEARCH_WHEN_OWNER_IS_ABSENT_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getFledgeAuctionServerForceSearchWhenOwnerIsAbsentEnabled())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetFledgeAuctionServerPayloadBucketSizes_invalidFlagString() {
        assertThat(mPhFlags.getFledgeAuctionServerPayloadBucketSizes())
                .isEqualTo(FLEDGE_AUCTION_SERVER_PAYLOAD_BUCKET_SIZES);

        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_AUCTION_SERVER_PAYLOAD_BUCKET_SIZES,
                "Non,sense,list",
                /* makeDefault */ false);

        assertThrows(
                IllegalArgumentException.class, mPhFlags::getFledgeAuctionServerPayloadBucketSizes);
    }

    @Test
    public void testgetFledgeAdselectionExpirationWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_EXPIRATION_WINDOW_S,
                FLEDGE_AD_SELECTION_EXPIRATION_WINDOW_S,
                Flags::getAdSelectionExpirationWindowS);
    }

    @Test
    public void testGetRegistrationJobQueueIntervalMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ASYNC_REGISTRATION_JOB_QUEUE_INTERVAL_MS,
                ASYNC_REGISTRATION_JOB_QUEUE_INTERVAL_MS,
                Flags::getAsyncRegistrationJobQueueIntervalMs);
    }

    @Test
    public void testDump() throws FileNotFoundException {
        // Trigger the dump to verify no crash
        PrintWriter printWriter =
                new PrintWriter(
                        new Writer() {
                            @Override
                            public void write(char[] cbuf, int off, int len) throws IOException {}

                            @Override
                            public void flush() throws IOException {}

                            @Override
                            public void close() throws IOException {}
                        });
        String[] args = new String[] {};
        mPhFlags.dump(printWriter, args);
    }

    @Test
    public void testGetMaxResponseBasedRegistrationPayloadSizeBytes_measurementOverride() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MAX_RESPONSE_BASED_REGISTRATION_SIZE_BYTES,
                MAX_RESPONSE_BASED_REGISTRATION_SIZE_BYTES,
                Flags::getMaxResponseBasedRegistrationPayloadSizeBytes);
    }

    @Test
    public void testGetMaxTriggerRegistrationHeaderSizeBytes_measurementOverride() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MAX_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES,
                MAX_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES,
                Flags::getMaxTriggerRegistrationHeaderSizeBytes);
    }

    @Test
    public void testGetMaxOdpTriggerRegistrationHeaderSizeBytes_measurementOverride() {
        // without any overriding, the value is hard coded constant
        assertThat(mPhFlags.getMaxOdpTriggerRegistrationHeaderSizeBytes())
                .isEqualTo(MAX_ODP_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES);

        long phOverridingValue = MAX_ODP_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES + 5L;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_MAX_ODP_TRIGGER_REGISTRATION_HEADER_SIZE_BYTES,
                Long.toString(phOverridingValue),
                false);

        assertThat(mPhFlags.getMaxOdpTriggerRegistrationHeaderSizeBytes())
                .isEqualTo(phOverridingValue);
    }

    @Test
    public void testGetMeasurementEnableUpdateTriggerHeaderLimit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_UPDATE_TRIGGER_REGISTRATION_HEADER_LIMIT,
                MEASUREMENT_ENABLE_UPDATE_TRIGGER_REGISTRATION_HEADER_LIMIT,
                Flags::getMeasurementEnableUpdateTriggerHeaderLimit);
    }

    @Test
    public void testGetOffDeviceAdSelectionRequestCompressionEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AD_SELECTION_OFF_DEVICE_REQUEST_COMPRESSION_ENABLED,
                FLEDGE_AD_SELECTION_OFF_DEVICE_REQUEST_COMPRESSION_ENABLED,
                Flags::getAdSelectionOffDeviceRequestCompressionEnabled);
    }

    @Test
    public void testFledgeCompressionAlgorithmVersionBits() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_COMPRESSION_ALGORITHM_VERSION,
                FLEDGE_AUCTION_SERVER_COMPRESSION_ALGORITHM_VERSION,
                Flags::getFledgeAuctionServerCompressionAlgorithmVersion);
    }

    @Test
    public void testFledgePayloadFormatVersionBits() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_PAYLOAD_FORMAT_VERSION,
                FLEDGE_AUCTION_SERVER_PAYLOAD_FORMAT_VERSION,
                Flags::getFledgeAuctionServerPayloadFormatVersion);
    }

    @Test
    public void testFledgeAuctionServerEnableDebugReporting() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLE_DEBUG_REPORTING,
                FLEDGE_AUCTION_SERVER_ENABLE_DEBUG_REPORTING,
                Flags::getFledgeAuctionServerEnableDebugReporting);
    }

    @Test
    public void testFledgeAuctionServerEnablePasUnlimitedEgress() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLE_PAS_UNLIMITED_EGRESS,
                DEFAULT_FLEDGE_AUCTION_SERVER_ENABLE_PAS_UNLIMITED_EGRESS,
                Flags::getFledgeAuctionServerEnablePasUnlimitedEgress);
    }

    @Test
    public void testEnrollmentBlocklist_singleEnrollment() {
        String blocklistedEnrollmentId = "enrollmentId1";
        setEnrollmentBlocklist(blocklistedEnrollmentId);

        assertThat(mPhFlags.getEnrollmentBlocklist()).contains(blocklistedEnrollmentId);
    }

    @Test
    public void testEnrollmentBlocklist_multipleEnrollments() {
        String enrollmentId1 = "enrollmentId1";
        String enrollmentId2 = "enrollmentId2";
        String enrollmentId3 = "enrollmentId3";

        String blocklistedEnrollmentId =
                String.format("%s,%s,%s", enrollmentId1, enrollmentId2, enrollmentId3);
        setEnrollmentBlocklist(blocklistedEnrollmentId);

        assertThat(mPhFlags.getEnrollmentBlocklist())
                .containsExactly(enrollmentId1, enrollmentId2, enrollmentId3);
    }

    @Test
    public void testEnrollmentBlocklist_malformedList() {
        String enrollmentId1 = "enrollmentId1";
        String enrollmentId2 = "enrollmentId2";
        String enrollmentId3 = "enrollmentId3";

        String blocklistedEnrollmentId =
                String.format("%s%s%s", enrollmentId1, enrollmentId2, enrollmentId3);
        setEnrollmentBlocklist(blocklistedEnrollmentId);

        assertThat(mPhFlags.getEnrollmentBlocklist())
                .containsNoneOf(enrollmentId1, enrollmentId2, enrollmentId3);
    }

    @Test
    public void testGetEnrollmentEnableLimitedLogging() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENROLLMENT_ENABLE_LIMITED_LOGGING,
                ENROLLMENT_ENABLE_LIMITED_LOGGING,
                Flags::getEnrollmentEnableLimitedLogging);
    }

    @Test
    public void testGetConsentSourceOfTruth() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CONSENT_SOURCE_OF_TRUTH,
                DEFAULT_CONSENT_SOURCE_OF_TRUTH,
                Flags::getConsentSourceOfTruth);
    }

    @Test
    public void testGetBlockedTopicsSourceOfTruth() {
        mFlagsTestHelper.testConfigFlag(
                KEY_BLOCKED_TOPICS_SOURCE_OF_TRUTH,
                DEFAULT_BLOCKED_TOPICS_SOURCE_OF_TRUTH,
                Flags::getBlockedTopicsSourceOfTruth);
    }

    @Test
    public void testGetGlobalBlockedTopicIds() {
        // Without any overriding, the list is empty
        assertThat(mPhFlags.getGlobalBlockedTopicIds()).isEmpty();

        // Valid values passed as part of the PhFlag
        setGlobalBlockedTopicIds("10, 11, 12");
        assertThat(mPhFlags.getGlobalBlockedTopicIds()).isEqualTo(ImmutableList.of(10, 11, 12));

        setGlobalBlockedTopicIds(" 10, 11, 12");
        assertThat(mPhFlags.getGlobalBlockedTopicIds()).isEqualTo(ImmutableList.of(10, 11, 12));

        setGlobalBlockedTopicIds(" ");
        assertThat(mPhFlags.getGlobalBlockedTopicIds()).isEqualTo(ImmutableList.of());

        setGlobalBlockedTopicIds("");
        assertThat(mPhFlags.getGlobalBlockedTopicIds()).isEqualTo(ImmutableList.of());

        // Invalid values passed as part of PhFlag.
        setGlobalBlockedTopicIds("1,a");
        assertThat(mPhFlags.getGlobalBlockedTopicIds()).isEmpty();
    }

    @Test
    public void testGetErrorCodeLoggingDenyList() {
        // Without any overriding, the list is empty
        assertThat(mPhFlags.getErrorCodeLoggingDenyList()).isEmpty();

        // Valid values passed as part of the PhFlag
        setErrorCodeLoggingDenyList("10, 11, 12");
        assertThat(mPhFlags.getErrorCodeLoggingDenyList()).isEqualTo(ImmutableList.of(10, 11, 12));

        setErrorCodeLoggingDenyList(" 10, 11, 12");
        assertThat(mPhFlags.getErrorCodeLoggingDenyList()).isEqualTo(ImmutableList.of(10, 11, 12));

        setErrorCodeLoggingDenyList(" ");
        assertThat(mPhFlags.getErrorCodeLoggingDenyList()).isEqualTo(ImmutableList.of());

        setErrorCodeLoggingDenyList("");
        assertThat(mPhFlags.getErrorCodeLoggingDenyList()).isEqualTo(ImmutableList.of());

        // Invalid values passed as part of PhFlag.
        setErrorCodeLoggingDenyList("1,a, 34");
        assertThat(mPhFlags.getErrorCodeLoggingDenyList()).isEqualTo(ImmutableList.of(1, 34));
    }

    @Test
    public void testGetUiOtaStringsManifestFileUrl() {
        mFlagsTestHelper.testConfigFlag(
                KEY_UI_OTA_STRINGS_MANIFEST_FILE_URL,
                UI_OTA_STRINGS_MANIFEST_FILE_URL,
                Flags::getUiOtaStringsManifestFileUrl);
    }

    @Test
    public void testGetUiOtaResourcesManifestFileUrl() {
        mFlagsTestHelper.testConfigFlag(
                KEY_UI_OTA_RESOURCES_MANIFEST_FILE_URL,
                UI_OTA_RESOURCES_MANIFEST_FILE_URL,
                Flags::getUiOtaResourcesManifestFileUrl);
    }

    @Test
    public void testIsEeaDeviceFeatureEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_IS_EEA_DEVICE_FEATURE_ENABLED,
                IS_EEA_DEVICE_FEATURE_ENABLED,
                Flags::isEeaDeviceFeatureEnabled);
    }

    @Test
    public void testIsEeaDevice() {
        mFlagsTestHelper.testConfigFlag(KEY_IS_EEA_DEVICE, IS_EEA_DEVICE, Flags::isEeaDevice);
    }

    @Test
    public void testIsUiFeatureTypeLoggingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_UI_FEATURE_TYPE_LOGGING_ENABLED,
                UI_FEATURE_TYPE_LOGGING_ENABLED,
                Flags::isUiFeatureTypeLoggingEnabled);
    }

    @Test
    public void testGetUiEeaCountries() {
        mFlagsTestHelper.testConfigFlag(
                KEY_UI_EEA_COUNTRIES, UI_EEA_COUNTRIES, Flags::getUiEeaCountries);
    }

    @Test
    public void testCompatLoggingKillSwitch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_COMPAT_LOGGING_KILL_SWITCH,
                COMPAT_LOGGING_KILL_SWITCH,
                Flags::getCompatLoggingKillSwitch);
    }

    @Test
    public void testBackgroundJobsLoggingKillSwitch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_BACKGROUND_JOBS_LOGGING_KILL_SWITCH,
                BACKGROUND_JOBS_LOGGING_KILL_SWITCH,
                Flags::getBackgroundJobsLoggingKillSwitch);
    }

    @Test
    public void testEnableBackCompat_sdkIsAtleastT_enableBackCompatTrue_isFalse() {
        testEnableBackCompat(
                /* isSdkAtleastT */ true, /* enableBackCompat */ true, /* expected */ false);
    }

    @Test
    public void testEnableBackCompat_sdkIsSMinus_enableBackCompatTrue_isTrue() {
        testEnableBackCompat(
                /* isSdkAtleastT */ false, /* enableBackCompat */ true, /* expected */ true);
    }

    @Test
    public void testEnableBackCompat_sdkIsAtleastT_enableBackCompatFalse_isFalse() {
        testEnableBackCompat(
                /* isSdkAtleastT */ true, /* enableBackCompat */ false, /* expected */ false);
    }

    @Test
    public void testEnableBackCompat_sdkIsSMinus_enableBackCompatFalse_isFalse() {
        testEnableBackCompat(
                /* isSdkAtleastT */ false, /* enableBackCompat */ false, /* expected */ false);
    }

    private void testEnableBackCompat(
            boolean sdkAtleastT, boolean enableBackCompat, boolean expected) {
        mocker.mockIsAtLeastT(sdkAtleastT);
        mockGetAdServicesFlag(KEY_ENABLE_BACK_COMPAT, enableBackCompat);

        assertThat(mPhFlags.getEnableBackCompat()).isEqualTo(expected);
    }

    @Test
    public void testEnableBackCompatAppsearch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_APPSEARCH_CONSENT_DATA,
                ENABLE_APPSEARCH_CONSENT_DATA,
                Flags::getEnableAppsearchConsentData);
    }

    @Test
    public void testOverrideEnableAdExtServiceConsentData() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_ADEXT_SERVICE_CONSENT_DATA,
                ENABLE_ADEXT_SERVICE_CONSENT_DATA,
                Flags::getEnableAdExtServiceConsentData);
    }

    @Test
    public void testOverrideEnableU18AppsearchMigration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_U18_APPSEARCH_MIGRATION,
                DEFAULT_ENABLE_U18_APPSEARCH_MIGRATION,
                Flags::getEnableU18AppsearchMigration);
    }

    @Test
    public void testOverrideEnableMigrationFromAdExtService() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_MIGRATION_FROM_ADEXT_SERVICE,
                ENABLE_MIGRATION_FROM_ADEXT_SERVICE,
                Flags::getEnableMigrationFromAdExtService);
    }

    @Test
    public void testGetRecordManualInteractionEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_RECORD_MANUAL_INTERACTION_ENABLED,
                RECORD_MANUAL_INTERACTION_ENABLED,
                Flags::getRecordManualInteractionEnabled);
    }

    @Test
    public void testNotificationDismissedOnClick() {
        mFlagsTestHelper.testConfigFlag(
                KEY_NOTIFICATION_DISMISSED_ON_CLICK,
                DEFAULT_NOTIFICATION_DISMISSED_ON_CLICK,
                Flags::getNotificationDismissedOnClick);
    }

    @Test
    public void testIsBackCompatActivityFeatureEnabled() {
        mocker.mockIsAtLeastT(false);
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_IS_BACK_COMPACT_ACTIVITY_FEATURE_ENABLED,
                IS_BACK_COMPACT_ACTIVITY_FEATURE_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_ENABLE_BACK_COMPAT, value),
                Flags::isBackCompatActivityFeatureEnabled);
    }

    // CHECKSTYLE:ON IndentationCheck

    @Test
    public void testU18UxEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_U18_UX_ENABLED,
                DEFAULT_U18_UX_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_ENABLE_AD_SERVICES_SYSTEM_API, value),
                Flags::getU18UxEnabled);
    }

    @Test
    public void testRvcPostOtaNotifAgeCheck() {
        mFlagsTestHelper.testConfigFlag(
                KEY_RVC_POST_OTA_NOTIF_AGE_CHECK,
                DEFAULT_RVC_POST_OTA_NOTIF_AGE_CHECK,
                Flags::getRvcPostOtaNotifAgeCheck);
    }

    @Test
    public void testPasUxEnabled_m05_isEeaDeviceOverride() {
        mockGetAdServicesFlag(KEY_IS_EEA_DEVICE_FEATURE_ENABLED, true);
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_PAS_UX_ENABLED,
                DEFAULT_PAS_UX_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_IS_EEA_DEVICE, !value),
                Flags::getPasUxEnabled);
    }

    @Test
    public void testPasUxEnabled_m05_eeaDeviceFeatureOverride() {
        mockGetAdServicesFlag(KEY_IS_EEA_DEVICE, false);
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_PAS_UX_ENABLED,
                DEFAULT_PAS_UX_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_IS_EEA_DEVICE_FEATURE_ENABLED, value),
                Flags::getPasUxEnabled);
    }

    @Test
    public void testPasUxEnabled_isEeaUser_postEeaUpdate() {
        // Without any overriding, the value is the hard coded constant.
        assertThat(mPhFlags.getPasUxEnabled()).isEqualTo(DEFAULT_PAS_UX_ENABLED);
        assertThat(mPhFlags.getEeaPasUxEnabled()).isEqualTo(DEFAULT_EEA_PAS_UX_ENABLED);

        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_IS_EEA_DEVICE_FEATURE_ENABLED,
                Boolean.toString(true),
                /* makeDefault */ false);
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_IS_EEA_DEVICE,
                Boolean.toString(true),
                /* makeDefault */ false);

        boolean phOverridingValue = !DEFAULT_EEA_PAS_UX_ENABLED;
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_EEA_PAS_UX_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getPasUxEnabled()).isEqualTo(true);
        assertThat(mPhFlags.getEeaPasUxEnabled()).isEqualTo(true);
    }

    @Test
    public void testRvcUxEnabled_adServicesSystemApi() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_RVC_UX_ENABLED,
                DEFAULT_RVC_UX_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_ENABLE_AD_SERVICES_SYSTEM_API, value),
                Flags::getEnableRvcUx);
    }

    @Test
    public void testRvcNotificationEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_RVC_POST_OTA_NOTIFICATION_ENABLED,
                DEFAULT_RVC_POST_OTA_NOTIFICATION_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_ENABLE_AD_SERVICES_SYSTEM_API, value),
                Flags::getEnableRvcPostOtaNotification);
    }

    @Test
    public void testDebugUx() {
        mFlagsTestHelper.testConfigFlag(KEY_DEBUG_UX, DEBUG_UX, Flags::getDebugUx);
    }

    @Test
    public void testEnableAdServicesSystemApi() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_AD_SERVICES_SYSTEM_API,
                DEFAULT_ENABLE_AD_SERVICES_SYSTEM_API,
                Flags::getEnableAdServicesSystemApi);
    }

    @Test
    public void testGetMeasurementEnableCoarseEventReportDestinations() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_COARSE_EVENT_REPORT_DESTINATIONS,
                DEFAULT_MEASUREMENT_ENABLE_COARSE_EVENT_REPORT_DESTINATIONS,
                Flags::getMeasurementEnableCoarseEventReportDestinations);
    }

    @Test
    public void testGetMeasurementMaxDistinctWebDestinationsInSourceRegistration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_DISTINCT_WEB_DESTINATIONS_IN_SOURCE_REGISTRATION,
                MEASUREMENT_MAX_DISTINCT_WEB_DESTINATIONS_IN_SOURCE_REGISTRATION,
                Flags::getMeasurementMaxDistinctWebDestinationsInSourceRegistration);
    }

    @Test
    public void testGetMeasurementMaxReportingRegisterSourceExpirationInSeconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS,
                MEASUREMENT_MAX_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS,
                Flags::getMeasurementMaxReportingRegisterSourceExpirationInSeconds);
    }

    @Test
    public void testGetMeasurementMinReportingRegisterSourceExpirationInSeconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MIN_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS,
                MEASUREMENT_MIN_REPORTING_REGISTER_SOURCE_EXPIRATION_IN_SECONDS,
                Flags::getMeasurementMinReportingRegisterSourceExpirationInSeconds);
    }

    @Test
    public void testGetMeasurementMaxInstallAttributionWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_INSTALL_ATTRIBUTION_WINDOW,
                MEASUREMENT_MAX_INSTALL_ATTRIBUTION_WINDOW,
                Flags::getMeasurementMaxInstallAttributionWindow);
    }

    @Test
    public void testGetMeasurementMinInstallAttributionWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MIN_INSTALL_ATTRIBUTION_WINDOW,
                MEASUREMENT_MIN_INSTALL_ATTRIBUTION_WINDOW,
                Flags::getMeasurementMinInstallAttributionWindow);
    }

    @Test
    public void testGetMeasurementMaxPostInstallExclusivityWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_POST_INSTALL_EXCLUSIVITY_WINDOW,
                MEASUREMENT_MAX_POST_INSTALL_EXCLUSIVITY_WINDOW,
                Flags::getMeasurementMaxPostInstallExclusivityWindow);
    }

    @Test
    public void testGetMeasurementMinPostInstallExclusivityWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MIN_POST_INSTALL_EXCLUSIVITY_WINDOW,
                MEASUREMENT_MIN_POST_INSTALL_EXCLUSIVITY_WINDOW,
                Flags::getMeasurementMinPostInstallExclusivityWindow);
    }

    @Test
    public void testGetMeasurementMaxSumOfAggregateValuesPerSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_SUM_OF_AGGREGATE_VALUES_PER_SOURCE,
                MEASUREMENT_MAX_SUM_OF_AGGREGATE_VALUES_PER_SOURCE,
                Flags::getMeasurementMaxSumOfAggregateValuesPerSource);
    }

    @Test
    public void testGetMeasurementRateLimitWindowMilliseconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_RATE_LIMIT_WINDOW_MILLISECONDS,
                MEASUREMENT_RATE_LIMIT_WINDOW_MILLISECONDS,
                Flags::getMeasurementRateLimitWindowMilliseconds);
    }

    @Test
    public void testGetMeasurementMinReportingOriginUpdateWindow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MIN_REPORTING_ORIGIN_UPDATE_WINDOW,
                MEASUREMENT_MIN_REPORTING_ORIGIN_UPDATE_WINDOW,
                Flags::getMeasurementMinReportingOriginUpdateWindow);
    }

    @Test
    public void testGetMeasurementEnablePreinstallCheck() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_PREINSTALL_CHECK,
                MEASUREMENT_ENABLE_PREINSTALL_CHECK,
                Flags::getMeasurementEnablePreinstallCheck);
    }

    @Test
    public void testGetMeasurementEnableAraDeduplicationAlignmentV1() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_ARA_DEDUPLICATION_ALIGNMENT_V1,
                MEASUREMENT_ENABLE_ARA_DEDUPLICATION_ALIGNMENT_V1,
                Flags::getMeasurementEnableAraDeduplicationAlignmentV1);
    }

    @Test
    public void testGetMeasurementEnableSourceDeactivationAfterFiltering() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_SOURCE_DEACTIVATION_AFTER_FILTERING,
                MEASUREMENT_ENABLE_SOURCE_DEACTIVATION_AFTER_FILTERING,
                Flags::getMeasurementEnableSourceDeactivationAfterFiltering);
    }

    @Test
    public void testGetMeasurementEnableScopedAttributionRateLimit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_SCOPED_ATTRIBUTION_RATE_LIMIT,
                MEASUREMENT_ENABLE_SCOPED_ATTRIBUTION_RATE_LIMIT,
                Flags::getMeasurementEnableScopedAttributionRateLimit);
    }

    @Test
    public void testGetMeasurementEnableSharedSourceDebugKey() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_SHARED_SOURCE_DEBUG_KEY,
                MEASUREMENT_ENABLE_SHARED_SOURCE_DEBUG_KEY,
                Flags::getMeasurementEnableSharedSourceDebugKey);
    }

    @Test
    public void testGetMeasurementEnableSharedFilterDataKeysXNA() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_SHARED_FILTER_DATA_KEYS_XNA,
                MEASUREMENT_ENABLE_SHARED_FILTER_DATA_KEYS_XNA,
                Flags::getMeasurementEnableSharedFilterDataKeysXNA);
    }

    @Test
    public void testGetMeasurementVtcConfigurableMaxEventReportsCount() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_VTC_CONFIGURABLE_MAX_EVENT_REPORTS_COUNT,
                DEFAULT_MEASUREMENT_VTC_CONFIGURABLE_MAX_EVENT_REPORTS_COUNT,
                Flags::getMeasurementVtcConfigurableMaxEventReportsCount);
    }

    @Test
    public void testGetMeasurementEnableReportingJobsThrowUnaccountedException() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_UNACCOUNTED_EXCEPTION,
                MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_UNACCOUNTED_EXCEPTION,
                Flags::getMeasurementEnableReportingJobsThrowUnaccountedException);
    }

    @Test
    public void testGetMeasurementEnableReportingJobsThrowJsonException() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_JSON_EXCEPTION,
                MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_JSON_EXCEPTION,
                Flags::getMeasurementEnableReportingJobsThrowJsonException);
    }

    @Test
    public void testGetMeasurementEnableReportDeletionOnUnrecoverableException() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_DELETE_REPORTS_ON_UNRECOVERABLE_EXCEPTION,
                MEASUREMENT_ENABLE_DELETE_REPORTS_ON_UNRECOVERABLE_EXCEPTION,
                Flags::getMeasurementEnableReportDeletionOnUnrecoverableException);
    }

    @Test
    public void testGetMeasurementEnableReportingJobsThrowCryptoException() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_CRYPTO_EXCEPTION,
                MEASUREMENT_ENABLE_REPORTING_JOBS_THROW_JSON_EXCEPTION,
                Flags::getMeasurementEnableReportingJobsThrowCryptoException);
    }

    @Test
    public void testGetMeasurementEnableDatastoreManagerThrowDataStoreException() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_DATASTORE_MANAGER_THROW_DATASTORE_EXCEPTION,
                MEASUREMENT_ENABLE_DATASTORE_MANAGER_THROW_DATASTORE_EXCEPTION,
                Flags::getMeasurementEnableDatastoreManagerThrowDatastoreException);
    }

    @Test
    public void testGetMeasurementThrowUnknownExceptionSamplingRate() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_THROW_UNKNOWN_EXCEPTION_SAMPLING_RATE,
                MEASUREMENT_THROW_UNKNOWN_EXCEPTION_SAMPLING_RATE,
                Flags::getMeasurementThrowUnknownExceptionSamplingRate);
    }

    @Test
    public void testGetMeasurementDeleteUninstalledJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DELETE_UNINSTALLED_JOB_PERSISTED,
                MEASUREMENT_DELETE_UNINSTALLED_JOB_PERSISTED,
                Flags::getMeasurementDeleteUninstalledJobPersisted);
    }

    @Test
    public void testGetMeasurementDeleteUninstalledJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DELETE_UNINSTALLED_JOB_PERIOD_MS,
                MEASUREMENT_DELETE_UNINSTALLED_JOB_PERIOD_MS,
                Flags::getMeasurementDeleteUninstalledJobPeriodMs);
    }

    @Test
    public void testGetMeasurementDeleteExpiredJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DELETE_EXPIRED_JOB_PERSISTED,
                MEASUREMENT_DELETE_EXPIRED_JOB_PERSISTED,
                Flags::getMeasurementDeleteExpiredJobPersisted);
    }

    @Test
    public void testGetMeasurementDeleteExpiredJobRequiresDeviceIdle() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DELETE_EXPIRED_JOB_REQUIRES_DEVICE_IDLE,
                MEASUREMENT_DELETE_EXPIRED_JOB_REQUIRES_DEVICE_IDLE,
                Flags::getMeasurementDeleteExpiredJobRequiresDeviceIdle);
    }

    @Test
    public void testGetMeasurementDeleteExpiredJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DELETE_EXPIRED_JOB_PERIOD_MS,
                MEASUREMENT_DELETE_EXPIRED_JOB_PERIOD_MS,
                Flags::getMeasurementDeleteExpiredJobPeriodMs);
    }

    @Test
    public void testGetMeasurementEventReportingJobRequiredBatteryNotLow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                Flags::getMeasurementEventReportingJobRequiredBatteryNotLow);
    }

    @Test
    public void testGetMeasurementEventReportingJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_EVENT_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementEventReportingJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementEventReportingJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_REPORTING_JOB_PERSISTED,
                MEASUREMENT_EVENT_REPORTING_JOB_PERSISTED,
                Flags::getMeasurementEventReportingJobPersisted);
    }

    @Test
    public void testGetMeasurementEventFallbackReportingJobRequiredBatteryNotLow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                Flags::getMeasurementEventFallbackReportingJobRequiredBatteryNotLow);
    }

    @Test
    public void testGetMeasurementEventFallbackReportingJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementEventFallbackReportingJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementEventFallbackReportingJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERSISTED,
                MEASUREMENT_EVENT_FALLBACK_REPORTING_JOB_PERSISTED,
                Flags::getMeasurementEventFallbackReportingJobPersisted);
    }

    @Test
    public void testGetMeasurementDebugReportingJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementDebugReportingJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementDebugReportingFallbackJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementDebugReportingFallbackJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementDebugReportingFallbackJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED,
                MEASUREMENT_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED,
                Flags::getMeasurementDebugReportingFallbackJobPersisted);
    }

    @Test
    public void testGetMeasurementVerboseDebugReportingJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_VERBOSE_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_VERBOSE_DEBUG_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementVerboseDebugReportingJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementVerboseDebugReportingFallbackJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED,
                MEASUREMENT_VERBOSE_DEBUG_REPORTING_FALLBACK_JOB_PERSISTED,
                Flags::getMeasurementVerboseDebugReportingFallbackJobPersisted);
    }

    @Test
    public void testGetMeasurementAttributionJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ATTRIBUTION_JOB_PERSISTED,
                MEASUREMENT_ATTRIBUTION_JOB_PERSISTED,
                Flags::getMeasurementAttributionJobPersisted);
    }

    @Test
    public void testGetMeasurementAttributionFallbackJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERSISTED,
                MEASUREMENT_ATTRIBUTION_FALLBACK_JOB_PERSISTED,
                Flags::getMeasurementAttributionFallbackJobPersisted);
    }

    @Test
    public void testGetMeasurementAttributionJobTriggeringDelayMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ATTRIBUTION_JOB_TRIGGERING_DELAY_MS,
                MEASUREMENT_ATTRIBUTION_JOB_TRIGGERING_DELAY_MS,
                Flags::getMeasurementAttributionJobTriggeringDelayMs);
    }

    @Test
    public void testGetMeasurementAsyncRegistrationQueueJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementAsyncRegistrationQueueJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementAsyncRegistrationQueueJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_PERSISTED,
                MEASUREMENT_ASYNC_REGISTRATION_QUEUE_JOB_PERSISTED,
                Flags::getMeasurementAsyncRegistrationQueueJobPersisted);
    }

    @Test
    public void testGetMeasurementAsyncRegistrationFallbackJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementAsyncRegistrationFallbackJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementAsyncRegistrationFallbackJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_PERSISTED,
                MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_PERSISTED,
                Flags::getMeasurementAsyncRegistrationFallbackJobPersisted);
    }

    @Test
    public void testGetMeasurementAsyncRegistrationFallbackJobRequiredBatteryNotLow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_BATTERY_NOT_LOW,
                MEASUREMENT_ASYNC_REGISTRATION_FALLBACK_JOB_REQUIRED_BATTERY_NOT_LOW,
                Flags::getMeasurementAsyncRegistrationFallbackJobRequiredBatteryNotLow);
    }

    @Test
    public void testgetMeasurementAggregateReportingJobRequiredBatteryNotLow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                Flags::getMeasurementAggregateReportingJobRequiredBatteryNotLow);
    }

    @Test
    public void testgetMeasurementAggregateReportingJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementAggregateReportingJobRequiredNetworkType);
    }

    @Test
    public void testgetMeasurementAggregateReportingJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_REPORTING_JOB_PERSISTED,
                MEASUREMENT_AGGREGATE_REPORTING_JOB_PERSISTED,
                Flags::getMeasurementAggregateReportingJobPersisted);
    }

    @Test
    public void testGetMeasurementAggregateFallbackReportingJobRequiredBatteryNotLow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                Flags::getMeasurementAggregateFallbackReportingJobRequiredBatteryNotLow);
    }

    @Test
    public void testGetMeasurementAggregateFallbackReportingJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementAggregateFallbackReportingJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementAggregateFallbackReportingJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERSISTED,
                MEASUREMENT_AGGREGATE_FALLBACK_REPORTING_JOB_PERSISTED,
                Flags::getMeasurementAggregateFallbackReportingJobPersisted);
    }

    @Test
    public void testGetMeasurementImmediateAggregateReportingJobRequiredBatteryNotLow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_BATTERY_NOT_LOW,
                Flags::getMeasurementImmediateAggregateReportingJobRequiredBatteryNotLow);
    }

    @Test
    public void testGetMeasurementImmediateAggregateReportingJobRequiredNetworkType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_REQUIRED_NETWORK_TYPE,
                Flags::getMeasurementImmediateAggregateReportingJobRequiredNetworkType);
    }

    @Test
    public void testGetMeasurementImmediateAggregateReportingJobPersisted() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_PERSISTED,
                MEASUREMENT_IMMEDIATE_AGGREGATE_REPORTING_JOB_PERSISTED,
                Flags::getMeasurementImmediateAggregateReportingJobPersisted);
    }

    @Test
    public void testGetFlexibleEventReportingAPIEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEXIBLE_EVENT_REPORTING_API_ENABLED,
                MEASUREMENT_FLEXIBLE_EVENT_REPORTING_API_ENABLED,
                Flags::getMeasurementFlexibleEventReportingApiEnabled);
    }

    @Test
    public void testGetMeasurementEnableTriggerDataMatching() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_TRIGGER_DATA_MATCHING,
                MEASUREMENT_ENABLE_TRIGGER_DATA_MATCHING,
                Flags::getMeasurementEnableTriggerDataMatching);
    }

    @Test
    public void testGetFlexLiteAPIEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_LITE_API_ENABLED,
                MEASUREMENT_FLEX_LITE_API_ENABLED,
                Flags::getMeasurementFlexLiteApiEnabled);
    }

    @Test
    public void testGetMeasurementFlexApiMaxInformationGainEvent() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_EVENT,
                MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_EVENT,
                Flags::getMeasurementFlexApiMaxInformationGainEvent);
    }

    @Test
    public void testGetMeasurementFlexApiMaxInformationGainNavigation() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_NAVIGATION,
                MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_NAVIGATION,
                Flags::getMeasurementFlexApiMaxInformationGainNavigation);
    }

    @Test
    public void testGetMeasurementFlexApiMaxInformationGainDualDestinationEvent() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_EVENT,
                MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_EVENT,
                Flags::getMeasurementFlexApiMaxInformationGainDualDestinationEvent);
    }

    @Test
    public void testGetMeasurementFlexApiMaxInformationGainDualDestinationNavigation() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_NAVIGATION,
                MEASUREMENT_FLEX_API_MAX_INFORMATION_GAIN_DUAL_DESTINATION_NAVIGATION,
                Flags::getMeasurementFlexApiMaxInformationGainDualDestinationNavigation);
    }

    @Test
    public void testGetMeasurementMaxReportStatesPerSourceRegistration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_REPORT_STATES_PER_SOURCE_REGISTRATION,
                MEASUREMENT_MAX_REPORT_STATES_PER_SOURCE_REGISTRATION,
                Flags::getMeasurementMaxReportStatesPerSourceRegistration);
    }

    @Test
    public void testGetMeasurementFlexApiMaxEventReports() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_API_MAX_EVENT_REPORTS,
                MEASUREMENT_FLEX_API_MAX_EVENT_REPORTS,
                Flags::getMeasurementFlexApiMaxEventReports);
    }

    @Test
    public void testGetMeasurementFlexApiMaxEventReportWindows() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_API_MAX_EVENT_REPORT_WINDOWS,
                MEASUREMENT_FLEX_API_MAX_EVENT_REPORT_WINDOWS,
                Flags::getMeasurementFlexApiMaxEventReportWindows);
    }

    @Test
    public void testGetMeasurementFlexApiMaxTriggerDataCardinality() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_FLEX_API_MAX_TRIGGER_DATA_CARDINALITY,
                MEASUREMENT_FLEX_API_MAX_TRIGGER_DATA_CARDINALITY,
                Flags::getMeasurementFlexApiMaxTriggerDataCardinality);
    }

    @Test
    public void testGetMeasurementMinimumEventReportWindowInSeconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MINIMUM_EVENT_REPORT_WINDOW_IN_SECONDS,
                MEASUREMENT_MINIMUM_EVENT_REPORT_WINDOW_IN_SECONDS,
                Flags::getMeasurementMinimumEventReportWindowInSeconds);
    }

    @Test
    public void testGetMeasurementMinimumAggregatableReportWindowInSeconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MINIMUM_AGGREGATABLE_REPORT_WINDOW_IN_SECONDS,
                MEASUREMENT_MINIMUM_AGGREGATABLE_REPORT_WINDOW_IN_SECONDS,
                Flags::getMeasurementMinimumAggregatableReportWindowInSeconds);
    }

    @Test
    public void testFledgeAuctionServerAuctionKeyFetchUri() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_URI,
                FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_URI,
                Flags::getFledgeAuctionServerAuctionKeyFetchUri);
    }

    @Test
    public void testFledgeAuctionServerRefreshExpiredKeysDuringAuction() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_REFRESH_EXPIRED_KEYS_DURING_AUCTION,
                FLEDGE_AUCTION_SERVER_REFRESH_EXPIRED_KEYS_DURING_AUCTION,
                Flags::getFledgeAuctionServerRefreshExpiredKeysDuringAuction);
    }

    @Test
    public void testFledgeAuctionServerEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLED,
                FLEDGE_AUCTION_SERVER_ENABLED,
                Flags::getFledgeAuctionServerEnabled);
    }

    @Test
    public void testGetFledgeAuctionServerOmitAdsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_OMIT_ADS_ENABLED,
                FLEDGE_AUCTION_SERVER_OMIT_ADS_ENABLED,
                Flags::getFledgeAuctionServerOmitAdsEnabled);
    }

    @Test
    public void testGetFledgeAuctionServerMultiCloudEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_MULTI_CLOUD_ENABLED,
                FLEDGE_AUCTION_SERVER_MULTI_CLOUD_ENABLED,
                Flags::getFledgeAuctionServerMultiCloudEnabled);
    }

    @Test
    public void testGetFledgeAuctionServerConsentedDebuggingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_CONSENTED_DEBUGGING_ENABLED,
                FLEDGE_AUCTION_SERVER_CONSENTED_DEBUGGING_ENABLED,
                Flags::getFledgeAuctionServerConsentedDebuggingEnabled);
    }

    @Test
    public void testGetFledgeAuctionServerCoordinatorUrlAllowlist() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_COORDINATOR_URL_ALLOWLIST,
                FLEDGE_AUCTION_SERVER_COORDINATOR_URL_ALLOWLIST,
                Flags::getFledgeAuctionServerCoordinatorUrlAllowlist);
    }

    @Test
    public void testGetFledgeAuctionServerRequestFlagsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_REQUEST_FLAGS_ENABLED,
                FLEDGE_AUCTION_SERVER_REQUEST_FLAGS_ENABLED,
                Flags::getFledgeAuctionServerRequestFlagsEnabled);
    }

    @Test
    public void testFledgeAuctionServerEnabledForReportImpression() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_IMPRESSION,
                FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_IMPRESSION,
                FeatureFlagType.FEATURE_FLAG,
                value -> setAuctionServerBaseFlag(value),
                Flags::getFledgeAuctionServerEnabledForReportImpression);
    }

    @Test
    public void testFledgeAuctionServerEnabledForReportEvent() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_EVENT,
                FLEDGE_AUCTION_SERVER_ENABLED_FOR_REPORT_EVENT,
                FeatureFlagType.FEATURE_FLAG,
                value -> setAuctionServerBaseFlag(value),
                Flags::getFledgeAuctionServerEnabledForReportEvent);
    }

    @Test
    public void testFledgeAuctionServerEnabledForUpdateHistogram() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_UPDATE_HISTOGRAM,
                FLEDGE_AUCTION_SERVER_ENABLED_FOR_UPDATE_HISTOGRAM,
                FeatureFlagType.FEATURE_FLAG,
                value -> setAuctionServerBaseFlag(value),
                Flags::getFledgeAuctionServerEnabledForUpdateHistogram);
    }

    @Test
    public void testFledgeAuctionServerEnabledForSelectAdsMediation() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLED_FOR_SELECT_ADS_MEDIATION,
                FLEDGE_AUCTION_SERVER_ENABLED_FOR_SELECT_ADS_MEDIATION,
                FeatureFlagType.FEATURE_FLAG,
                value -> setAuctionServerBaseFlag(value),
                Flags::getFledgeAuctionServerEnabledForSelectAdsMediation);
    }

    @Test
    public void testFledgeAuctionServerEnableAdFilteringInGetAdSelectionData() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENABLE_AD_FILTER_IN_GET_AD_SELECTION_DATA,
                FLEDGE_AUCTION_SERVER_ENABLE_AD_FILTER_IN_GET_AD_SELECTION_DATA,
                Flags::getFledgeAuctionServerEnableAdFilterInGetAdSelectionData);
    }

    @Test
    public void testFledgeAuctionServerMediaTypeChangeEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_MEDIA_TYPE_CHANGE_ENABLED,
                FLEDGE_AUCTION_SERVER_MEDIA_TYPE_CHANGE_ENABLED,
                Flags::getFledgeAuctionServerMediaTypeChangeEnabled);
    }

    @Test
    public void testFledgeAuctionServerJoinKeyFetchUri() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_JOIN_KEY_FETCH_URI,
                FLEDGE_AUCTION_SERVER_JOIN_KEY_FETCH_URI,
                Flags::getFledgeAuctionServerJoinKeyFetchUri);
    }

    @Test
    public void testFledgeAuctionServerAuctionKeySharding() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_AUCTION_KEY_SHARDING,
                FLEDGE_AUCTION_SERVER_AUCTION_KEY_SHARDING,
                Flags::getFledgeAuctionServerAuctionKeySharding);
    }

    @Test
    public void testFledgeAuctionServerEncryptionKeyAgeMaxSeconds() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_KEY_MAX_AGE_SECONDS,
                FLEDGE_AUCTION_SERVER_ENCRYPTION_KEY_MAX_AGE_SECONDS,
                Flags::getFledgeAuctionServerEncryptionKeyMaxAgeSeconds);
    }

    @Test
    public void testFledgeAuctionServerEncryptionKemId() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KEM_ID,
                FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KEM_ID,
                Flags::getFledgeAuctionServerEncryptionAlgorithmKemId);
    }

    @Test
    public void testFledgeAuctionServerEncryptionKdfId() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KDF_ID,
                FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_KDF_ID,
                Flags::getFledgeAuctionServerEncryptionAlgorithmKdfId);
    }

    @Test
    public void testFledgeAuctionServerEncryptionAeadId() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_AEAD_ID,
                FLEDGE_AUCTION_SERVER_ENCRYPTION_ALGORITHM_AEAD_ID,
                Flags::getFledgeAuctionServerEncryptionAlgorithmAeadId);
    }

    @Test
    public void testGetAdServicesConsentMigration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ADSERVICES_CONSENT_MIGRATION_LOGGING_ENABLED,
                DEFAULT_ADSERVICES_CONSENT_MIGRATION_LOGGING_ENABLED,
                Flags::getAdservicesConsentMigrationLoggingEnabled);
    }

    @Test
    public void testEnableFledgeAuctionServerKeyFetch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_ENABLED,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_ENABLED,
                Flags::getFledgeAuctionServerBackgroundKeyFetchJobEnabled);
    }

    @Test
    public void testEnableFledgeAuctionServerAuctionKeyFetch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_AUCTION_KEY_FETCH_ENABLED,
                FLEDGE_AUCTION_SERVER_BACKGROUND_AUCTION_KEY_FETCH_ENABLED,
                Flags::getFledgeAuctionServerBackgroundAuctionKeyFetchEnabled);
    }

    @Test
    public void testEnableFledgeAuctionServerJoinKeyFetch() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_JOIN_KEY_FETCH_ENABLED,
                FLEDGE_AUCTION_SERVER_BACKGROUND_JOIN_KEY_FETCH_ENABLED,
                Flags::getFledgeAuctionServerBackgroundJoinKeyFetchEnabled);
    }

    @Test
    public void testFledgeAuctionServerKeyFetchNetworkConnectTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_NETWORK_CONNECT_TIMEOUT_MS,
                FLEDGE_BACKGROUND_FETCH_NETWORK_CONNECT_TIMEOUT_MS,
                Flags::getFledgeBackgroundFetchNetworkConnectTimeoutMs);
    }

    @Test
    public void testFledgeAuctionServerKeyFetchNetworkReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_BACKGROUND_FETCH_NETWORK_READ_TIMEOUT_MS,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_NETWORK_READ_TIMEOUT_MS,
                Flags::getFledgeBackgroundFetchNetworkReadTimeoutMs);
    }

    @Test
    public void testFledgeAuctionServerKeyFetchMaxResponseSize() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RESPONSE_SIZE_B,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RESPONSE_SIZE_B,
                Flags::getFledgeAuctionServerBackgroundKeyFetchMaxResponseSizeB);
    }

    @Test
    public void testFledgeAuctionServerKeyFetchMaxRuntimeMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RUNTIME_MS,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_MAX_RUNTIME_MS,
                Flags::getFledgeAuctionServerBackgroundKeyFetchJobMaxRuntimeMs);
    }

    @Test
    public void testFledgeAuctionServerKeyFetchJobFlexMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_FLEX_MS,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_FLEX_MS,
                Flags::getFledgeAuctionServerBackgroundKeyFetchJobFlexMs);
    }

    @Test
    public void testFledgeAuctionServerKeyFetchJobPeriodMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_PERIOD_MS,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_JOB_PERIOD_MS,
                Flags::getFledgeAuctionServerBackgroundKeyFetchJobPeriodMs);
    }

    @Test
    public void testFledgeAuctionServerAuctionKeyFetchTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_TIMEOUT_MS,
                FLEDGE_AUCTION_SERVER_AUCTION_KEY_FETCH_TIMEOUT_MS,
                Flags::getFledgeAuctionServerAuctionKeyFetchTimeoutMs);
    }

    @Test
    public void testEnableFledgeAuctionServerBackgroundKeyFetchOnEmptyDbAndInAdvanceEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_ON_EMPTY_DB_AND_IN_ADVANCE_ENABLED,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_ON_EMPTY_DB_AND_IN_ADVANCE_ENABLED,
                Flags::getFledgeAuctionServerBackgroundKeyFetchOnEmptyDbAndInAdvanceEnabled);
    }

    @Test
    public void testFledgeAuctionServerBackgroundKeyFetchInAdvanceIntervalMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_IN_ADVANCE_INTERVAL_MS,
                FLEDGE_AUCTION_SERVER_BACKGROUND_KEY_FETCH_IN_ADVANCE_INTERVAL_MS,
                Flags::getFledgeAuctionServerBackgroundKeyFetchInAdvanceIntervalMs);
    }

    @Test
    public void testFledgeAuctionServerOverallTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_OVERALL_TIMEOUT_MS,
                FLEDGE_AUCTION_SERVER_OVERALL_TIMEOUT_MS,
                Flags::getFledgeAuctionServerOverallTimeoutMs);
    }

    @Test
    public void testGetFledgeAuctionServerGetAdSelectionDataPayloadMetricsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_AUCTION_SERVER_GET_AD_SELECTION_DATA_PAYLOAD_METRICS_ENABLED,
                FLEDGE_AUCTION_SERVER_GET_AD_SELECTION_DATA_PAYLOAD_METRICS_ENABLED,
                Flags::getFledgeAuctionServerGetAdSelectionDataPayloadMetricsEnabled);
    }

    @Test
    public void testConsentAlreadyInteractedFix() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CONSENT_ALREADY_INTERACTED_FIX_ENABLE,
                CONSENT_ALREADY_INTERACTED_FIX_ENABLE,
                Flags::getConsentAlreadyInteractedEnableMode);
    }

    @Test
    public void testU18UxDetentionChannel() {
        mFlagsTestHelper.testConfigFlag(
                KEY_IS_U18_UX_DETENTION_CHANNEL_ENABLED,
                IS_U18_UX_DETENTION_CHANNEL_ENABLED_DEFAULT,
                Flags::isU18UxDetentionChannelEnabled);
    }

    @Test
    public void testConsentNotificationResetToken() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CONSENT_NOTIFICATION_RESET_TOKEN,
                CONSENT_NOTIFICATION_RESET_TOKEN,
                Flags::getConsentNotificationResetToken);
    }

    @Test
    public void testGetEnableLoggedTopic() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_LOGGED_TOPIC, ENABLE_LOGGED_TOPIC, Flags::getEnableLoggedTopic);
    }

    @Test
    public void testGetEnableDatabaseSchemaVersion8() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_DATABASE_SCHEMA_VERSION_8,
                ENABLE_DATABASE_SCHEMA_VERSION_8,
                Flags::getEnableDatabaseSchemaVersion8);
    }

    @Test
    public void testGetEnableDatabaseSchemaVersion9() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_DATABASE_SCHEMA_VERSION_9,
                ENABLE_DATABASE_SCHEMA_VERSION_9,
                Flags::getEnableDatabaseSchemaVersion9);
    }

    @Test
    public void testGetMsmtEnableApiStatusAllowListCheck() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_API_STATUS_ALLOW_LIST_CHECK,
                MEASUREMENT_ENABLE_API_STATUS_ALLOW_LIST_CHECK,
                Flags::getMsmtEnableApiStatusAllowListCheck);
    }

    @Test
    public void testGetMeasurementEnableRedirectToWellKnownPath() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_REDIRECT_TO_WELL_KNOWN_PATH,
                MEASUREMENT_ENABLE_REDIRECT_TO_WELL_KNOWN_PATH,
                Flags::getMeasurementEnableRedirectToWellKnownPath);
    }

    @Test
    public void testGetMeasurementEnableMaxAggregateReportsPerSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_MAX_AGGREGATE_REPORTS_PER_SOURCE,
                MEASUREMENT_ENABLE_MAX_AGGREGATE_REPORTS_PER_SOURCE,
                Flags::getMeasurementEnableMaxAggregateReportsPerSource);
    }

    @Test
    public void testGetMeasurementMaxAggregateReportsPerSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_SOURCE,
                MEASUREMENT_MAX_AGGREGATE_REPORTS_PER_SOURCE,
                Flags::getMeasurementMaxAggregateReportsPerSource);
    }

    @Test
    public void testGetMeasurementRegisterInteractionApiEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_ENABLED,
                FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_ENABLED,
                Flags::getFledgeMeasurementReportAndRegisterEventApiEnabled);
    }

    @Test
    public void testGetMeasurementRegisterInteractionApiFallbackEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_FALLBACK_ENABLED,
                FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_FALLBACK_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value ->
                        mockGetAdServicesFlag(
                                KEY_FLEDGE_MEASUREMENT_REPORT_AND_REGISTER_EVENT_API_ENABLED,
                                value),
                Flags::getFledgeMeasurementReportAndRegisterEventApiFallbackEnabled);
    }

    @Test
    public void testGetMeasurementEnableAppPackageNameLogging() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_APP_PACKAGE_NAME_LOGGING,
                MEASUREMENT_ENABLE_APP_PACKAGE_NAME_LOGGING,
                Flags::getMeasurementEnableAppPackageNameLogging);
    }

    @Test
    public void testGetMeasurementAppPackageNameLoggingAllowlist() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_APP_PACKAGE_NAME_LOGGING_ALLOWLIST,
                MEASUREMENT_APP_PACKAGE_NAME_LOGGING_ALLOWLIST,
                Flags::getMeasurementAppPackageNameLoggingAllowlist);
    }

    @Test
    public void testU18SupervisedAccountEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_IS_U18_SUPERVISED_ACCOUNT_ENABLED,
                IS_U18_SUPERVISED_ACCOUNT_ENABLED_DEFAULT,
                Flags::isU18SupervisedAccountEnabled);
    }

    @Test
    public void testGetAdIdCacheEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_AD_ID_CACHE_ENABLED, DEFAULT_ADID_CACHE_ENABLED, Flags::getAdIdCacheEnabled);
    }

    @Test
    public void testGetAdIdFetcherTimeout() {
        mFlagsTestHelper.testConfigFlag(
                KEY_AD_ID_FETCHER_TIMEOUT_MS,
                DEFAULT_AD_ID_FETCHER_TIMEOUT_MS,
                Flags::getAdIdFetcherTimeoutMs);
    }

    @Test
    public void testGetEnableAdExtDataServiceApis() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_ADEXT_DATA_SERVICE_APIS,
                DEFAULT_ENABLE_ADEXT_DATA_SERVICE_APIS,
                Flags::getEnableAdExtDataServiceApis);
    }

    @Test
    public void testGetEnableAdExtServiceProxy() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_ADEXT_DATA_SERVICE_DEBUG_PROXY,
                DEFAULT_ENABLE_ADEXT_SERVICE_DEBUG_PROXY,
                Flags::getEnableAdExtServiceDebugProxy);
    }

    @Test
    public void testGetMeasurementNullAggregateReportEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_NULL_AGGREGATE_REPORT_ENABLED,
                MEASUREMENT_NULL_AGGREGATE_REPORT_ENABLED,
                Flags::getMeasurementNullAggregateReportEnabled);
    }

    @Test
    public void testGetMeasurementNullAggregateReportRateIncludingSourceRegistrationTime() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_NULL_AGG_REPORT_RATE_INCL_SOURCE_REGISTRATION_TIME,
                MEASUREMENT_NULL_AGG_REPORT_RATE_INCL_SOURCE_REGISTRATION_TIME,
                Flags::getMeasurementNullAggReportRateInclSourceRegistrationTime);
    }

    @Test
    public void testGetMeasurementNullAggregateReportRateExcludingSourceRegistrationTime() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_NULL_AGG_REPORT_RATE_EXCL_SOURCE_REGISTRATION_TIME,
                MEASUREMENT_NULL_AGG_REPORT_RATE_EXCL_SOURCE_REGISTRATION_TIME,
                Flags::getMeasurementNullAggReportRateExclSourceRegistrationTime);
    }

    @Test
    public void testGetMeasurementSourceRegistrationTimeOptionalForAggReportsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_SOURCE_REGISTRATION_TIME_OPTIONAL_FOR_AGG_REPORTS_ENABLED,
                MEASUREMENT_SOURCE_REGISTRATION_TIME_OPTIONAL_FOR_AGG_REPORTS_ENABLED,
                Flags::getMeasurementSourceRegistrationTimeOptionalForAggReportsEnabled);
    }

    @Test
    public void testGetMeasurementEnableSessionStableKillSwitches() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_SESSION_STABLE_KILL_SWITCHES,
                MEASUREMENT_ENABLE_SESSION_STABLE_KILL_SWITCHES,
                Flags::getMeasurementEnableSessionStableKillSwitches);
    }

    @Test
    public void testGetMeasurementEnableAttributionScope() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_MEASUREMENT_ENABLE_ATTRIBUTION_SCOPE,
                MEASUREMENT_ENABLE_ATTRIBUTION_SCOPE,
                FeatureFlagType.FEATURE_FLAG,
                value -> mockGetAdServicesFlag(KEY_MEASUREMENT_FLEX_LITE_API_ENABLED, value),
                Flags::getMeasurementEnableAttributionScope);
    }

    @Test
    public void testGetMeasurementEnableNavigationReportingOriginCheck() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_NAVIGATION_REPORTING_ORIGIN_CHECK,
                MEASUREMENT_ENABLE_NAVIGATION_REPORTING_ORIGIN_CHECK,
                Flags::getMeasurementEnableNavigationReportingOriginCheck);
    }

    @Test
    public void testGetMeasurementEnableSeparateReportTypesForAttributionRateLimit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_SEPARATE_REPORT_TYPES_FOR_ATTRIBUTION_RATE_LIMIT,
                MEASUREMENT_ENABLE_SEPARATE_REPORT_TYPES_FOR_ATTRIBUTION_RATE_LIMIT,
                Flags::getMeasurementEnableSeparateReportTypesForAttributionRateLimit);
    }

    @Test
    public void testGetMeasurementMaxAttributionScopesPerSource() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_ATTRIBUTION_SCOPES_PER_SOURCE,
                MEASUREMENT_MAX_ATTRIBUTION_SCOPES_PER_SOURCE,
                Flags::getMeasurementMaxAttributionScopesPerSource);
    }

    @Test
    public void testGetMeasurementMaxAttributionScopeLength() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_ATTRIBUTION_SCOPE_LENGTH,
                MEASUREMENT_MAX_ATTRIBUTION_SCOPE_LENGTH,
                Flags::getMeasurementMaxAttributionScopeLength);
    }

    @Test
    public void testGetMeasurementEnableTriggerContextId() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_TRIGGER_CONTEXT_ID,
                MEASUREMENT_ENABLE_TRIGGER_CONTEXT_ID,
                Flags::getMeasurementEnableTriggerContextId);
    }

    @Test
    public void testGetMeasurementMaxLengthOfTriggerContextId() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_MAX_LENGTH_OF_TRIGGER_CONTEXT_ID,
                MEASUREMENT_MAX_LENGTH_OF_TRIGGER_CONTEXT_ID,
                Flags::getMeasurementMaxLengthOfTriggerContextId);
    }

    @Test
    public void testGetMeasurementEnableOdpRegistration() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_ENABLE_ODP_WEB_TRIGGER_REGISTRATION,
                MEASUREMENT_ENABLE_ODP_WEB_TRIGGER_REGISTRATION,
                Flags::getMeasurementEnableOdpWebTriggerRegistration);
    }

    @Test
    public void testGetMeasurementPrivacyEpsilon() {
        mFlagsTestHelper.testConfigFlag(
                KEY_MEASUREMENT_EVENT_API_DEFAULT_EPSILON,
                DEFAULT_MEASUREMENT_PRIVACY_EPSILON,
                Flags::getMeasurementPrivacyEpsilon);
    }

    @Test
    public void testGetEnableAdservicesApiEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_ADSERVICES_API_ENABLED,
                DEFAULT_ENABLE_ADSERVICES_API_ENABLED,
                Flags::getEnableAdservicesApiEnabled);
    }

    @Test
    public void testGetAdservicesEnablementCheckEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ADSERVICES_ENABLEMENT_CHECK_ENABLED,
                DEFAULT_ADSERVICES_ENABLEMENT_CHECK_ENABLED,
                Flags::getAdservicesEnablementCheckEnabled);
    }

    @Test
    public void testGetBackgroundJobSamplingLoggingRate() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_BACKGROUND_JOB_SAMPLING_LOGGING_RATE,
                DEFAULT_BACKGROUND_JOB_SAMPLING_LOGGING_RATE,
                Flags::getBackgroundJobSamplingLoggingRate);

        // Need to test for illegal value > 100.
        mFlagsTestHelper.testFeatureFlagForIllegalValue(
                KEY_BACKGROUND_JOB_SAMPLING_LOGGING_RATE,
                Flags::getBackgroundJobSamplingLoggingRate,
                /* illegalValue= */ 105);
    }

    @Test
    public void testGetAppSearchWriteTimeout() {
        mFlagsTestHelper.testConfigFlag(
                KEY_APPSEARCH_WRITE_TIMEOUT_MS,
                DEFAULT_APPSEARCH_WRITE_TIMEOUT_MS,
                Flags::getAppSearchWriteTimeout);
    }

    @Test
    public void testGetAppSearchReadTimeout() {
        mFlagsTestHelper.testConfigFlag(
                KEY_APPSEARCH_READ_TIMEOUT_MS,
                DEFAULT_APPSEARCH_READ_TIMEOUT_MS,
                Flags::getAppSearchReadTimeout);
    }

    @Test
    public void testGetAdExtWriteTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ADEXT_WRITE_TIMEOUT_MS,
                DEFAULT_ADEXT_WRITE_TIMEOUT_MS,
                Flags::getAdExtWriteTimeoutMs);
    }

    @Test
    public void testGetAdExtReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ADEXT_READ_TIMEOUT_MS,
                DEFAULT_ADEXT_READ_TIMEOUT_MS,
                Flags::getAdExtReadTimeoutMs);
    }

    @Test
    public void testIsGetAdServicesCommonStatesApiEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_IS_GET_ADSERVICES_COMMON_STATES_API_ENABLED,
                DEFAULT_IS_GET_ADSERVICES_COMMON_STATES_API_ENABLED,
                Flags::isGetAdServicesCommonStatesApiEnabled);
    }

    @Test
    public void testKAnonSignJoinFeatureFlag() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_ENABLE_KANON_SIGN_JOIN_FEATURE,
                FLEDGE_DEFAULT_KANON_SIGN_JOIN_FEATURE_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> setFledgeAuctionServerEnabled(value),
                Flags::getFledgeKAnonSignJoinFeatureEnabled);
    }

    @Test
    public void testKAnonSignJoinOnDeviceFlag() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_ENABLE_KANON_ON_DEVICE_AUCTION_FEATURE,
                FLEDGE_DEFAULT_KANON_FEATURE_ON_DEVICE_AUCTION_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> {
                    setFledgeAuctionServerEnabled(value);
                    mockGetAdServicesFlag(KEY_FLEDGE_ENABLE_KANON_SIGN_JOIN_FEATURE, value);
                },
                Flags::getFledgeKAnonSignJoinFeatureOnDeviceAuctionEnabled);
    }

    @Test
    public void testKAnonSignJoinAuctionServerFlag() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_ENABLE_KANON_AUCTION_SERVER_FEATURE,
                FLEDGE_DEFAULT_KANON_FEATURE_AUCTION_SERVER_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> {
                    setFledgeAuctionServerEnabled(value);
                    mockGetAdServicesFlag(KEY_FLEDGE_ENABLE_KANON_SIGN_JOIN_FEATURE, value);
                },
                Flags::getFledgeKAnonSignJoinFeatureAuctionServerEnabled);
    }

    @Test
    public void testKAnonFetchServerParameterUrlFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_KANON_FETCH_PARAMETERS_URL,
                FLEDGE_DEFAULT_KANON_FETCH_SERVER_PARAMS_URL,
                Flags::getFledgeKAnonFetchServerParamsUrl);
    }

    @Test
    public void testKAnonRegisterClientParametersParameterUrlFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_REGISTER_CLIENT_PARAMETERS_URL,
                FLEDGE_DEFAULT_KANON_REGISTER_CLIENT_PARAMETERS_URL,
                Flags::getFledgeKAnonRegisterClientParametersUrl);
    }

    @Test
    public void testKAnonGetTokensUrl() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_GET_TOKENS_URL,
                FLEDGE_DEFAULT_KANON_GET_TOKENS_URL,
                Flags::getFledgeKAnonGetTokensUrl);
    }

    @Test
    public void testKAnonJoinUrl() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_JOIN_URL,
                FLEDGE_DEFAULT_KANON_JOIN_URL,
                Flags::getFledgeKAnonJoinUrl);
    }

    @Test
    public void testKAnonBackgroundProcessTimePeriodFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_BACKGROUND_TIME_PERIOD_IN_MS,
                FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_TIME_PERIOD_MS,
                Flags::getFledgeKAnonBackgroundProcessTimePeriodInMs);
    }

    @Test
    public void testKAnonMessagesPerBackgroundProcessFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_NUMBER_OF_MESSAGES_PER_BACKGROUND_PROCESS,
                FLEDGE_DEFAULT_KANON_NUMBER_OF_MESSAGES_PER_BACKGROUND_PROCESS,
                Flags::getFledgeKAnonMessagesPerBackgroundProcess);
    }

    @Test
    public void testFledgeKAnonSetTypeToSignJoinFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_SET_TYPE_TO_SIGN_JOIN,
                FLEDGE_DEFAULT_KANON_SET_TYPE_TO_SIGN_JOIN,
                Flags::getFledgeKAnonSetTypeToSignJoin);
    }

    @Test
    public void testFledgeKAnonUrlAuthorityToJoin() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_JOIN_URL_AUTHORIY,
                FLEDGE_DEFAULT_KANON_AUTHORIY_URL_JOIN,
                Flags::getFledgeKAnonUrlAuthorityToJoin);
    }

    @Test
    public void testFledgeKAnonBackgroundJobRequiresBatteryNotLow() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_BACKGROUND_JOB_REQUIRES_BATTERY_NOT_LOW,
                FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_REQUIRES_BATTERY_NOT_LOW,
                Flags::getFledgeKAnonBackgroundJobRequiresBatteryNotLow);
    }

    @Test
    public void testFledgeKAnonBackgroundJobRequiresDeviceIdle() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_BACKGROUND_JOB_REQUIRES_DEVICE_IDLE,
                FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_REQUIRES_DEVICE_IDLE,
                Flags::getFledgeKAnonBackgroundJobRequiresDeviceIdle);
    }

    @Test
    public void testFledgeKAnonBackgroundJobConnectionType() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_BACKGROUND_JOB_TYPE_OF_CONNECTION,
                FLEDGE_DEFAULT_KANON_BACKGROUND_JOB_CONNECTION_TYPE,
                Flags::getFledgeKanonBackgroundJobConnectionType);
    }

    @Test
    public void testFledgeKAnonHttpClientTimeout() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_HTTP_CLIENT_TIMEOUT,
                FLEDGE_DEFAULT_KANON_HTTP_CLIENT_TIMEOUT_IN_MS,
                Flags::getFledgeKanonHttpClientTimeoutInMs);
    }

    @Test
    public void testKAnonBackgroundProcessEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_KANON_BACKGROUND_PROCESS_ENABLED,
                FLEDGE_DEFAULT_KANON_BACKGROUND_PROCESS_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> {
                    setFledgeAuctionServerEnabled(value);
                    mockGetAdServicesFlag(KEY_FLEDGE_ENABLE_KANON_SIGN_JOIN_FEATURE, value);
                },
                Flags::getFledgeKAnonBackgroundProcessEnabled);
    }

    @Test
    public void testKAnonSignJoinLoggingEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_KANON_SIGN_JOIN_LOGGING_ENABLED,
                FLEDGE_DEFAULT_KANON_SIGN_JOIN_LOGGING_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> {
                    setFledgeAuctionServerEnabled(value);
                    mockGetAdServicesFlag(KEY_FLEDGE_ENABLE_KANON_SIGN_JOIN_FEATURE, value);
                },
                Flags::getFledgeKAnonLoggingEnabled);
    }

    @Test
    public void testKAnonKeyAttestationEnabled() {
        mFlagsTestHelper.testGuardedFeatureFlag(
                KEY_FLEDGE_KANON_KEY_ATTESTATION_ENABLED,
                FLEDGE_DEFAULT_KANON_KEY_ATTESTATION_ENABLED,
                FeatureFlagType.FEATURE_FLAG,
                value -> {
                    setFledgeAuctionServerEnabled(value);
                    mockGetAdServicesFlag(KEY_FLEDGE_ENABLE_KANON_SIGN_JOIN_FEATURE, value);
                },
                Flags::getFledgeKAnonKeyAttestationEnabled);
    }

    @Test
    public void testKAnonSignBatchSizeFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_SIGN_BATCH_SIZE,
                FLEDGE_DEFAULT_KANON_SIGN_BATCH_SIZE,
                Flags::getFledgeKAnonSignBatchSize);
    }

    @Test
    public void testKAnonMessageTtlSecondsFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_MESSAGE_TTL_SECONDS,
                FLEDGE_DEFAULT_KANON_MESSAGE_TTL_SECONDS,
                Flags::getFledgeKAnonMessageTtlSeconds);
    }

    @Test
    public void testKAnonPercentageImmediateSignJoinCalls() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_KANON_PERCENTAGE_IMMEDIATE_SIGN_JOIN_CALLS,
                FLEDGE_DEFAULT_KANON_PERCENTAGE_IMMEDIATE_SIGN_JOIN_CALLS,
                Flags::getFledgeKAnonPercentageImmediateSignJoinCalls);
    }

    @Test
    public void testGetFledgeCustomAudienceCliEnabledStatusFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_IS_CUSTOM_AUDIENCE_CLI_ENABLED,
                FLEDGE_DEFAULT_CUSTOM_AUDIENCE_CLI_ENABLED,
                Flags::getFledgeCustomAudienceCLIEnabledStatus);
    }

    @Test
    public void testGetFledgConsentedDebuggingCliEnabledStatusFlag() {
        mFlagsTestHelper.testConfigFlag(
                KEY_FLEDGE_IS_CONSENTED_DEBUGGING_CLI_ENABLED,
                FLEDGE_DEFAULT_CONSENTED_DEBUGGING_CLI_ENABLED,
                Flags::getFledgeConsentedDebuggingCliEnabledStatus);
    }

    @Test
    public void testGetAdServicesRetryStrategyEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_AD_SERVICES_RETRY_STRATEGY_ENABLED,
                DEFAULT_AD_SERVICES_RETRY_STRATEGY_ENABLED,
                Flags::getAdServicesRetryStrategyEnabled);
    }

    @Test
    public void testGetAdServicesJsScriptEngineMaxRetryAttempts() {
        mFlagsTestHelper.testConfigFlag(
                KEY_AD_SERVICES_JS_SCRIPT_ENGINE_MAX_RETRY_ATTEMPTS,
                DEFAULT_AD_SERVICES_JS_SCRIPT_ENGINE_MAX_RETRY_ATTEMPTS,
                Flags::getAdServicesJsScriptEngineMaxRetryAttempts);
    }

    private void overrideKAnonFlags(String phOverridingValue, String property) {
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                property,
                phOverridingValue,
                /* makeDefault */ false);
    }

    private void setFledgeAuctionServerEnabled(boolean phOverridingValue) {
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_FLEDGE_AUCTION_SERVER_ENABLED,
                Boolean.toString(phOverridingValue),
                /* makeDefault */ false);
    }

    private static void setCobaltLoggingEnabled(boolean overridingValue) {
        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_COBALT_LOGGING_ENABLED,
                Boolean.toString(overridingValue),
                /* makeDefault */ false);
    }

    @Test
    public void testGetAdServicesCommonStatesAllowList() {
        mFlagsTestHelper.testConfigFlag(
                KEY_GET_ADSERVICES_COMMON_STATES_ALLOW_LIST,
                GET_ADSERVICES_COMMON_STATES_ALLOW_LIST,
                Flags::getAdServicesCommonStatesAllowList);
    }

    @Test
    public void testGetTopicsEpochJobPeriodMs() {
        mFlagsTestHelper.testPositiveConfigFlag(
                KEY_TOPICS_EPOCH_JOB_PERIOD_MS,
                TOPICS_EPOCH_JOB_PERIOD_MS,
                Flags::getTopicsEpochJobPeriodMs);
    }

    @Test
    public void testGetBackgroundJobsLoggingEnabled() {
        boolean overridingValue = false;

        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_BACKGROUND_JOBS_LOGGING_KILL_SWITCH,
                Boolean.toString(overridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getBackgroundJobsLoggingKillSwitch()).isEqualTo(overridingValue);
        assertThat(mPhFlags.getBackgroundJobsLoggingEnabled()).isEqualTo(!overridingValue);

        overridingValue = true;

        DeviceConfig.setProperty(
                DeviceConfig.NAMESPACE_ADSERVICES,
                KEY_BACKGROUND_JOBS_LOGGING_KILL_SWITCH,
                Boolean.toString(overridingValue),
                /* makeDefault */ false);

        assertThat(mPhFlags.getBackgroundJobsLoggingKillSwitch()).isEqualTo(overridingValue);
        assertThat(mPhFlags.getBackgroundJobsLoggingEnabled()).isEqualTo(!overridingValue);
    }

    @Test
    public void testGetAdServicesModuleJobPolicy() {
        mFlagsTestHelper.testConfigFlag(
                KEY_AD_SERVICES_MODULE_JOB_POLICY,
                AD_SERVICES_MODULE_JOB_POLICY,
                Flags::getAdServicesModuleJobPolicy);
    }

    @Test
    public void testEnableConsentManagerV2() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_CONSENT_MANAGER_V2,
                DEFAULT_ENABLE_CONSENT_MANAGER_V2,
                Flags::getEnableConsentManagerV2);
    }

    @Test
    public void testEnableTabletRegionFix() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_TABLET_REGION_FIX,
                DEFAULT_ENABLE_TABLET_REGION_FIX,
                Flags::getEnableTabletRegionFix);
    }

    @Test
    public void testGetPasExtendedMetricsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PAS_EXTENDED_METRICS_ENABLED,
                PAS_EXTENDED_METRICS_ENABLED,
                Flags::getPasExtendedMetricsEnabled);
    }

    @Test
    public void testSpeOnPilotJobsEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_SPE_ON_PILOT_JOBS_ENABLED,
                DEFAULT_SPE_ON_PILOT_JOBS_ENABLED,
                Flags::getSpeOnPilotJobsEnabled);
    }

    @Test
    public void testEnrollmentApiBasedSchemaEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENROLLMENT_API_BASED_SCHEMA_ENABLED,
                ENROLLMENT_API_BASED_SCHEMA_ENABLED,
                Flags::getEnrollmentApiBasedSchemaEnabled);
    }

    @Test
    public void testSharedDatabaseSchemaVersion4Enabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_SHARED_DATABASE_SCHEMA_VERSION_4_ENABLED,
                SHARED_DATABASE_SCHEMA_VERSION_4_ENABLED,
                Flags::getSharedDatabaseSchemaVersion4Enabled);
    }

    @Test
    public void testGetJobSchedulingLoggingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_JOB_SCHEDULING_LOGGING_ENABLED,
                DEFAULT_JOB_SCHEDULING_LOGGING_ENABLED,
                Flags::getJobSchedulingLoggingEnabled);
    }

    @Test
    public void testGetJobSchedulingLoggingSamplingRate() {
        mFlagsTestHelper.testConfigFlag(
                KEY_JOB_SCHEDULING_LOGGING_SAMPLING_RATE,
                DEFAULT_JOB_SCHEDULING_LOGGING_SAMPLING_RATE,
                Flags::getJobSchedulingLoggingSamplingRate);
    }

    @Test
    public void testEnableBackCompatInit() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENABLE_BACK_COMPAT_INIT,
                DEFAULT_ENABLE_BACK_COMPAT_INIT,
                Flags::getEnableBackCompatInit);
    }

    @Test
    public void testGetCustomErrorCodeSamplingEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_CUSTOM_ERROR_CODE_SAMPLING_ENABLED,
                DEFAULT_CUSTOM_ERROR_CODE_SAMPLING_ENABLED,
                Flags::getCustomErrorCodeSamplingEnabled);
    }

    @Test
    public void testGetEncodedErrorCodeListPerSampleInterval() {
        mFlagsTestHelper.testConfigFlag(
                KEY_ENCODED_ERROR_CODE_LIST_PER_SAMPLE_INTERVAL,
                ENCODED_ERROR_CODE_LIST_PER_SAMPLE_INTERVAL,
                Flags::getEncodedErrorCodeListPerSampleInterval);
    }

    @Test
    public void testGetPasScriptDownloadReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PAS_SCRIPT_DOWNLOAD_READ_TIMEOUT_MS,
                DEFAULT_PAS_SCRIPT_DOWNLOAD_READ_TIMEOUT_MS,
                Flags::getPasScriptDownloadReadTimeoutMs);
    }

    @Test
    public void testGetPasScriptDownloadConnectionTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PAS_SCRIPT_DOWNLOAD_CONNECTION_TIMEOUT_MS,
                DEFAULT_PAS_SCRIPT_DOWNLOAD_CONNECTION_TIMEOUT_MS,
                Flags::getPasScriptDownloadConnectionTimeoutMs);
    }

    @Test
    public void testGetPasSignalsDownloadReadTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PAS_SIGNALS_DOWNLOAD_READ_TIMEOUT_MS,
                DEFAULT_PAS_SIGNALS_DOWNLOAD_READ_TIMEOUT_MS,
                Flags::getPasSignalsDownloadReadTimeoutMs);
    }

    @Test
    public void testGetPasSignalsDownloadConnectionTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PAS_SIGNALS_DOWNLOAD_CONNECTION_TIMEOUT_MS,
                DEFAULT_PAS_SIGNALS_DOWNLOAD_CONNECTION_TIMEOUT_MS,
                Flags::getPasSignalsDownloadConnectionTimeoutMs);
    }

    @Test
    public void testPasScriptExecutionTimeoutMs() {
        mFlagsTestHelper.testConfigFlag(
                KEY_PAS_SCRIPT_EXECUTION_TIMEOUT_MS,
                DEFAULT_PAS_SCRIPT_EXECUTION_TIMEOUT_MS,
                Flags::getPasScriptExecutionTimeoutMs);
    }

    @Test
    public void testSpeOnPilotJobsBatch2Enabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_SPE_ON_PILOT_JOBS_BATCH_2_ENABLED,
                DEFAULT_SPE_ON_PILOT_JOBS_BATCH_2_ENABLED,
                Flags::getSpeOnPilotJobsBatch2Enabled);
    }

    @Test
    public void testGetSpeOnEpochJobEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_SPE_ON_EPOCH_JOB_ENABLED,
                DEFAULT_SPE_ON_EPOCH_JOB_ENABLED,
                Flags::getSpeOnEpochJobEnabled);
    }

    @Test
    public void getSpeOnBackgroundFetchJobEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_SPE_ON_BACKGROUND_FETCH_JOB_ENABLED,
                DEFAULT_SPE_ON_BACKGROUND_FETCH_JOB_ENABLED,
                Flags::getSpeOnBackgroundFetchJobEnabled);
    }

    @Test
    public void getSpeOnAsyncRegistrationFallbackJobEnabled() {
        mFlagsTestHelper.testConfigFlag(
                KEY_SPE_ON_ASYNC_REGISTRATION_FALLBACK_JOB_ENABLED,
                DEFAULT_SPE_ON_ASYNC_REGISTRATION_FALLBACK_JOB_ENABLED,
                Flags::getSpeOnAsyncRegistrationFallbackJobEnabled);
    }

    private void setMeasurementKillSwitch(boolean value) {
        setAdservicesFlag(KEY_MEASUREMENT_KILL_SWITCH, value);
    }

    private void verifyGetBooleanNotCalled(String name) {
        ExtendedMockitoExpectations.verifyGetBooleanDeviceConfigFlagNotCalled(
                DeviceConfig.NAMESPACE_ADSERVICES, name);
    }

    private void overrideGlobalKillSwitch(boolean phOverridingValue) {
        if (SdkLevel.isAtLeastT()) {
            mockGetAdServicesFlag(KEY_GLOBAL_KILL_SWITCH, phOverridingValue);
        } else {
            mockGetAdServicesFlag(KEY_ENABLE_BACK_COMPAT, !phOverridingValue);
        }
    }

    private void setAuctionServerBaseFlag(boolean value) {
        mockGetAdServicesFlag(KEY_FLEDGE_AUCTION_SERVER_ENABLED, value);
    }

    private void setErrorCodeLoggingDenyList(String errorCodeLoggingDenyList) {
        mockGetAdServicesFlag(KEY_ERROR_CODE_LOGGING_DENY_LIST, errorCodeLoggingDenyList);
    }

    private void disableGlobalKillSwitch() {
        overrideGlobalKillSwitch(false);
    }

    private void enableGlobalKillSwitch() {
        overrideGlobalKillSwitch(true);
    }

    private void overrideSelectAdsKillSwitch(boolean value) {
        mockGetAdServicesFlag(KEY_FLEDGE_SELECT_ADS_KILL_SWITCH, value);
    }

    private void disableSelectAdsKillSwitch() {
        overrideSelectAdsKillSwitch(false);
    }

    private void enableSelectAdsKillSwitch() {
        overrideSelectAdsKillSwitch(true);
    }

    private void setEnrollmentBlocklist(String blocklistFlag) {
        mockGetAdServicesFlag(KEY_ENROLLMENT_BLOCKLIST_IDS, blocklistFlag);
    }

    private void setGlobalBlockedTopicIds(String blockedTopicIds) {
        mockGetAdServicesFlag(KEY_GLOBAL_BLOCKED_TOPIC_IDS, blockedTopicIds);
    }
}
