/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.cobalt.crypto;

import static java.nio.charset.StandardCharsets.UTF_8;

/**
 * Container for static keys/key data used in {@link HpkeEncrypter}.
 *
 * <p>The keys contain the raw key bytes extracted from Tink public keys as decimal values. Tink
 * public key can be obtained with the Keyset API GetPublicKeysetHandle() and WriteNoSecret. Raw key
 * material can be extracted from the Tink internal structure, hpke.proto which can be parsed from
 * key data stored in Tink public key.
 *
 * <p>This output can be generated by doing something like: <code>
 * StringBuilder sb = new StringBuilder();
 * sb.append("new byte[] {");
 * for (byte b : key.getSerializedKey().toByteArray()) {
 *   sb.append(b).append(", ");
 * }
 * sb.setLength(sb.length() - 2);
 * sb.append("};");
 * </code>
 */
final class PublicKeys {
    // TODO(b/286278248): HPKE PROD keys are not available in the keystore. The PROD keys will be
    //  added once the HPKE DEV keys are end-to-end tested.
    static final int X25519_PUBLIC_VALUE_LEN = 32;
    static final byte[] SHUFFLER_KEY_DEV =
            new byte[] {
                -90, -73, 32, -62, 119, -72, 48, -40, -127, -103, -7, -58, 35, -88, -4, 45, 33, 21,
                32, 48, 42, 43, 89, 33, -43, -81, -64, 111, 118, 76, 77, 32
            };
    static final int SHUFFLER_KEY_INDEX_DEV = 9;
    static final byte[] SHUFFLER_CONTEXT_INFO_BYTES = "cobalt-1.0-shuffler".getBytes(UTF_8);
    static final byte[] ANALYZER_KEY_DEV =
            new byte[] {
                -5, -81, 123, 9, -16, -83, -75, -106, 122, -13, 111, -106, 123, -65, -7, -78, 125,
                107, -23, 69, 120, -59, 40, 19, 6, 92, -119, 6, -58, 126, 125, 41
            };
    static final int ANALYZER_KEY_INDEX_DEV = 10;
    static final byte[] ANALYZER_CONTEXT_INFO_BYTES = "cobalt-1.0-analyzer".getBytes(UTF_8);
}
