// Signature format: 2.0
package android.app.sdksandbox {

  public final class LoadSdkException extends java.lang.Exception implements android.os.Parcelable {
    ctor public LoadSdkException(@NonNull Throwable, @NonNull android.os.Bundle);
    method public int describeContents();
    method @NonNull public android.os.Bundle getExtraInformation();
    method public int getLoadSdkErrorCode();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.app.sdksandbox.LoadSdkException> CREATOR;
  }

  public final class RequestSurfacePackageException extends java.lang.Exception {
    ctor public RequestSurfacePackageException(int, @Nullable String);
    ctor public RequestSurfacePackageException(int, @Nullable String, @Nullable Throwable);
    ctor public RequestSurfacePackageException(int, @Nullable String, @Nullable Throwable, @NonNull android.os.Bundle);
    method @NonNull public android.os.Bundle getExtraErrorInformation();
    method public int getRequestSurfacePackageErrorCode();
  }

  public final class SandboxedSdk implements android.os.Parcelable {
    ctor public SandboxedSdk(@NonNull android.os.IBinder);
    method public int describeContents();
    method @Nullable public android.os.IBinder getInterface();
    method public void writeToParcel(@NonNull android.os.Parcel, int);
    field @NonNull public static final android.os.Parcelable.Creator<android.app.sdksandbox.SandboxedSdk> CREATOR;
  }

  public abstract class SandboxedSdkProvider {
    ctor public SandboxedSdkProvider();
    method public final void attachContext(@NonNull android.content.Context);
    method public void beforeUnloadSdk();
    method @Nullable public android.content.Context getContext();
    method @NonNull public abstract android.view.View getView(@NonNull android.content.Context, @NonNull android.os.Bundle, int, int);
    method public abstract void onDataReceived(@NonNull android.os.Bundle, @NonNull android.app.sdksandbox.SandboxedSdkProvider.DataReceivedCallback);
    method @NonNull public abstract android.app.sdksandbox.SandboxedSdk onLoadSdk(@NonNull android.os.Bundle) throws android.app.sdksandbox.LoadSdkException;
  }

  public static interface SandboxedSdkProvider.DataReceivedCallback {
    method public void onDataReceivedError(@NonNull String);
    method public void onDataReceivedSuccess(@NonNull android.os.Bundle);
  }

  public final class SdkSandboxManager {
    method public void addSdkSandboxLifecycleCallback(@NonNull java.util.concurrent.Executor, @NonNull android.app.sdksandbox.SdkSandboxManager.SdkSandboxLifecycleCallback);
    method @NonNull public java.util.List<android.content.pm.SharedLibraryInfo> getLoadedSdkLibrariesInfo();
    method public static int getSdkSandboxState();
    method public void loadSdk(@NonNull String, @NonNull android.os.Bundle, @NonNull java.util.concurrent.Executor, @NonNull android.os.OutcomeReceiver<android.app.sdksandbox.SandboxedSdk,android.app.sdksandbox.LoadSdkException>);
    method public void removeSdkSandboxLifecycleCallback(@NonNull android.app.sdksandbox.SdkSandboxManager.SdkSandboxLifecycleCallback);
    method public void requestSurfacePackage(@NonNull String, @NonNull android.os.Bundle, @NonNull java.util.concurrent.Executor, @NonNull android.os.OutcomeReceiver<android.os.Bundle,android.app.sdksandbox.RequestSurfacePackageException>);
    method public void sendData(@NonNull String, @NonNull android.os.Bundle, @NonNull java.util.concurrent.Executor, @NonNull android.os.OutcomeReceiver<android.app.sdksandbox.SendDataResponse,android.app.sdksandbox.SendDataException>);
    method public void unloadSdk(@NonNull String);
    field public static final String EXTRA_DISPLAY_ID = "android.app.sdksandbox.extra.DISPLAY_ID";
    field public static final String EXTRA_HEIGHT_IN_PIXELS = "android.app.sdksandbox.extra.HEIGHT_IN_PIXELS";
    field public static final String EXTRA_HOST_TOKEN = "android.app.sdksandbox.extra.HOST_TOKEN";
    field public static final String EXTRA_SURFACE_PACKAGE = "android.app.sdksandbox.extra.SURFACE_PACKAGE";
    field public static final String EXTRA_WIDTH_IN_PIXELS = "android.app.sdksandbox.extra.WIDTH_IN_PIXELS";
    field public static final int LOAD_SDK_ALREADY_LOADED = 101; // 0x65
    field public static final int LOAD_SDK_INTERNAL_ERROR = 500; // 0x1f4
    field public static final int LOAD_SDK_NOT_FOUND = 100; // 0x64
    field public static final int LOAD_SDK_SDK_DEFINED_ERROR = 102; // 0x66
    field public static final int REQUEST_SURFACE_PACKAGE_INTERNAL_ERROR = 700; // 0x2bc
    field public static final int SDK_SANDBOX_PROCESS_NOT_AVAILABLE = 503; // 0x1f7
    field public static final String SDK_SANDBOX_SERVICE = "sdk_sandbox";
    field public static final int SDK_SANDBOX_STATE_DISABLED = 0; // 0x0
    field public static final int SDK_SANDBOX_STATE_ENABLED_PROCESS_ISOLATION = 2; // 0x2
    field public static final int SEND_DATA_INTERNAL_ERROR = 800; // 0x320
  }

  public static interface SdkSandboxManager.SdkSandboxLifecycleCallback {
    method public void onSdkSandboxDied();
  }

  public final class SendDataException extends java.lang.Exception {
    ctor public SendDataException(int, @Nullable String);
    ctor public SendDataException(int, @Nullable String, @Nullable Throwable);
    ctor public SendDataException(int, @Nullable String, @Nullable Throwable, @NonNull android.os.Bundle);
    method @NonNull public android.os.Bundle getExtraErrorInformation();
    method public int getSendDataErrorCode();
  }

  public final class SendDataResponse {
    ctor public SendDataResponse(@NonNull android.os.Bundle);
    method @NonNull public android.os.Bundle getExtraInformation();
  }

}

